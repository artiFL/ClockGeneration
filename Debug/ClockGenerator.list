
ClockGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800bf20  0800bf20  0001bf20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3fc  0800c3fc  00020360  2**0
                  CONTENTS
  4 .ARM          00000000  0800c3fc  0800c3fc  00020360  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c3fc  0800c3fc  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3fc  0800c3fc  0001c3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c400  0800c400  0001c400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800c404  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  20000360  0800c764  00020360  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001054  0800c764  00021054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175eb  00000000  00000000  00020389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000393d  00000000  00000000  00037974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0003b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  0003c088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b86f  00000000  00000000  0003ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a98  00000000  00000000  0005852f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089506  00000000  00000000  00069fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f34cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e4  00000000  00000000  000f3520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000360 	.word	0x20000360
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bf08 	.word	0x0800bf08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000364 	.word	0x20000364
 800014c:	0800bf08 	.word	0x0800bf08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2lz>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	460c      	mov	r4, r1
 8000a50:	4605      	mov	r5, r0
 8000a52:	4621      	mov	r1, r4
 8000a54:	4628      	mov	r0, r5
 8000a56:	2200      	movs	r2, #0
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f7ff ffaf 	bl	80009bc <__aeabi_dcmplt>
 8000a5e:	b928      	cbnz	r0, 8000a6c <__aeabi_d2lz+0x20>
 8000a60:	4628      	mov	r0, r5
 8000a62:	4621      	mov	r1, r4
 8000a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a68:	f000 b80a 	b.w	8000a80 <__aeabi_d2ulz>
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000a72:	f000 f805 	bl	8000a80 <__aeabi_d2ulz>
 8000a76:	4240      	negs	r0, r0
 8000a78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a7c:	bd38      	pop	{r3, r4, r5, pc}
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2ulz>:
 8000a80:	b5d0      	push	{r4, r6, r7, lr}
 8000a82:	2200      	movs	r2, #0
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <__aeabi_d2ulz+0x34>)
 8000a86:	4606      	mov	r6, r0
 8000a88:	460f      	mov	r7, r1
 8000a8a:	f7ff fd25 	bl	80004d8 <__aeabi_dmul>
 8000a8e:	f7ff ffbd 	bl	8000a0c <__aeabi_d2uiz>
 8000a92:	4604      	mov	r4, r0
 8000a94:	f7ff fca6 	bl	80003e4 <__aeabi_ui2d>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <__aeabi_d2ulz+0x38>)
 8000a9c:	f7ff fd1c 	bl	80004d8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	f7ff fb5e 	bl	8000168 <__aeabi_dsub>
 8000aac:	f7ff ffae 	bl	8000a0c <__aeabi_d2uiz>
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ab4:	3df00000 	.word	0x3df00000
 8000ab8:	41f00000 	.word	0x41f00000

08000abc <adf435x_init>:
#include "adf4351lib.h"

adf435xSettings* adf435x_init(adf435xSettings* obj, uint32_t ref_clk,
		void (*low)(void), void (*high)(void), void (*send)(uint8_t*, uint8_t), void (*delay_t)(uint32_t))
{
 8000abc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	603b      	str	r3, [r7, #0]
	uint8_t refDoubler = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	75fb      	strb	r3, [r7, #23]
	ref_clk < 30000000 ? (refDoubler = 1) : (refDoubler = 0);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4a5f      	ldr	r2, [pc, #380]	; (8000c50 <adf435x_init+0x194>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d802      	bhi.n	8000ade <adf435x_init+0x22>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	75fb      	strb	r3, [r7, #23]
 8000adc:	e001      	b.n	8000ae2 <adf435x_init+0x26>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	75fb      	strb	r3, [r7, #23]
	//if(low == NULL){}
	//if(high == NULL){return;}
	//if(send == NULL){return;}
	//if(delay_t == NULL){return;}

			obj->low_CS = low,
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	64da      	str	r2, [r3, #76]	; 0x4c
			obj->high_CS = high,
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	651a      	str	r2, [r3, #80]	; 0x50
			obj->send_message = send,
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000af2:	655a      	str	r2, [r3, #84]	; 0x54
			obj->delay = delay_t,
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000af8:	659a      	str	r2, [r3, #88]	; 0x58

			obj->INT = 0,
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	809a      	strh	r2, [r3, #4]
			obj->FRAC = 0,
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2200      	movs	r2, #0
 8000b04:	80da      	strh	r2, [r3, #6]

			obj->phase_adj = 0,
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	721a      	strb	r2, [r3, #8]
			obj->prescaler = 0,
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	725a      	strb	r2, [r3, #9]
			obj->phase = 1,
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2201      	movs	r2, #1
 8000b16:	815a      	strh	r2, [r3, #10]
			obj->MOD = 4095,
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b1e:	819a      	strh	r2, [r3, #12]

			obj->low_noise_spur = 0,
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	739a      	strb	r2, [r3, #14]
			obj->muxout = 0,
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	73da      	strb	r2, [r3, #15]
			obj->REF_CLK = ref_clk,
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	601a      	str	r2, [r3, #0]
			obj->ref_doubler = ref_clk < 30000000 ? (1) : (0),
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	4a46      	ldr	r2, [pc, #280]	; (8000c50 <adf435x_init+0x194>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	bf94      	ite	ls
 8000b3a:	2301      	movls	r3, #1
 8000b3c:	2300      	movhi	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	741a      	strb	r2, [r3, #16]

					obj->rdiv2 = 1,
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	745a      	strb	r2, [r3, #17]
					obj->r_counter = 10,
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	220a      	movs	r2, #10
 8000b50:	825a      	strh	r2, [r3, #18]
					obj->charge_pump_current = 0b111,
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2207      	movs	r2, #7
 8000b56:	755a      	strb	r2, [r3, #21]
					obj->ldf = 1,
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	759a      	strb	r2, [r3, #22]
					obj->pd_polarity = 1,
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2201      	movs	r2, #1
 8000b62:	761a      	strb	r2, [r3, #24]

	// Register 3:
					obj->clock_divider = 150,
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2296      	movs	r2, #150	; 0x96
 8000b68:	845a      	strh	r2, [r3, #34]	; 0x22

	// Register 4:
					obj->feedback_sel = 1,
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					obj->rf_div_sel = 2, // 0 = /1, 1=/2, 2=/4 ...
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2202      	movs	r2, #2
 8000b76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	obj->band_select_clkdiv = 4,
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	obj->vco_pwrdown = 0,
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	obj->mtld = 1,
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	obj->aux_outsel = 0,
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	obj->rf_ena = 1, // 0 - output disabled
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	obj->out_pwr = 3, // 0 - min, 3 - max
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	// Register 5:
	obj->ld_pinmode = 1;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2201      	movs	r2, #1
 8000bae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	obj->pfd_freq = (obj->REF_CLK * (1.0 + obj->ref_doubler)) / (obj->r_counter * ((1.0 + obj->rdiv2)));
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc14 	bl	80003e4 <__aeabi_ui2d>
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	460d      	mov	r5, r1
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	7c1b      	ldrb	r3, [r3, #16]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fc1d 	bl	8000404 <__aeabi_i2d>
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <adf435x_init+0x198>)
 8000bd0:	f7ff facc 	bl	800016c <__adddf3>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	f7ff fc7c 	bl	80004d8 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4690      	mov	r8, r2
 8000be6:	4699      	mov	r9, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	8a5b      	ldrh	r3, [r3, #18]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fc09 	bl	8000404 <__aeabi_i2d>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	460d      	mov	r5, r1
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	7c5b      	ldrb	r3, [r3, #17]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fc02 	bl	8000404 <__aeabi_i2d>
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <adf435x_init+0x198>)
 8000c06:	f7ff fab1 	bl	800016c <__adddf3>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	4620      	mov	r0, r4
 8000c10:	4629      	mov	r1, r5
 8000c12:	f7ff fc61 	bl	80004d8 <__aeabi_dmul>
 8000c16:	4602      	mov	r2, r0
 8000c18:	460b      	mov	r3, r1
 8000c1a:	4640      	mov	r0, r8
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	f7ff fd85 	bl	800072c <__aeabi_ddiv>
 8000c22:	4602      	mov	r2, r0
 8000c24:	460b      	mov	r3, r1
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f7ff feef 	bl	8000a0c <__aeabi_d2uiz>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	649a      	str	r2, [r3, #72]	; 0x48

	memset(obj->reg, 0, 6);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3330      	adds	r3, #48	; 0x30
 8000c38:	2206      	movs	r2, #6
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f008 f92b 	bl	8008e98 <memset>
	return obj;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c4e:	bf00      	nop
 8000c50:	01c9c37f 	.word	0x01c9c37f
 8000c54:	3ff00000 	.word	0x3ff00000

08000c58 <prepare_registers>:

adf435xSettings* prepare_registers(adf435xSettings* obj, uint32_t frequency)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	if (frequency >= 2200000000)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	4a87      	ldr	r2, [pc, #540]	; (8000e84 <prepare_registers+0x22c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d903      	bls.n	8000c72 <prepare_registers+0x1a>
		obj->rf_div_sel = 0;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	if (frequency < 2200000000)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	4a83      	ldr	r2, [pc, #524]	; (8000e84 <prepare_registers+0x22c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d803      	bhi.n	8000c82 <prepare_registers+0x2a>
		obj->rf_div_sel = 1;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	if (frequency < 1100000000)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	4a80      	ldr	r2, [pc, #512]	; (8000e88 <prepare_registers+0x230>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d803      	bhi.n	8000c92 <prepare_registers+0x3a>
		obj->rf_div_sel = 2;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	if (frequency < 550000000)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	4a7d      	ldr	r2, [pc, #500]	; (8000e8c <prepare_registers+0x234>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d803      	bhi.n	8000ca2 <prepare_registers+0x4a>
		obj->rf_div_sel = 3;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	if (frequency < 275000000)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	4a7a      	ldr	r2, [pc, #488]	; (8000e90 <prepare_registers+0x238>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d803      	bhi.n	8000cb2 <prepare_registers+0x5a>
		obj->rf_div_sel = 4;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2204      	movs	r2, #4
 8000cae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	if (frequency < 137500000)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	4a77      	ldr	r2, [pc, #476]	; (8000e94 <prepare_registers+0x23c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d803      	bhi.n	8000cc2 <prepare_registers+0x6a>
		obj->rf_div_sel = 5;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	if (frequency < 68750000)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	4a74      	ldr	r2, [pc, #464]	; (8000e98 <prepare_registers+0x240>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d803      	bhi.n	8000cd2 <prepare_registers+0x7a>
		obj->rf_div_sel = 6;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2206      	movs	r2, #6
 8000cce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	obj->INT = (frequency * (1 << obj->rf_div_sel)) / obj->pfd_freq;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cd8:	461a      	mov	r2, r3
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	fa03 f202 	lsl.w	r2, r3, r2
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	809a      	strh	r2, [r3, #4]
	obj->FRAC = (((frequency * (1 << obj->rf_div_sel)) % obj->pfd_freq) * 4095)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	4093      	lsls	r3, r2
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d02:	fb02 f201 	mul.w	r2, r2, r1
 8000d06:	1a9a      	subs	r2, r3, r2
 8000d08:	4613      	mov	r3, r2
 8000d0a:	031b      	lsls	r3, r3, #12
 8000d0c:	1a9a      	subs	r2, r3, r2
			/ obj->pfd_freq;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
	obj->FRAC = (((frequency * (1 << obj->rf_div_sel)) % obj->pfd_freq) * 4095)
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	80da      	strh	r2, [r3, #6]

	obj->reg[0] = SHL(obj->INT, 15) | SHL(obj->FRAC, 3);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	889b      	ldrh	r3, [r3, #4]
 8000d20:	03da      	lsls	r2, r3, #15
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	88db      	ldrh	r3, [r3, #6]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	631a      	str	r2, [r3, #48]	; 0x30
	obj->reg[1] = SHL(obj->phase_adj, 28) | SHL(obj->prescaler, 27)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7a1b      	ldrb	r3, [r3, #8]
 8000d32:	071a      	lsls	r2, r3, #28
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7a5b      	ldrb	r3, [r3, #9]
 8000d38:	06db      	lsls	r3, r3, #27
 8000d3a:	431a      	orrs	r2, r3
			| SHL(obj->phase, 15) | SHL(obj->MOD, 3) | 0b001;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	895b      	ldrh	r3, [r3, #10]
 8000d40:	03db      	lsls	r3, r3, #15
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	899b      	ldrh	r3, [r3, #12]
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	f043 0201 	orr.w	r2, r3, #1
	obj->reg[1] = SHL(obj->phase_adj, 28) | SHL(obj->prescaler, 27)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
	obj->reg[2] = SHL(obj->low_noise_spur, 29) | SHL(obj->muxout, 26)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7b9b      	ldrb	r3, [r3, #14]
 8000d58:	075a      	lsls	r2, r3, #29
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7bdb      	ldrb	r3, [r3, #15]
 8000d5e:	069b      	lsls	r3, r3, #26
 8000d60:	431a      	orrs	r2, r3
			| SHL(obj->ref_doubler, 25) | SHL(obj->rdiv2, 24)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7c1b      	ldrb	r3, [r3, #16]
 8000d66:	065b      	lsls	r3, r3, #25
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7c5b      	ldrb	r3, [r3, #17]
 8000d6e:	061b      	lsls	r3, r3, #24
 8000d70:	431a      	orrs	r2, r3
			| SHL(obj->r_counter, 14) | SHL(obj->dbl_buf, 13)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	8a5b      	ldrh	r3, [r3, #18]
 8000d76:	039b      	lsls	r3, r3, #14
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7d1b      	ldrb	r3, [r3, #20]
 8000d7e:	035b      	lsls	r3, r3, #13
 8000d80:	431a      	orrs	r2, r3
			| SHL(obj->charge_pump_current, 9) | SHL(obj->ldf, 8)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7d5b      	ldrb	r3, [r3, #21]
 8000d86:	025b      	lsls	r3, r3, #9
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7d9b      	ldrb	r3, [r3, #22]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	431a      	orrs	r2, r3
			| SHL(obj->ldp, 7) | SHL(obj->pd_polarity, 6) | SHL(obj->powerdown, 5)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7ddb      	ldrb	r3, [r3, #23]
 8000d96:	01db      	lsls	r3, r3, #7
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7e1b      	ldrb	r3, [r3, #24]
 8000d9e:	019b      	lsls	r3, r3, #6
 8000da0:	431a      	orrs	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7e5b      	ldrb	r3, [r3, #25]
 8000da6:	015b      	lsls	r3, r3, #5
 8000da8:	431a      	orrs	r2, r3
			| SHL(obj->cp_three_state, 4) | SHL(obj->counter_reset, 3) | 0b010;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7e9b      	ldrb	r3, [r3, #26]
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7edb      	ldrb	r3, [r3, #27]
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	f043 0202 	orr.w	r2, r3, #2
	obj->reg[2] = SHL(obj->low_noise_spur, 29) | SHL(obj->muxout, 26)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
	obj->reg[3] = SHL(obj->band_mode_clksel, 23) | SHL(obj->abp, 22)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7f1b      	ldrb	r3, [r3, #28]
 8000dc6:	05da      	lsls	r2, r3, #23
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7f5b      	ldrb	r3, [r3, #29]
 8000dcc:	059b      	lsls	r3, r3, #22
 8000dce:	431a      	orrs	r2, r3
			| SHL(obj->chg_cancel, 21) | SHL(obj->csr, 18)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7f9b      	ldrb	r3, [r3, #30]
 8000dd4:	055b      	lsls	r3, r3, #21
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7fdb      	ldrb	r3, [r3, #31]
 8000ddc:	049b      	lsls	r3, r3, #18
 8000dde:	431a      	orrs	r2, r3
			| SHL(obj->clkdiv_mode, 15) | SHL(obj->clock_divider, 3) | 0b011;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de6:	03db      	lsls	r3, r3, #15
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	f043 0203 	orr.w	r2, r3, #3
	obj->reg[3] = SHL(obj->band_mode_clksel, 23) | SHL(obj->abp, 22)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	63da      	str	r2, [r3, #60]	; 0x3c
	obj->reg[4] = SHL(obj->feedback_sel, 23) | SHL(obj->rf_div_sel, 20)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e00:	05da      	lsls	r2, r3, #23
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e08:	051b      	lsls	r3, r3, #20
 8000e0a:	431a      	orrs	r2, r3
			| SHL(obj->band_select_clkdiv, 12) | SHL(obj->vco_pwrdown, 9)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000e12:	031b      	lsls	r3, r3, #12
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000e1c:	025b      	lsls	r3, r3, #9
 8000e1e:	431a      	orrs	r2, r3
			| SHL(obj->mtld, 10) | SHL(obj->aux_outsel, 9)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e26:	029b      	lsls	r3, r3, #10
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000e30:	025b      	lsls	r3, r3, #9
 8000e32:	431a      	orrs	r2, r3
			| SHL(obj->aux_outena, 8) | SHL(obj->aux_pwr, 6) | SHL(obj->rf_ena, 5)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000e4e:	015b      	lsls	r3, r3, #5
 8000e50:	431a      	orrs	r2, r3
			| SHL(obj->out_pwr, 3) | 0b100;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	f043 0204 	orr.w	r2, r3, #4
	obj->reg[4] = SHL(obj->feedback_sel, 23) | SHL(obj->rf_div_sel, 20)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
	obj->reg[5] = SHL(obj->ld_pinmode, 22) | SHL(0b11, 19) | 0b101;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000e6a:	059b      	lsls	r3, r3, #22
 8000e6c:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8000e70:	f043 0305 	orr.w	r3, r3, #5
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6453      	str	r3, [r2, #68]	; 0x44
	return obj;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	832155ff 	.word	0x832155ff
 8000e88:	4190aaff 	.word	0x4190aaff
 8000e8c:	20c8557f 	.word	0x20c8557f
 8000e90:	10642abf 	.word	0x10642abf
 8000e94:	0832155f 	.word	0x0832155f
 8000e98:	04190aaf 	.word	0x04190aaf

08000e9c <send_register>:

adf435xSettings* send_register(adf435xSettings* obj, uint16_t reg_id)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	uint8_t data[4] = {0,};
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

	data[0] = (uint8_t) (obj->reg[reg_id] >> 24);
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	320c      	adds	r2, #12
 8000eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb6:	0e1b      	lsrs	r3, r3, #24
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	733b      	strb	r3, [r7, #12]
	data[1] = (uint8_t) (obj->reg[reg_id] >> 16);
 8000ebc:	887a      	ldrh	r2, [r7, #2]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	320c      	adds	r2, #12
 8000ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec6:	0c1b      	lsrs	r3, r3, #16
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	737b      	strb	r3, [r7, #13]
	data[2] = (uint8_t) (obj->reg[reg_id] >> 8);
 8000ecc:	887a      	ldrh	r2, [r7, #2]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	320c      	adds	r2, #12
 8000ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	73bb      	strb	r3, [r7, #14]
	data[3] = (uint8_t) (obj->reg[reg_id]);
 8000edc:	887a      	ldrh	r2, [r7, #2]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	320c      	adds	r2, #12
 8000ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	73fb      	strb	r3, [r7, #15]

	obj->low_CS();
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4798      	blx	r3

	obj->delay(20);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	4798      	blx	r3

	obj->send_message(data, 4);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	2104      	movs	r1, #4
 8000f02:	4610      	mov	r0, r2
 8000f04:	4798      	blx	r3

	obj->high_CS();
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f0a:	4798      	blx	r3

	obj->delay(20);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	2014      	movs	r0, #20
 8000f12:	4798      	blx	r3

	obj->low_CS();
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	4798      	blx	r3

	return obj;
 8000f1a:	687b      	ldr	r3, [r7, #4]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <update_all_register>:

adf435xSettings* update_all_register(adf435xSettings* obj)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	for (int i = 5; i >= 0; i--)
 8000f2c:	2305      	movs	r3, #5
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e009      	b.n	8000f46 <update_all_register+0x22>
	{
		obj = send_register(obj, i);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ffaf 	bl	8000e9c <send_register>
 8000f3e:	6078      	str	r0, [r7, #4]
	for (int i = 5; i >= 0; i--)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	daf2      	bge.n	8000f32 <update_all_register+0xe>
	}
	return obj;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <scan_cmd>:

static CLI_Command_t *Command_List;


uint8_t scan_cmd(const char *argv, const char *fmt)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
	return !strncmp(argv, fmt, strlen(fmt));
 8000f60:	6838      	ldr	r0, [r7, #0]
 8000f62:	f7ff f8f5 	bl	8000150 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f008 f851 	bl	8009014 <strncmp>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf0c      	ite	eq
 8000f78:	2301      	moveq	r3, #1
 8000f7a:	2300      	movne	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <cli_init>:
	}
	count = 0;
}

void cli_init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	Command_List = malloc(sizeof(CLI_Command_t) * max_command);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <cli_init+0x1c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	4618      	mov	r0, r3
 8000f94:	f007 ff78 	bl	8008e88 <malloc>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <cli_init+0x20>)
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000380 	.word	0x20000380

08000fac <registration>:

uint8_t registration(const char *command, const char *declaration, void (*function)(uint8_t argc, const char *argv[]))
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	CLI_Command_t Definition =
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	833b      	strh	r3, [r7, #24]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	61fb      	str	r3, [r7, #28]
		.CLI_Command = command,
		.CLI_Command_Description = declaration,
		.CLI_Command_Length = 0,
		.CLI_Callback = (void*) function };

	if (Command_Count < MAX_COMMANDS)
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <registration+0x60>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	2b27      	cmp	r3, #39	; 0x27
 8000fce:	d817      	bhi.n	8001000 <registration+0x54>
	{
		Definition.CLI_Command_Length = strlen(command);
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff f8bd 	bl	8000150 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	833b      	strh	r3, [r7, #24]
		Command_List[Command_Count] = Definition;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <registration+0x64>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <registration+0x60>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	4413      	add	r3, r2
 8000fe8:	461c      	mov	r4, r3
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Command_Count++;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <registration+0x60>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <registration+0x60>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	bf00      	nop
 800100c:	2000037c 	.word	0x2000037c
 8001010:	20000380 	.word	0x20000380

08001014 <CLI_Process_Command>:

	return 0;
}

uint8_t CLI_Process_Command(const char *cli_in_buffer)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 800101a:	af00      	add	r7, sp, #0
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	6018      	str	r0, [r3, #0]
	uint8_t is_command_valid = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	const char *argv[MAX_ARGS_IN_CMD];
	uint8_t argc = CLI_Get_Argument_Length(argv);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f8a7 	bl	800117e <CLI_Get_Argument_Length>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	f107 030f 	add.w	r3, r7, #15
 8001038:	701a      	strb	r2, [r3, #0]

	CLI_Command_t *command_list_ptr = NULL;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

	/* Search for the command string in the list of registered commands. */
	for (uint16_t i = 0; i < Command_Count; i++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8001046:	e031      	b.n	80010ac <CLI_Process_Command+0x98>
	{
		command_list_ptr = &Command_List[i];
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <CLI_Process_Command+0xe8>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	4413      	add	r3, r2
 8001054:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		uint16_t cmd_len = command_list_ptr->CLI_Command_Length;
 8001058:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800105c:	891b      	ldrh	r3, [r3, #8]
 800105e:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c

		if ((cli_in_buffer[cmd_len] == ' ') || (cli_in_buffer[cmd_len] == 0x00))
 8001062:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001066:	1d3a      	adds	r2, r7, #4
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b20      	cmp	r3, #32
 8001070:	d007      	beq.n	8001082 <CLI_Process_Command+0x6e>
 8001072:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001076:	1d3a      	adds	r2, r7, #4
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10f      	bne.n	80010a2 <CLI_Process_Command+0x8e>
		{
			if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command, cmd_len)
 8001082:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	f8b7 240c 	ldrh.w	r2, [r7, #1036]	; 0x40c
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	f007 ffc0 	bl	8009014 <strncmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d103      	bne.n	80010a2 <CLI_Process_Command+0x8e>
					== 0)
			{
				is_command_valid = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
				/* command found break the loop */
				break;
 80010a0:	e00a      	b.n	80010b8 <CLI_Process_Command+0xa4>
	for (uint16_t i = 0; i < Command_Count; i++)
 80010a2:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80010a6:	3301      	adds	r3, #1
 80010a8:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <CLI_Process_Command+0xec>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3c7      	bcc.n	8001048 <CLI_Process_Command+0x34>
			}
		}
	}

	if (is_command_valid)
 80010b8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d016      	beq.n	80010ee <CLI_Process_Command+0xda>
	{
		if (command_list_ptr->CLI_Callback != NULL)
 80010c0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d011      	beq.n	80010ee <CLI_Process_Command+0xda>
		{
			CLI_Parse_Arguments(cli_in_buffer, &argc, argv);
 80010ca:	f107 0210 	add.w	r2, r7, #16
 80010ce:	f107 010f 	add.w	r1, r7, #15
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f000 f815 	bl	8001104 <CLI_Parse_Arguments>

			command_list_ptr->CLI_Callback(argc, argv);
 80010da:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f107 020f 	add.w	r2, r7, #15
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	f107 0110 	add.w	r1, r7, #16
 80010ea:	4610      	mov	r0, r2
 80010ec:	4798      	blx	r3
		}
	}

	return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000380 	.word	0x20000380
 8001100:	2000037c 	.word	0x2000037c

08001104 <CLI_Parse_Arguments>:

void CLI_Parse_Arguments(const char *cli_in_buffer, uint8_t *argc,
		const char *argv[])
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	uint8_t argc_temp = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	75fb      	strb	r3, [r7, #23]
	/* arg 0 is input command */
	argv[argc_temp++] = cli_in_buffer;
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	75fa      	strb	r2, [r7, #23]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	601a      	str	r2, [r3, #0]

	while (argc_temp < MAX_ARGS_IN_CMD)
 8001124:	e01e      	b.n	8001164 <CLI_Parse_Arguments+0x60>
	{
		while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
		{
			cli_in_buffer++;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
		while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d007      	beq.n	8001144 <CLI_Parse_Arguments+0x40>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b20      	cmp	r3, #32
 800113a:	d1f4      	bne.n	8001126 <CLI_Parse_Arguments+0x22>
		}

		while ((*cli_in_buffer) == ' ')
 800113c:	e002      	b.n	8001144 <CLI_Parse_Arguments+0x40>
		{
			/* convert ' ' to NULL */
			//*cli_in_buffer = 0x00;
			cli_in_buffer++;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
		while ((*cli_in_buffer) == ' ')
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b20      	cmp	r3, #32
 800114a:	d0f8      	beq.n	800113e <CLI_Parse_Arguments+0x3a>
		}

		if (*cli_in_buffer != 0x00)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00b      	beq.n	800116c <CLI_Parse_Arguments+0x68>
		{
			argv[argc_temp++] = cli_in_buffer;
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	75fa      	strb	r2, [r7, #23]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	601a      	str	r2, [r3, #0]
	while (argc_temp < MAX_ARGS_IN_CMD)
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d1e0      	bne.n	800112c <CLI_Parse_Arguments+0x28>
 800116a:	e000      	b.n	800116e <CLI_Parse_Arguments+0x6a>
		}
		else
		{
			break;
 800116c:	bf00      	nop
		}
	}

	*argc = argc_temp;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	7dfa      	ldrb	r2, [r7, #23]
 8001172:	701a      	strb	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <CLI_Get_Argument_Length>:

uint8_t CLI_Get_Argument_Length(const char *arg)
{
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	uint8_t len = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
	while (((*arg) != 0x00) && ((*arg) != ' '))
 800118a:	e005      	b.n	8001198 <CLI_Get_Argument_Length+0x1a>
	{
		arg++;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3301      	adds	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
		len++;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	3301      	adds	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
	while (((*arg) != 0x00) && ((*arg) != ' '))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <CLI_Get_Argument_Length+0x2a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d1f1      	bne.n	800118c <CLI_Get_Argument_Length+0xe>
	}
	return len;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <print>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

void print(const char *fmt, ...);
void print(const char *fmt, ...)
{
 80011b4:	b40f      	push	{r0, r1, r2, r3}
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b0a0      	sub	sp, #128	; 0x80
 80011ba:	af00      	add	r7, sp, #0
	va_list argp;
	va_start(argp, fmt);
 80011bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c0:	67fb      	str	r3, [r7, #124]	; 0x7c

	char string[120];
	bzero(string, sizeof(string));
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	2378      	movs	r3, #120	; 0x78
 80011c8:	461a      	mov	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	f007 fe64 	bl	8008e98 <memset>

	if (0 < vsprintf(string, fmt, argp))
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80011d4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80011d8:	4618      	mov	r0, r3
 80011da:	f008 fd77 	bl	8009ccc <vsiprintf>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	dd0a      	ble.n	80011fa <print+0x46>
	{
		CDC_Transmit_FS((uint8_t*) string, strlen(string));
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7fe ffb2 	bl	8000150 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f007 fa3b 	bl	8008670 <CDC_Transmit_FS>
	}
	va_end(argp);
}
 80011fa:	bf00      	nop
 80011fc:	3780      	adds	r7, #128	; 0x80
 80011fe:	46bd      	mov	sp, r7
 8001200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001204:	b004      	add	sp, #16
 8001206:	4770      	bx	lr

08001208 <get_message_Callback>:

uint8_t flag_reciver;
uint8_t flag_start_spam;

static void get_message_Callback(uint8_t argc, const char *argv[])
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
	flag_reciver = 1;
 8001214:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <get_message_Callback+0xf0>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]

	if (scan_cmd(argv[1], "Hz"))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3304      	adds	r3, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4936      	ldr	r1, [pc, #216]	; (80012fc <get_message_Callback+0xf4>)
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe97 	bl	8000f56 <scan_cmd>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d011      	beq.n	8001252 <get_message_Callback+0x4a>
	{
		frequency = atof(argv[2]);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	3308      	adds	r3, #8
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f007 fdf9 	bl	8008e2c <atof>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fc1d 	bl	8000a80 <__aeabi_d2ulz>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	492d      	ldr	r1, [pc, #180]	; (8001300 <get_message_Callback+0xf8>)
 800124c:	e9c1 2300 	strd	r2, r3, [r1]
 8001250:	e040      	b.n	80012d4 <get_message_Callback+0xcc>
	}

	else if (scan_cmd(argv[1], "MHz"))
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3304      	adds	r3, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	492a      	ldr	r1, [pc, #168]	; (8001304 <get_message_Callback+0xfc>)
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe7b 	bl	8000f56 <scan_cmd>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d016      	beq.n	8001294 <get_message_Callback+0x8c>
	{
		frequency = atof(argv[2]) * 1000000;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3308      	adds	r3, #8
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f007 fddd 	bl	8008e2c <atof>
 8001272:	a31d      	add	r3, pc, #116	; (adr r3, 80012e8 <get_message_Callback+0xe0>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff f92e 	bl	80004d8 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fbfc 	bl	8000a80 <__aeabi_d2ulz>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	491c      	ldr	r1, [pc, #112]	; (8001300 <get_message_Callback+0xf8>)
 800128e:	e9c1 2300 	strd	r2, r3, [r1]
 8001292:	e01f      	b.n	80012d4 <get_message_Callback+0xcc>
	}

	else if (scan_cmd(argv[1], "GHz"))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	3304      	adds	r3, #4
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	491b      	ldr	r1, [pc, #108]	; (8001308 <get_message_Callback+0x100>)
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe5a 	bl	8000f56 <scan_cmd>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d015      	beq.n	80012d4 <get_message_Callback+0xcc>
	{
		frequency = atof(argv[2]) * 1000000000;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	3308      	adds	r3, #8
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 fdbc 	bl	8008e2c <atof>
 80012b4:	a30e      	add	r3, pc, #56	; (adr r3, 80012f0 <get_message_Callback+0xe8>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff f90d 	bl	80004d8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fbdb 	bl	8000a80 <__aeabi_d2ulz>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	490c      	ldr	r1, [pc, #48]	; (8001300 <get_message_Callback+0xf8>)
 80012d0:	e9c1 2300 	strd	r2, r3, [r1]
	}
	print("clock set %d", frequency);
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <get_message_Callback+0xf8>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <get_message_Callback+0x104>)
 80012dc:	f7ff ff6a 	bl	80011b4 <print>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	00000000 	.word	0x00000000
 80012ec:	412e8480 	.word	0x412e8480
 80012f0:	00000000 	.word	0x00000000
 80012f4:	41cdcd65 	.word	0x41cdcd65
 80012f8:	200005b8 	.word	0x200005b8
 80012fc:	0800bf20 	.word	0x0800bf20
 8001300:	20000008 	.word	0x20000008
 8001304:	0800bf24 	.word	0x0800bf24
 8001308:	0800bf28 	.word	0x0800bf28
 800130c:	0800bf2c 	.word	0x0800bf2c

08001310 <range_spam_Callback>:
static void range_spam_Callback(uint8_t argc, const char *argv[])
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
	if (scan_cmd(argv[1], "1"))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	492a      	ldr	r1, [pc, #168]	; (80013cc <range_spam_Callback+0xbc>)
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe16 	bl	8000f56 <scan_cmd>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d03c      	beq.n	80013aa <range_spam_Callback+0x9a>
	{
		flag_start_spam = 1;
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <range_spam_Callback+0xc0>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]

		startFrequence = atof(argv[2]);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	3308      	adds	r3, #8
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f007 fd75 	bl	8008e2c <atof>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fb99 	bl	8000a80 <__aeabi_d2ulz>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4920      	ldr	r1, [pc, #128]	; (80013d4 <range_spam_Callback+0xc4>)
 8001354:	e9c1 2300 	strd	r2, r3, [r1]
		frequency = startFrequence;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <range_spam_Callback+0xc4>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	491e      	ldr	r1, [pc, #120]	; (80013d8 <range_spam_Callback+0xc8>)
 8001360:	e9c1 2300 	strd	r2, r3, [r1]

		step = atof(argv[3]);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	330c      	adds	r3, #12
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f007 fd5e 	bl	8008e2c <atof>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fb82 	bl	8000a80 <__aeabi_d2ulz>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4916      	ldr	r1, [pc, #88]	; (80013dc <range_spam_Callback+0xcc>)
 8001382:	e9c1 2300 	strd	r2, r3, [r1]

		end = atof(argv[4]);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	3310      	adds	r3, #16
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f007 fd4d 	bl	8008e2c <atof>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fb71 	bl	8000a80 <__aeabi_d2ulz>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	490f      	ldr	r1, [pc, #60]	; (80013e0 <range_spam_Callback+0xd0>)
 80013a4:	e9c1 2300 	strd	r2, r3, [r1]
	}
	else if (scan_cmd(argv[1], "0"))
	{
		flag_start_spam = 0;
	}
}
 80013a8:	e00c      	b.n	80013c4 <range_spam_Callback+0xb4>
	else if (scan_cmd(argv[1], "0"))
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	3304      	adds	r3, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <range_spam_Callback+0xd4>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fdcf 	bl	8000f56 <scan_cmd>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <range_spam_Callback+0xb4>
		flag_start_spam = 0;
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <range_spam_Callback+0xc0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	0800bf3c 	.word	0x0800bf3c
 80013d0:	200005c0 	.word	0x200005c0
 80013d4:	200005c8 	.word	0x200005c8
 80013d8:	20000008 	.word	0x20000008
 80013dc:	200005d8 	.word	0x200005d8
 80013e0:	200005d0 	.word	0x200005d0
 80013e4:	0800bf40 	.word	0x0800bf40

080013e8 <set_low_cs>:

static inline void set_low_cs()
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BR4;
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <set_low_cs+0x18>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <set_low_cs+0x18>)
 80013f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013f6:	6113      	str	r3, [r2, #16]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40010800 	.word	0x40010800

08001404 <set_high_cs>:
static inline void set_high_cs()
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BS4;
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <set_high_cs+0x18>)
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <set_high_cs+0x18>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6113      	str	r3, [r2, #16]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40010800 	.word	0x40010800

08001420 <send_message>:
{
	GPIOA->BSRR |= GPIO_BSRR_BS2;
}

static inline void send_message(uint8_t* data, uint8_t size)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi1, &data, size, 1000);
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	b29a      	uxth	r2, r3
 8001430:	1d39      	adds	r1, r7, #4
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <send_message+0x24>)
 8001438:	f003 f86c 	bl	8004514 <HAL_SPI_Transmit>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200005e0 	.word	0x200005e0

08001448 <main>:

int main(void)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af02      	add	r7, sp, #8
	flag_reciver = 0;
 800144e:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <main+0x13c>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	flag_start_spam = 0;
 8001454:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <main+0x140>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
	HAL_Init();
 800145a:	f000 fb41 	bl	8001ae0 <HAL_Init>
	SystemClock_Config();
 800145e:	f000 f8b7 	bl	80015d0 <SystemClock_Config>
	MX_GPIO_Init();
 8001462:	f000 f949 	bl	80016f8 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001466:	f000 f90f 	bl	8001688 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 800146a:	f007 f831 	bl	80084d0 <MX_USB_DEVICE_Init>


	adf4351_1 = malloc(sizeof(adf4351_1));
 800146e:	2004      	movs	r0, #4
 8001470:	f007 fd0a 	bl	8008e88 <malloc>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <main+0x144>)
 800147a:	601a      	str	r2, [r3, #0]
	memset(adf4351_1, 0, sizeof(adf4351_1));
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <main+0x144>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2204      	movs	r2, #4
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f007 fd07 	bl	8008e98 <memset>

	adf435x_init(adf4351_1, REF_CLK, (void*)set_low_cs, (void*)set_high_cs, (void*)send_message, (void*)HAL_Delay);
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <main+0x144>)
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	4b40      	ldr	r3, [pc, #256]	; (8001590 <main+0x148>)
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	4b40      	ldr	r3, [pc, #256]	; (8001594 <main+0x14c>)
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	4b40      	ldr	r3, [pc, #256]	; (8001598 <main+0x150>)
 8001498:	4a40      	ldr	r2, [pc, #256]	; (800159c <main+0x154>)
 800149a:	4941      	ldr	r1, [pc, #260]	; (80015a0 <main+0x158>)
 800149c:	f7ff fb0e 	bl	8000abc <adf435x_init>

	//adf4351_2 = adf435x_init(adf4351_2, REF_CLK, (void*)set_low_cs_2, (void*)set_high_cs_2, (void*)send_message, (void*)HAL_Delay);


	prepare_registers(adf4351_1, FREQ);
 80014a0:	4b3a      	ldr	r3, [pc, #232]	; (800158c <main+0x144>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	493f      	ldr	r1, [pc, #252]	; (80015a4 <main+0x15c>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fbd6 	bl	8000c58 <prepare_registers>
	update_all_register(adf4351_1);
 80014ac:	4b37      	ldr	r3, [pc, #220]	; (800158c <main+0x144>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd37 	bl	8000f24 <update_all_register>

	//prepare_registers(adf4351_2, frequency);
	//update_all_register(adf4351_2);

	cli_init();
 80014b6:	f7ff fd67 	bl	8000f88 <cli_init>
	registration("clock", "", (void*) get_message_Callback);
 80014ba:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <main+0x160>)
 80014bc:	493b      	ldr	r1, [pc, #236]	; (80015ac <main+0x164>)
 80014be:	483c      	ldr	r0, [pc, #240]	; (80015b0 <main+0x168>)
 80014c0:	f7ff fd74 	bl	8000fac <registration>
	registration("start_spam", "", (void*) range_spam_Callback);
 80014c4:	4a3b      	ldr	r2, [pc, #236]	; (80015b4 <main+0x16c>)
 80014c6:	4939      	ldr	r1, [pc, #228]	; (80015ac <main+0x164>)
 80014c8:	483b      	ldr	r0, [pc, #236]	; (80015b8 <main+0x170>)
 80014ca:	f7ff fd6f 	bl	8000fac <registration>

	while (1)
	{
		if (flag_reciver)
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <main+0x13c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d010      	beq.n	80014f8 <main+0xb0>
		{
			flag_reciver = 0;
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <main+0x13c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
			prepare_registers(adf4351_1, frequency);
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <main+0x144>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <main+0x174>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	4613      	mov	r3, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fbb5 	bl	8000c58 <prepare_registers>
			update_all_register(adf4351_1);
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <main+0x144>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fd16 	bl	8000f24 <update_all_register>
		}

		if (flag_start_spam)
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <main+0x140>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d02d      	beq.n	800155c <main+0x114>
		{
			frequency += step;
 8001500:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <main+0x174>)
 8001502:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <main+0x178>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	1884      	adds	r4, r0, r2
 800150e:	eb41 0503 	adc.w	r5, r1, r3
 8001512:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <main+0x174>)
 8001514:	e9c3 4500 	strd	r4, r5, [r3]

			if (frequency >= end)
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <main+0x174>)
 800151a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <main+0x17c>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	4299      	cmp	r1, r3
 8001526:	bf08      	it	eq
 8001528:	4290      	cmpeq	r0, r2
 800152a:	d305      	bcc.n	8001538 <main+0xf0>
			{
				frequency = startFrequence;
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <main+0x180>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	4922      	ldr	r1, [pc, #136]	; (80015bc <main+0x174>)
 8001534:	e9c1 2300 	strd	r2, r3, [r1]
			}
			prepare_registers(adf4351_1, frequency);
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <main+0x144>)
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <main+0x174>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	4613      	mov	r3, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fb87 	bl	8000c58 <prepare_registers>
			update_all_register(adf4351_1);
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <main+0x144>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fce8 	bl	8000f24 <update_all_register>
			HAL_Delay(200);
 8001554:	20c8      	movs	r0, #200	; 0xc8
 8001556:	f000 fb25 	bl	8001ba4 <HAL_Delay>
 800155a:	e7b8      	b.n	80014ce <main+0x86>
		}
		else
		{
            GPIOC->BSRR |= GPIO_BSRR_BS13;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <main+0x184>)
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <main+0x184>)
 8001562:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001566:	6113      	str	r3, [r2, #16]
			HAL_Delay(100);
 8001568:	2064      	movs	r0, #100	; 0x64
 800156a:	f000 fb1b 	bl	8001ba4 <HAL_Delay>
			GPIOC->BSRR |= GPIO_BSRR_BR13;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <main+0x184>)
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	4a16      	ldr	r2, [pc, #88]	; (80015cc <main+0x184>)
 8001574:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001578:	6113      	str	r3, [r2, #16]
			HAL_Delay(500);
 800157a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157e:	f000 fb11 	bl	8001ba4 <HAL_Delay>
		if (flag_reciver)
 8001582:	e7a4      	b.n	80014ce <main+0x86>
 8001584:	200005b8 	.word	0x200005b8
 8001588:	200005c0 	.word	0x200005c0
 800158c:	200005bc 	.word	0x200005bc
 8001590:	08001ba5 	.word	0x08001ba5
 8001594:	08001421 	.word	0x08001421
 8001598:	08001405 	.word	0x08001405
 800159c:	080013e9 	.word	0x080013e9
 80015a0:	02faf080 	.word	0x02faf080
 80015a4:	8fc43300 	.word	0x8fc43300
 80015a8:	08001209 	.word	0x08001209
 80015ac:	0800bf44 	.word	0x0800bf44
 80015b0:	0800bf48 	.word	0x0800bf48
 80015b4:	08001311 	.word	0x08001311
 80015b8:	0800bf50 	.word	0x0800bf50
 80015bc:	20000008 	.word	0x20000008
 80015c0:	200005d8 	.word	0x200005d8
 80015c4:	200005d0 	.word	0x200005d0
 80015c8:	200005c8 	.word	0x200005c8
 80015cc:	40011000 	.word	0x40011000

080015d0 <SystemClock_Config>:
  }
}
*/

void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80015d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015da:	2228      	movs	r2, #40	; 0x28
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f007 fc5a 	bl	8008e98 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
	{ 0 };

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001600:	2301      	movs	r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160e:	2301      	movs	r3, #1
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800161c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001620:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fa50 	bl	8003acc <HAL_RCC_OscConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001632:	f000 f8c1 	bl	80017b8 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001636:	230f      	movs	r3, #15
 8001638:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001646:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2101      	movs	r1, #1
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fcba 	bl	8003fcc <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x92>
	{
		Error_Handler();
 800165e:	f000 f8ab 	bl	80017b8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001662:	2310      	movs	r3, #16
 8001664:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800166a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fe16 	bl	80042a0 <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0xae>
	{
		Error_Handler();
 800167a:	f000 f89d 	bl	80017b8 <Error_Handler>
	}
}
 800167e:	bf00      	nop
 8001680:	3750      	adds	r7, #80	; 0x50
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_SPI1_Init+0x68>)
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <MX_SPI1_Init+0x6c>)
 8001690:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_SPI1_Init+0x68>)
 8001694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001698:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_SPI1_Init+0x68>)
 800169c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a0:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ba:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016d6:	220a      	movs	r2, #10
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016dc:	f002 fe96 	bl	800440c <HAL_SPI_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_SPI1_Init+0x62>
	{
		Error_Handler();
 80016e6:	f000 f867 	bl	80017b8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200005e0 	.word	0x200005e0
 80016f4:	40013000 	.word	0x40013000

080016f8 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <MX_GPIO_Init+0xb4>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <MX_GPIO_Init+0xb4>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <MX_GPIO_Init+0xb4>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <MX_GPIO_Init+0xb4>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a20      	ldr	r2, [pc, #128]	; (80017ac <MX_GPIO_Init+0xb4>)
 800172a:	f043 0320 	orr.w	r3, r3, #32
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_GPIO_Init+0xb4>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_GPIO_Init+0xb4>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <MX_GPIO_Init+0xb4>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_GPIO_Init+0xb4>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	4815      	ldr	r0, [pc, #84]	; (80017b0 <MX_GPIO_Init+0xb8>)
 800175c:	f000 fcd8 	bl	8002110 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2110      	movs	r1, #16
 8001764:	4813      	ldr	r0, [pc, #76]	; (80017b4 <MX_GPIO_Init+0xbc>)
 8001766:	f000 fcd3 	bl	8002110 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800176a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2302      	movs	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	480b      	ldr	r0, [pc, #44]	; (80017b0 <MX_GPIO_Init+0xb8>)
 8001784:	f000 fb40 	bl	8001e08 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001788:	2310      	movs	r3, #16
 800178a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2302      	movs	r3, #2
 8001796:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4619      	mov	r1, r3
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_GPIO_Init+0xbc>)
 80017a0:	f000 fb32 	bl	8001e08 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 80017a4:	bf00      	nop
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40010800 	.word	0x40010800

080017b8 <Error_Handler>:
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017c0:	e7fe      	b.n	80017c0 <Error_Handler+0x8>
	...

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_MspInit+0x5c>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_MspInit+0x5c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6193      	str	r3, [r2, #24]
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_MspInit+0x5c>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_MspInit+0x5c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_MspInit+0x5c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_MspInit+0x5c>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_MspInit+0x60>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_MspInit+0x60>)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000

08001828 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a15      	ldr	r2, [pc, #84]	; (8001898 <HAL_SPI_MspInit+0x70>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d123      	bne.n	8001890 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_SPI_MspInit+0x74>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a13      	ldr	r2, [pc, #76]	; (800189c <HAL_SPI_MspInit+0x74>)
 800184e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_SPI_MspInit+0x74>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_SPI_MspInit+0x74>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_SPI_MspInit+0x74>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_SPI_MspInit+0x74>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001878:	23a0      	movs	r3, #160	; 0xa0
 800187a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_SPI_MspInit+0x78>)
 800188c:	f000 fabc 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40013000 	.word	0x40013000
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010800 	.word	0x40010800

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f93f 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018fa:	f000 fd52 	bl	80023a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000d58 	.word	0x20000d58

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <_kill>:

int _kill(int pid, int sig)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001920:	f007 fa88 	bl	8008e34 <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	2216      	movs	r2, #22
 8001928:	601a      	str	r2, [r3, #0]
	return -1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_exit>:

void _exit (int status)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800193e:	f04f 31ff 	mov.w	r1, #4294967295
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffe7 	bl	8001916 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001948:	e7fe      	b.n	8001948 <_exit+0x12>

0800194a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e00a      	b.n	8001972 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800195c:	f3af 8000 	nop.w
 8001960:	4601      	mov	r1, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	60ba      	str	r2, [r7, #8]
 8001968:	b2ca      	uxtb	r2, r1
 800196a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbf0      	blt.n	800195c <_read+0x12>
	}

return len;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e009      	b.n	80019aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	60ba      	str	r2, [r7, #8]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf1      	blt.n	8001996 <_write+0x12>
	}
	return len;
 80019b2:	687b      	ldr	r3, [r7, #4]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_close>:

int _close(int file)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e2:	605a      	str	r2, [r3, #4]
	return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <_isatty>:

int _isatty(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f007 f9f2 	bl	8008e34 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20005000 	.word	0x20005000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	20000384 	.word	0x20000384
 8001a84:	20001058 	.word	0x20001058

08001a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	; (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aba:	f7ff ffe5 	bl	8001a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f007 f9bf 	bl	8008e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ac2:	f7ff fcc1 	bl	8001448 <main>
  bx lr
 8001ac6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8001ad0:	0800c404 	.word	0x0800c404
  ldr r2, =_sbss
 8001ad4:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8001ad8:	20001054 	.word	0x20001054

08001adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC1_2_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_Init+0x28>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_Init+0x28>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f000 f947 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af6:	200f      	movs	r0, #15
 8001af8:	f000 f808 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001afc:	f7ff fe62 	bl	80017c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40022000 	.word	0x40022000

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x54>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x58>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f95f 	bl	8001dee <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f000 f927 	bl	8001d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_InitTick+0x5c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000010 	.word	0x20000010
 8001b64:	20000018 	.word	0x20000018
 8001b68:	20000014 	.word	0x20000014

08001b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x1c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_IncTick+0x20>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <HAL_IncTick+0x20>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000018 	.word	0x20000018
 8001b8c:	20000638 	.word	0x20000638

08001b90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <HAL_GetTick+0x10>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000638 	.word	0x20000638

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffe0 	bl	8001b90 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000018 	.word	0x20000018

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4906      	ldr	r1, [pc, #24]	; (8001c84 <__NVIC_EnableIRQ+0x34>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f7ff ff90 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff2d 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff42 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff90 	bl	8001cdc <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5f 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff35 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffa2 	bl	8001d40 <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b08b      	sub	sp, #44	; 0x2c
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	e169      	b.n	80020f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 8158 	bne.w	80020ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a9a      	ldr	r2, [pc, #616]	; (80020a8 <HAL_GPIO_Init+0x2a0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d05e      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e44:	4a98      	ldr	r2, [pc, #608]	; (80020a8 <HAL_GPIO_Init+0x2a0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d875      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e4a:	4a98      	ldr	r2, [pc, #608]	; (80020ac <HAL_GPIO_Init+0x2a4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d058      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e50:	4a96      	ldr	r2, [pc, #600]	; (80020ac <HAL_GPIO_Init+0x2a4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d86f      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e56:	4a96      	ldr	r2, [pc, #600]	; (80020b0 <HAL_GPIO_Init+0x2a8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d052      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e5c:	4a94      	ldr	r2, [pc, #592]	; (80020b0 <HAL_GPIO_Init+0x2a8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d869      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e62:	4a94      	ldr	r2, [pc, #592]	; (80020b4 <HAL_GPIO_Init+0x2ac>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d04c      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e68:	4a92      	ldr	r2, [pc, #584]	; (80020b4 <HAL_GPIO_Init+0x2ac>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d863      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a92      	ldr	r2, [pc, #584]	; (80020b8 <HAL_GPIO_Init+0x2b0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d046      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e74:	4a90      	ldr	r2, [pc, #576]	; (80020b8 <HAL_GPIO_Init+0x2b0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d85d      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	d82a      	bhi.n	8001ed4 <HAL_GPIO_Init+0xcc>
 8001e7e:	2b12      	cmp	r3, #18
 8001e80:	d859      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <HAL_GPIO_Init+0x80>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001f03 	.word	0x08001f03
 8001e8c:	08001edd 	.word	0x08001edd
 8001e90:	08001eef 	.word	0x08001eef
 8001e94:	08001f31 	.word	0x08001f31
 8001e98:	08001f37 	.word	0x08001f37
 8001e9c:	08001f37 	.word	0x08001f37
 8001ea0:	08001f37 	.word	0x08001f37
 8001ea4:	08001f37 	.word	0x08001f37
 8001ea8:	08001f37 	.word	0x08001f37
 8001eac:	08001f37 	.word	0x08001f37
 8001eb0:	08001f37 	.word	0x08001f37
 8001eb4:	08001f37 	.word	0x08001f37
 8001eb8:	08001f37 	.word	0x08001f37
 8001ebc:	08001f37 	.word	0x08001f37
 8001ec0:	08001f37 	.word	0x08001f37
 8001ec4:	08001f37 	.word	0x08001f37
 8001ec8:	08001f37 	.word	0x08001f37
 8001ecc:	08001ee5 	.word	0x08001ee5
 8001ed0:	08001ef9 	.word	0x08001ef9
 8001ed4:	4a79      	ldr	r2, [pc, #484]	; (80020bc <HAL_GPIO_Init+0x2b4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eda:	e02c      	b.n	8001f36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	623b      	str	r3, [r7, #32]
          break;
 8001ee2:	e029      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	623b      	str	r3, [r7, #32]
          break;
 8001eec:	e024      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e01f      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	330c      	adds	r3, #12
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e01a      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e013      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d105      	bne.n	8001f24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	611a      	str	r2, [r3, #16]
          break;
 8001f22:	e009      	b.n	8001f38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	615a      	str	r2, [r3, #20]
          break;
 8001f2e:	e003      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
          break;
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          break;
 8001f36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2bff      	cmp	r3, #255	; 0xff
 8001f3c:	d801      	bhi.n	8001f42 <HAL_GPIO_Init+0x13a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	e001      	b.n	8001f46 <HAL_GPIO_Init+0x13e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3304      	adds	r3, #4
 8001f46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2bff      	cmp	r3, #255	; 0xff
 8001f4c:	d802      	bhi.n	8001f54 <HAL_GPIO_Init+0x14c>
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	e002      	b.n	8001f5a <HAL_GPIO_Init+0x152>
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	3b08      	subs	r3, #8
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	210f      	movs	r1, #15
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	6a39      	ldr	r1, [r7, #32]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80b1 	beq.w	80020ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f88:	4b4d      	ldr	r3, [pc, #308]	; (80020c0 <HAL_GPIO_Init+0x2b8>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a4c      	ldr	r2, [pc, #304]	; (80020c0 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <HAL_GPIO_Init+0x2b8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa0:	4a48      	ldr	r2, [pc, #288]	; (80020c4 <HAL_GPIO_Init+0x2bc>)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a40      	ldr	r2, [pc, #256]	; (80020c8 <HAL_GPIO_Init+0x2c0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_GPIO_Init+0x1ec>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3f      	ldr	r2, [pc, #252]	; (80020cc <HAL_GPIO_Init+0x2c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_GPIO_Init+0x1e8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3e      	ldr	r2, [pc, #248]	; (80020d0 <HAL_GPIO_Init+0x2c8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <HAL_GPIO_Init+0x1e4>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3d      	ldr	r2, [pc, #244]	; (80020d4 <HAL_GPIO_Init+0x2cc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_GPIO_Init+0x1e0>
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e006      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e004      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff8:	f002 0203 	and.w	r2, r2, #3
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	4093      	lsls	r3, r2
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002006:	492f      	ldr	r1, [pc, #188]	; (80020c4 <HAL_GPIO_Init+0x2bc>)
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	492c      	ldr	r1, [pc, #176]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	4928      	ldr	r1, [pc, #160]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002038:	4013      	ands	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	491e      	ldr	r1, [pc, #120]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002060:	4013      	ands	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4918      	ldr	r1, [pc, #96]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	43db      	mvns	r3, r3
 8002086:	4914      	ldr	r1, [pc, #80]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002088:	4013      	ands	r3, r2
 800208a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d021      	beq.n	80020dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	490e      	ldr	r1, [pc, #56]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
 80020a4:	e021      	b.n	80020ea <HAL_GPIO_Init+0x2e2>
 80020a6:	bf00      	nop
 80020a8:	10320000 	.word	0x10320000
 80020ac:	10310000 	.word	0x10310000
 80020b0:	10220000 	.word	0x10220000
 80020b4:	10210000 	.word	0x10210000
 80020b8:	10120000 	.word	0x10120000
 80020bc:	10110000 	.word	0x10110000
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40010800 	.word	0x40010800
 80020cc:	40010c00 	.word	0x40010c00
 80020d0:	40011000 	.word	0x40011000
 80020d4:	40011400 	.word	0x40011400
 80020d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_GPIO_Init+0x304>)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	4909      	ldr	r1, [pc, #36]	; (800210c <HAL_GPIO_Init+0x304>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	fa22 f303 	lsr.w	r3, r2, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f47f ae8e 	bne.w	8001e1c <HAL_GPIO_Init+0x14>
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	372c      	adds	r7, #44	; 0x2c
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
 800211c:	4613      	mov	r3, r2
 800211e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800212c:	e003      	b.n	8002136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800212e:	887b      	ldrh	r3, [r7, #2]
 8002130:	041a      	lsls	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	b08b      	sub	sp, #44	; 0x2c
 8002144:	af06      	add	r7, sp, #24
 8002146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0fd      	b.n	800234e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f006 fbb6 	bl	80088d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2203      	movs	r2, #3
 8002170:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f002 fbd3 	bl	8004924 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	687e      	ldr	r6, [r7, #4]
 8002186:	466d      	mov	r5, sp
 8002188:	f106 0410 	add.w	r4, r6, #16
 800218c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800218e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	602b      	str	r3, [r5, #0]
 8002194:	1d33      	adds	r3, r6, #4
 8002196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f002 fb9d 	bl	80048d8 <USB_CoreInit>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0ce      	b.n	800234e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 fbce 	bl	8004958 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e04c      	b.n	800225c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	3301      	adds	r3, #1
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	b298      	uxth	r0, r3
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	3336      	adds	r3, #54	; 0x36
 8002200:	4602      	mov	r2, r0
 8002202:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	3303      	adds	r3, #3
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	3338      	adds	r3, #56	; 0x38
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	333c      	adds	r3, #60	; 0x3c
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	3340      	adds	r3, #64	; 0x40
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	3301      	adds	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	429a      	cmp	r2, r3
 8002264:	d3ad      	bcc.n	80021c2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	e044      	b.n	80022f6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	3301      	adds	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d3b5      	bcc.n	800226c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	687e      	ldr	r6, [r7, #4]
 8002308:	466d      	mov	r5, sp
 800230a:	f106 0410 	add.w	r4, r6, #16
 800230e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	602b      	str	r3, [r5, #0]
 8002316:	1d33      	adds	r3, r6, #4
 8002318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f002 fb28 	bl	8004970 <USB_DevInit>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00d      	b.n	800234e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f004 fc99 	bl	8006c7e <USB_DevDisconnect>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002356 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_PCD_Start+0x16>
 8002368:	2302      	movs	r3, #2
 800236a:	e016      	b.n	800239a <HAL_PCD_Start+0x44>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f002 fabd 	bl	80048f8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800237e:	2101      	movs	r1, #1
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f006 fd1c 	bl	8008dbe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f004 fc6d 	bl	8006c6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b088      	sub	sp, #32
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f004 fc6f 	bl	8006c92 <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023be:	d102      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fb61 	bl	8002a88 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fc61 	bl	8006c92 <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023da:	d112      	bne.n	8002402 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	b292      	uxth	r2, r2
 80023f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f006 faea 	bl	80089ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023fa:	2100      	movs	r1, #0
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f925 	bl	800264c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f004 fc43 	bl	8006c92 <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002416:	d10b      	bne.n	8002430 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800242a:	b292      	uxth	r2, r2
 800242c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f004 fc2c 	bl	8006c92 <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002444:	d10b      	bne.n	800245e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002458:	b292      	uxth	r2, r2
 800245a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f004 fc15 	bl	8006c92 <USB_ReadInterrupts>
 8002468:	4603      	mov	r3, r0
 800246a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002472:	d126      	bne.n	80024c2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800247c:	b29a      	uxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0204 	bic.w	r2, r2, #4
 8002486:	b292      	uxth	r2, r2
 8002488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002494:	b29a      	uxth	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0208 	bic.w	r2, r2, #8
 800249e:	b292      	uxth	r2, r2
 80024a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f006 facb 	bl	8008a40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024bc:	b292      	uxth	r2, r2
 80024be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 fbe3 	bl	8006c92 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024d6:	f040 8084 	bne.w	80025e2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80024da:	2300      	movs	r3, #0
 80024dc:	77fb      	strb	r3, [r7, #31]
 80024de:	e011      	b.n	8002504 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	7ffb      	ldrb	r3, [r7, #31]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	441a      	add	r2, r3
 80024ec:	7ffb      	ldrb	r3, [r7, #31]
 80024ee:	8812      	ldrh	r2, [r2, #0]
 80024f0:	b292      	uxth	r2, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	f107 0120 	add.w	r1, r7, #32
 80024f8:	440b      	add	r3, r1
 80024fa:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80024fe:	7ffb      	ldrb	r3, [r7, #31]
 8002500:	3301      	adds	r3, #1
 8002502:	77fb      	strb	r3, [r7, #31]
 8002504:	7ffb      	ldrb	r3, [r7, #31]
 8002506:	2b07      	cmp	r3, #7
 8002508:	d9ea      	bls.n	80024e0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	b292      	uxth	r2, r2
 800251e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	b292      	uxth	r2, r2
 8002536:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800253a:	bf00      	nop
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002544:	b29b      	uxth	r3, r3
 8002546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f6      	beq.n	800253c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002556:	b29a      	uxth	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	b292      	uxth	r2, r2
 8002562:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002566:	2300      	movs	r3, #0
 8002568:	77fb      	strb	r3, [r7, #31]
 800256a:	e010      	b.n	800258e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800256c:	7ffb      	ldrb	r3, [r7, #31]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	4611      	mov	r1, r2
 8002574:	7ffa      	ldrb	r2, [r7, #31]
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	440a      	add	r2, r1
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	f107 0120 	add.w	r1, r7, #32
 8002580:	440b      	add	r3, r1
 8002582:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002586:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002588:	7ffb      	ldrb	r3, [r7, #31]
 800258a:	3301      	adds	r3, #1
 800258c:	77fb      	strb	r3, [r7, #31]
 800258e:	7ffb      	ldrb	r3, [r7, #31]
 8002590:	2b07      	cmp	r3, #7
 8002592:	d9eb      	bls.n	800256c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0208 	orr.w	r2, r2, #8
 80025a6:	b292      	uxth	r2, r2
 80025a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025be:	b292      	uxth	r2, r2
 80025c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0204 	orr.w	r2, r2, #4
 80025d6:	b292      	uxth	r2, r2
 80025d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f006 fa15 	bl	8008a0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 fb53 	bl	8006c92 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f6:	d10e      	bne.n	8002616 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800260a:	b292      	uxth	r2, r2
 800260c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f006 f9ce 	bl	80089b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f004 fb39 	bl	8006c92 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262a:	d10b      	bne.n	8002644 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800263e:	b292      	uxth	r2, r2
 8002640:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002644:	bf00      	nop
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_PCD_SetAddress+0x1a>
 8002662:	2302      	movs	r3, #2
 8002664:	e013      	b.n	800268e <HAL_PCD_SetAddress+0x42>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f004 fae0 	bl	8006c44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	4608      	mov	r0, r1
 80026a0:	4611      	mov	r1, r2
 80026a2:	461a      	mov	r2, r3
 80026a4:	4603      	mov	r3, r0
 80026a6:	70fb      	strb	r3, [r7, #3]
 80026a8:	460b      	mov	r3, r1
 80026aa:	803b      	strh	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da0e      	bge.n	80026da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	705a      	strb	r2, [r3, #1]
 80026d8:	e00e      	b.n	80026f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	f003 0207 	and.w	r2, r3, #7
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002704:	883a      	ldrh	r2, [r7, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	78ba      	ldrb	r2, [r7, #2]
 800270e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002722:	78bb      	ldrb	r3, [r7, #2]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d102      	bne.n	800272e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_PCD_EP_Open+0xa6>
 8002738:	2302      	movs	r3, #2
 800273a:	e00e      	b.n	800275a <HAL_PCD_EP_Open+0xc4>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68f9      	ldr	r1, [r7, #12]
 800274a:	4618      	mov	r0, r3
 800274c:	f002 f930 	bl	80049b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002758:	7afb      	ldrb	r3, [r7, #11]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800276e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002772:	2b00      	cmp	r3, #0
 8002774:	da0e      	bge.n	8002794 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	705a      	strb	r2, [r3, #1]
 8002792:	e00e      	b.n	80027b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 0207 	and.w	r2, r3, #7
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_PCD_EP_Close+0x6a>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e00e      	b.n	80027ea <HAL_PCD_EP_Close+0x88>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fc52 	bl	8005084 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	460b      	mov	r3, r1
 8002800:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	f003 0207 	and.w	r2, r3, #7
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2200      	movs	r2, #0
 8002830:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002832:	7afb      	ldrb	r3, [r7, #11]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	b2da      	uxtb	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800283e:	7afb      	ldrb	r3, [r7, #11]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6979      	ldr	r1, [r7, #20]
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fe04 	bl	800545c <USB_EPStartXfer>
 8002854:	e005      	b.n	8002862 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6979      	ldr	r1, [r7, #20]
 800285c:	4618      	mov	r0, r3
 800285e:	f002 fdfd 	bl	800545c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	f003 0207 	and.w	r2, r3, #7
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	460b      	mov	r3, r1
 80028a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4413      	add	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2201      	movs	r2, #1
 80028e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028f2:	7afb      	ldrb	r3, [r7, #11]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d106      	bne.n	800290a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6979      	ldr	r1, [r7, #20]
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fdaa 	bl	800545c <USB_EPStartXfer>
 8002908:	e005      	b.n	8002916 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6979      	ldr	r1, [r7, #20]
 8002910:	4618      	mov	r0, r3
 8002912:	f002 fda3 	bl	800545c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 0207 	and.w	r2, r3, #7
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	d901      	bls.n	800293e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e04c      	b.n	80029d8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800293e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002942:	2b00      	cmp	r3, #0
 8002944:	da0e      	bge.n	8002964 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	705a      	strb	r2, [r3, #1]
 8002962:	e00c      	b.n	800297e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_PCD_EP_SetStall+0x7e>
 800299a:	2302      	movs	r3, #2
 800299c:	e01c      	b.n	80029d8 <HAL_PCD_EP_SetStall+0xb8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68f9      	ldr	r1, [r7, #12]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f004 f84c 	bl	8006a4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d108      	bne.n	80029ce <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f004 f971 	bl	8006cb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 020f 	and.w	r2, r3, #15
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d901      	bls.n	80029fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e040      	b.n	8002a80 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	da0e      	bge.n	8002a24 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	705a      	strb	r2, [r3, #1]
 8002a22:	e00e      	b.n	8002a42 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	f003 0207 	and.w	r2, r3, #7
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_PCD_EP_ClrStall+0x82>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e00e      	b.n	8002a80 <HAL_PCD_EP_ClrStall+0xa0>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68f9      	ldr	r1, [r7, #12]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 f83a 	bl	8006aea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	; 0x38
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a90:	e2ec      	b.n	800306c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a9a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002aa8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 8161 	bne.w	8002d74 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d152      	bne.n	8002b62 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002acc:	81fb      	strh	r3, [r7, #14]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	89fb      	ldrh	r3, [r7, #14]
 8002ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3328      	adds	r3, #40	; 0x28
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	3302      	adds	r3, #2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	441a      	add	r2, r3
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b20:	2100      	movs	r1, #0
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f005 ff2b 	bl	800897e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 829b 	beq.w	800306c <PCD_EP_ISR_Handler+0x5e4>
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 8296 	bne.w	800306c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b292      	uxth	r2, r2
 8002b54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b60:	e284      	b.n	800306c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d034      	beq.n	8002be6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3306      	adds	r3, #6
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f004 f8c8 	bl	8006d50 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bcc:	4013      	ands	r3, r2
 8002bce:	823b      	strh	r3, [r7, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	8a3a      	ldrh	r2, [r7, #16]
 8002bd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bda:	b292      	uxth	r2, r2
 8002bdc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f005 fea0 	bl	8008924 <HAL_PCD_SetupStageCallback>
 8002be4:	e242      	b.n	800306c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002be6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f280 823e 	bge.w	800306c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	83bb      	strh	r3, [r7, #28]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	8bba      	ldrh	r2, [r7, #28]
 8002c06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	3306      	adds	r3, #6
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <PCD_EP_ISR_Handler+0x1ee>
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d015      	beq.n	8002c76 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	6959      	ldr	r1, [r3, #20]
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f004 f878 	bl	8006d50 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	441a      	add	r2, r3
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c6e:	2100      	movs	r1, #0
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f005 fe69 	bl	8008948 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 81f2 	bne.w	800306c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d112      	bne.n	8002cd6 <PCD_EP_ISR_Handler+0x24e>
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	e02f      	b.n	8002d36 <PCD_EP_ISR_Handler+0x2ae>
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b3e      	cmp	r3, #62	; 0x3e
 8002cdc:	d813      	bhi.n	8002d06 <PCD_EP_ISR_Handler+0x27e>
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <PCD_EP_ISR_Handler+0x270>
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	029b      	lsls	r3, r3, #10
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	801a      	strh	r2, [r3, #0]
 8002d04:	e017      	b.n	8002d36 <PCD_EP_ISR_Handler+0x2ae>
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <PCD_EP_ISR_Handler+0x298>
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	029b      	lsls	r3, r3, #10
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	827b      	strh	r3, [r7, #18]
 8002d48:	8a7b      	ldrh	r3, [r7, #18]
 8002d4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d4e:	827b      	strh	r3, [r7, #18]
 8002d50:	8a7b      	ldrh	r3, [r7, #18]
 8002d52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d56:	827b      	strh	r3, [r7, #18]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	8a7b      	ldrh	r3, [r7, #18]
 8002d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	8013      	strh	r3, [r2, #0]
 8002d72:	e17b      	b.n	800306c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d86:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f280 80ea 	bge.w	8002f64 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002da6:	4013      	ands	r3, r2
 8002da8:	853b      	strh	r3, [r7, #40]	; 0x28
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002dc2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	7b1b      	ldrb	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d122      	bne.n	8002e26 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	3306      	adds	r3, #6
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e08:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002e0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8087 	beq.w	8002f20 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	6959      	ldr	r1, [r3, #20]
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	88da      	ldrh	r2, [r3, #6]
 8002e1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e20:	f003 ff96 	bl	8006d50 <USB_ReadPMA>
 8002e24:	e07c      	b.n	8002f20 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	78db      	ldrb	r3, [r3, #3]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d108      	bne.n	8002e40 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e30:	461a      	mov	r2, r3
 8002e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f927 	bl	8003088 <HAL_PCD_EP_DB_Receive>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e3e:	e06f      	b.n	8002f20 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d021      	beq.n	8002ede <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002ec4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d02a      	beq.n	8002f20 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	6959      	ldr	r1, [r3, #20]
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	891a      	ldrh	r2, [r3, #8]
 8002ed6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ed8:	f003 ff3a 	bl	8006d50 <USB_ReadPMA>
 8002edc:	e020      	b.n	8002f20 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3306      	adds	r3, #6
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f06:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	6959      	ldr	r1, [r3, #20]
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	895a      	ldrh	r2, [r3, #10]
 8002f1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f1c:	f003 ff18 	bl	8006d50 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f26:	441a      	add	r2, r3
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f32:	441a      	add	r2, r3
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <PCD_EP_ISR_Handler+0x4c2>
 8002f40:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d206      	bcs.n	8002f58 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f005 fcf9 	bl	8008948 <HAL_PCD_DataOutStageCallback>
 8002f56:	e005      	b.n	8002f64 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f002 fa7c 	bl	800545c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d07e      	beq.n	800306c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9c:	843b      	strh	r3, [r7, #32]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	441a      	add	r2, r3
 8002fac:	8c3b      	ldrh	r3, [r7, #32]
 8002fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	78db      	ldrb	r3, [r3, #3]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d00c      	beq.n	8002fdc <PCD_EP_ISR_Handler+0x554>
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	78db      	ldrb	r3, [r3, #3]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d146      	bne.n	8003060 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002fd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d141      	bne.n	8003060 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003004:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	8bfb      	ldrh	r3, [r7, #30]
 800300c:	429a      	cmp	r2, r3
 800300e:	d906      	bls.n	800301e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	699a      	ldr	r2, [r3, #24]
 8003014:	8bfb      	ldrh	r3, [r7, #30]
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	619a      	str	r2, [r3, #24]
 800301c:	e002      	b.n	8003024 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d106      	bne.n	800303a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f005 fca3 	bl	800897e <HAL_PCD_DataInStageCallback>
 8003038:	e018      	b.n	800306c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	8bfb      	ldrh	r3, [r7, #30]
 8003040:	441a      	add	r2, r3
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	8bfb      	ldrh	r3, [r7, #30]
 800304c:	441a      	add	r2, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003058:	4618      	mov	r0, r3
 800305a:	f002 f9ff 	bl	800545c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800305e:	e005      	b.n	800306c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003060:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003062:	461a      	mov	r2, r3
 8003064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f91b 	bl	80032a2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003074:	b29b      	uxth	r3, r3
 8003076:	b21b      	sxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f6ff ad0a 	blt.w	8002a92 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3738      	adds	r7, #56	; 0x38
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d07e      	beq.n	800319e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	3302      	adds	r3, #2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	8b7b      	ldrh	r3, [r7, #26]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d306      	bcc.n	80030e2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	8b7b      	ldrh	r3, [r7, #26]
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	619a      	str	r2, [r3, #24]
 80030e0:	e002      	b.n	80030e8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d123      	bne.n	8003138 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	833b      	strh	r3, [r7, #24]
 800310c:	8b3b      	ldrh	r3, [r7, #24]
 800310e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003112:	833b      	strh	r3, [r7, #24]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	441a      	add	r2, r3
 8003122:	8b3b      	ldrh	r3, [r7, #24]
 8003124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800312c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003134:	b29b      	uxth	r3, r3
 8003136:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01f      	beq.n	8003182 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315c:	82fb      	strh	r3, [r7, #22]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	441a      	add	r2, r3
 800316c:	8afb      	ldrh	r3, [r7, #22]
 800316e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800317e:	b29b      	uxth	r3, r3
 8003180:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003182:	8b7b      	ldrh	r3, [r7, #26]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8087 	beq.w	8003298 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	6959      	ldr	r1, [r3, #20]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	891a      	ldrh	r2, [r3, #8]
 8003196:	8b7b      	ldrh	r3, [r7, #26]
 8003198:	f003 fdda 	bl	8006d50 <USB_ReadPMA>
 800319c:	e07c      	b.n	8003298 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	3306      	adds	r3, #6
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	8b7b      	ldrh	r3, [r7, #26]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d306      	bcc.n	80031e0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	8b7b      	ldrh	r3, [r7, #26]
 80031d8:	1ad2      	subs	r2, r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	619a      	str	r2, [r3, #24]
 80031de:	e002      	b.n	80031e6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d123      	bne.n	8003236 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003208:	83fb      	strh	r3, [r7, #30]
 800320a:	8bfb      	ldrh	r3, [r7, #30]
 800320c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003210:	83fb      	strh	r3, [r7, #30]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	8bfb      	ldrh	r3, [r7, #30]
 8003222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800322a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	b29b      	uxth	r3, r3
 8003234:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11f      	bne.n	8003280 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	83bb      	strh	r3, [r7, #28]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	8bbb      	ldrh	r3, [r7, #28]
 800326c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800327c:	b29b      	uxth	r3, r3
 800327e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003280:	8b7b      	ldrh	r3, [r7, #26]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6959      	ldr	r1, [r3, #20]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	895a      	ldrh	r2, [r3, #10]
 8003292:	8b7b      	ldrh	r3, [r7, #26]
 8003294:	f003 fd5c 	bl	8006d50 <USB_ReadPMA>
    }
  }

  return count;
 8003298:	8b7b      	ldrh	r3, [r7, #26]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b0a2      	sub	sp, #136	; 0x88
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	4613      	mov	r3, r2
 80032ae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 81c7 	beq.w	800364a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	3302      	adds	r3, #2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d907      	bls.n	8003304 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032fc:	1ad2      	subs	r2, r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	619a      	str	r2, [r3, #24]
 8003302:	e002      	b.n	800330a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 80b9 	bne.w	8003486 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d126      	bne.n	800336a <HAL_PCD_EP_DB_Transmit+0xc8>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	4413      	add	r3, r2
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	011a      	lsls	r2, r3, #4
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	4413      	add	r3, r2
 800333e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800334e:	b29a      	uxth	r2, r3
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	801a      	strh	r2, [r3, #0]
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003362:	b29a      	uxth	r2, r3
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	e01a      	b.n	80033a0 <HAL_PCD_EP_DB_Transmit+0xfe>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d116      	bne.n	80033a0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	633b      	str	r3, [r7, #48]	; 0x30
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003380:	b29b      	uxth	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	4413      	add	r3, r2
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	011a      	lsls	r2, r3, #4
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	4413      	add	r3, r2
 8003394:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	2200      	movs	r2, #0
 800339e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d126      	bne.n	80033fc <HAL_PCD_EP_DB_Transmit+0x15a>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	4413      	add	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	011a      	lsls	r2, r3, #4
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4413      	add	r3, r2
 80033d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	e017      	b.n	800342c <HAL_PCD_EP_DB_Transmit+0x18a>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d113      	bne.n	800342c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340c:	b29b      	uxth	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	4413      	add	r3, r2
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	011a      	lsls	r2, r3, #4
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	4413      	add	r3, r2
 8003420:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2200      	movs	r2, #0
 800342a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f005 faa3 	bl	800897e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 82d4 	beq.w	80039ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	b29b      	uxth	r3, r3
 8003456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	827b      	strh	r3, [r7, #18]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	8a7b      	ldrh	r3, [r7, #18]
 8003470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003480:	b29b      	uxth	r3, r3
 8003482:	8013      	strh	r3, [r2, #0]
 8003484:	e2b2      	b.n	80039ec <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d021      	beq.n	80034d4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	441a      	add	r2, r3
 80034bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034da:	2b01      	cmp	r3, #1
 80034dc:	f040 8286 	bne.w	80039ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034e8:	441a      	add	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034f6:	441a      	add	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d309      	bcc.n	800351c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6a1a      	ldr	r2, [r3, #32]
 8003512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003514:	1ad2      	subs	r2, r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	621a      	str	r2, [r3, #32]
 800351a:	e015      	b.n	8003548 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003528:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003532:	e009      	b.n	8003548 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d155      	bne.n	80035fc <HAL_PCD_EP_DB_Transmit+0x35a>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800355e:	b29b      	uxth	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	4413      	add	r3, r2
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	011a      	lsls	r2, r3, #4
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	4413      	add	r3, r2
 8003572:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
 8003578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357a:	2b00      	cmp	r3, #0
 800357c:	d112      	bne.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x302>
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003588:	b29a      	uxth	r2, r3
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800359c:	b29a      	uxth	r2, r3
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	e047      	b.n	8003634 <HAL_PCD_EP_DB_Transmit+0x392>
 80035a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a6:	2b3e      	cmp	r3, #62	; 0x3e
 80035a8:	d811      	bhi.n	80035ce <HAL_PCD_EP_DB_Transmit+0x32c>
 80035aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_PCD_EP_DB_Transmit+0x31e>
 80035ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035bc:	3301      	adds	r3, #1
 80035be:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	029b      	lsls	r3, r3, #10
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	e032      	b.n	8003634 <HAL_PCD_EP_DB_Transmit+0x392>
 80035ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x342>
 80035de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e0:	3b01      	subs	r3, #1
 80035e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	029b      	lsls	r3, r3, #10
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	e01b      	b.n	8003634 <HAL_PCD_EP_DB_Transmit+0x392>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d117      	bne.n	8003634 <HAL_PCD_EP_DB_Transmit+0x392>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003612:	b29b      	uxth	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003618:	4413      	add	r3, r2
 800361a:	643b      	str	r3, [r7, #64]	; 0x40
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	011a      	lsls	r2, r3, #4
 8003622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003624:	4413      	add	r3, r2
 8003626:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800362c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362e:	b29a      	uxth	r2, r3
 8003630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003632:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6959      	ldr	r1, [r3, #20]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	891a      	ldrh	r2, [r3, #8]
 8003640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003642:	b29b      	uxth	r3, r3
 8003644:	f003 fb3f 	bl	8006cc6 <USB_WritePMA>
 8003648:	e1d0      	b.n	80039ec <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003652:	b29b      	uxth	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	3306      	adds	r3, #6
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800367e:	429a      	cmp	r2, r3
 8003680:	d307      	bcc.n	8003692 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800368a:	1ad2      	subs	r2, r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	619a      	str	r2, [r3, #24]
 8003690:	e002      	b.n	8003698 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2200      	movs	r2, #0
 8003696:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f040 80c4 	bne.w	800382a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d126      	bne.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x456>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036be:	4413      	add	r3, r2
 80036c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	011a      	lsls	r2, r3, #4
 80036c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ca:	4413      	add	r3, r2
 80036cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80036d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	e01a      	b.n	800372e <HAL_PCD_EP_DB_Transmit+0x48c>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d116      	bne.n	800372e <HAL_PCD_EP_DB_Transmit+0x48c>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	677b      	str	r3, [r7, #116]	; 0x74
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800370e:	b29b      	uxth	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003714:	4413      	add	r3, r2
 8003716:	677b      	str	r3, [r7, #116]	; 0x74
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	011a      	lsls	r2, r3, #4
 800371e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003720:	4413      	add	r3, r2
 8003722:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003726:	673b      	str	r3, [r7, #112]	; 0x70
 8003728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800372a:	2200      	movs	r2, #0
 800372c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	67bb      	str	r3, [r7, #120]	; 0x78
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d12f      	bne.n	800379c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374c:	b29b      	uxth	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003754:	4413      	add	r3, r2
 8003756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	011a      	lsls	r2, r3, #4
 8003760:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003764:	4413      	add	r3, r2
 8003766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800376a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800376e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800377a:	b29a      	uxth	r2, r3
 800377c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003780:	801a      	strh	r2, [r3, #0]
 8003782:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	b29b      	uxth	r3, r3
 800378a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800378e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003792:	b29a      	uxth	r2, r3
 8003794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	e017      	b.n	80037cc <HAL_PCD_EP_DB_Transmit+0x52a>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d113      	bne.n	80037cc <HAL_PCD_EP_DB_Transmit+0x52a>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b2:	4413      	add	r3, r2
 80037b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	011a      	lsls	r2, r3, #4
 80037bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037be:	4413      	add	r3, r2
 80037c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037c8:	2200      	movs	r2, #0
 80037ca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4619      	mov	r1, r3
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f005 f8d3 	bl	800897e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 8104 	bne.w	80039ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	441a      	add	r2, r3
 8003810:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800381c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003824:	b29b      	uxth	r3, r3
 8003826:	8013      	strh	r3, [r2, #0]
 8003828:	e0e0      	b.n	80039ec <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d121      	bne.n	8003878 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	441a      	add	r2, r3
 8003860:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800386c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003874:	b29b      	uxth	r3, r3
 8003876:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800387e:	2b01      	cmp	r3, #1
 8003880:	f040 80b4 	bne.w	80039ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800388c:	441a      	add	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800389a:	441a      	add	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d309      	bcc.n	80038c0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6a1a      	ldr	r2, [r3, #32]
 80038b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	621a      	str	r2, [r3, #32]
 80038be:	e015      	b.n	80038ec <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80038c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038d6:	e009      	b.n	80038ec <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2200      	movs	r2, #0
 80038e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	667b      	str	r3, [r7, #100]	; 0x64
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d155      	bne.n	80039a6 <HAL_PCD_EP_DB_Transmit+0x704>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003908:	b29b      	uxth	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390e:	4413      	add	r3, r2
 8003910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	011a      	lsls	r2, r3, #4
 8003918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391a:	4413      	add	r3, r2
 800391c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003920:	65bb      	str	r3, [r7, #88]	; 0x58
 8003922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003924:	2b00      	cmp	r3, #0
 8003926:	d112      	bne.n	800394e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003932:	b29a      	uxth	r2, r3
 8003934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003946:	b29a      	uxth	r2, r3
 8003948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800394a:	801a      	strh	r2, [r3, #0]
 800394c:	e044      	b.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x736>
 800394e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003950:	2b3e      	cmp	r3, #62	; 0x3e
 8003952:	d811      	bhi.n	8003978 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	657b      	str	r3, [r7, #84]	; 0x54
 800395a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003966:	3301      	adds	r3, #1
 8003968:	657b      	str	r3, [r7, #84]	; 0x54
 800396a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396c:	b29b      	uxth	r3, r3
 800396e:	029b      	lsls	r3, r3, #10
 8003970:	b29a      	uxth	r2, r3
 8003972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003974:	801a      	strh	r2, [r3, #0]
 8003976:	e02f      	b.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x736>
 8003978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	657b      	str	r3, [r7, #84]	; 0x54
 800397e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398a:	3b01      	subs	r3, #1
 800398c:	657b      	str	r3, [r7, #84]	; 0x54
 800398e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003990:	b29b      	uxth	r3, r3
 8003992:	029b      	lsls	r3, r3, #10
 8003994:	b29b      	uxth	r3, r3
 8003996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800399a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800399e:	b29a      	uxth	r2, r3
 80039a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a2:	801a      	strh	r2, [r3, #0]
 80039a4:	e018      	b.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x736>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	785b      	ldrb	r3, [r3, #1]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d114      	bne.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x736>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039bc:	4413      	add	r3, r2
 80039be:	667b      	str	r3, [r7, #100]	; 0x64
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	011a      	lsls	r2, r3, #4
 80039c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c8:	4413      	add	r3, r2
 80039ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039ce:	663b      	str	r3, [r7, #96]	; 0x60
 80039d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	6959      	ldr	r1, [r3, #20]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	895a      	ldrh	r2, [r3, #10]
 80039e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f003 f96d 	bl	8006cc6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a06:	823b      	strh	r3, [r7, #16]
 8003a08:	8a3b      	ldrh	r3, [r7, #16]
 8003a0a:	f083 0310 	eor.w	r3, r3, #16
 8003a0e:	823b      	strh	r3, [r7, #16]
 8003a10:	8a3b      	ldrh	r3, [r7, #16]
 8003a12:	f083 0320 	eor.w	r3, r3, #32
 8003a16:	823b      	strh	r3, [r7, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	441a      	add	r2, r3
 8003a26:	8a3b      	ldrh	r3, [r7, #16]
 8003a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3788      	adds	r7, #136	; 0x88
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	817b      	strh	r3, [r7, #10]
 8003a54:	4613      	mov	r3, r2
 8003a56:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a58:	897b      	ldrh	r3, [r7, #10]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a64:	897b      	ldrh	r3, [r7, #10]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e009      	b.n	8003a90 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a7c:	897a      	ldrh	r2, [r7, #10]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d107      	bne.n	8003aa6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	80da      	strh	r2, [r3, #6]
 8003aa4:	e00b      	b.n	8003abe <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e26c      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8087 	beq.w	8003bfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aec:	4b92      	ldr	r3, [pc, #584]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d00c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003af8:	4b8f      	ldr	r3, [pc, #572]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d112      	bne.n	8003b2a <HAL_RCC_OscConfig+0x5e>
 8003b04:	4b8c      	ldr	r3, [pc, #560]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b10:	d10b      	bne.n	8003b2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b12:	4b89      	ldr	r3, [pc, #548]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d06c      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x12c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d168      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e246      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x76>
 8003b34:	4b80      	ldr	r3, [pc, #512]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a7f      	ldr	r2, [pc, #508]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	e02e      	b.n	8003ba0 <HAL_RCC_OscConfig+0xd4>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x98>
 8003b4a:	4b7b      	ldr	r3, [pc, #492]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a7a      	ldr	r2, [pc, #488]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b78      	ldr	r3, [pc, #480]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a77      	ldr	r2, [pc, #476]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e01d      	b.n	8003ba0 <HAL_RCC_OscConfig+0xd4>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0xbc>
 8003b6e:	4b72      	ldr	r3, [pc, #456]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a71      	ldr	r2, [pc, #452]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6e      	ldr	r2, [pc, #440]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0xd4>
 8003b88:	4b6b      	ldr	r3, [pc, #428]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a6a      	ldr	r2, [pc, #424]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b68      	ldr	r3, [pc, #416]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a67      	ldr	r2, [pc, #412]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fff2 	bl	8001b90 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fd ffee 	bl	8001b90 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e1fa      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	4b5d      	ldr	r3, [pc, #372]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xe4>
 8003bce:	e014      	b.n	8003bfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fd ffde 	bl	8001b90 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fd ffda 	bl	8001b90 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1e6      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bea:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x10c>
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d063      	beq.n	8003cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c06:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00b      	beq.n	8003c2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c12:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d11c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x18c>
 8003c1e:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d116      	bne.n	8003c58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	4b43      	ldr	r3, [pc, #268]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_RCC_OscConfig+0x176>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e1ba      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c42:	4b3d      	ldr	r3, [pc, #244]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4939      	ldr	r1, [pc, #228]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	e03a      	b.n	8003cce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d020      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c60:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c66:	f7fd ff93 	bl	8001b90 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6e:	f7fd ff8f 	bl	8001b90 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e19b      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c80:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8c:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4927      	ldr	r1, [pc, #156]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]
 8003ca0:	e015      	b.n	8003cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fd ff72 	bl	8001b90 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb0:	f7fd ff6e 	bl	8001b90 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e17a      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d03a      	beq.n	8003d50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d019      	beq.n	8003d16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce2:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <HAL_RCC_OscConfig+0x274>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce8:	f7fd ff52 	bl	8001b90 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fd ff4e 	bl	8001b90 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e15a      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d0e:	2001      	movs	r0, #1
 8003d10:	f000 faa8 	bl	8004264 <RCC_Delay>
 8003d14:	e01c      	b.n	8003d50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <HAL_RCC_OscConfig+0x274>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1c:	f7fd ff38 	bl	8001b90 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d22:	e00f      	b.n	8003d44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d24:	f7fd ff34 	bl	8001b90 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d908      	bls.n	8003d44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e140      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	42420000 	.word	0x42420000
 8003d40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	4b9e      	ldr	r3, [pc, #632]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e9      	bne.n	8003d24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80a6 	beq.w	8003eaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d62:	4b97      	ldr	r3, [pc, #604]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10d      	bne.n	8003d8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	4b94      	ldr	r3, [pc, #592]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	4a93      	ldr	r2, [pc, #588]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d78:	61d3      	str	r3, [r2, #28]
 8003d7a:	4b91      	ldr	r3, [pc, #580]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8a:	4b8e      	ldr	r3, [pc, #568]	; (8003fc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d118      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d96:	4b8b      	ldr	r3, [pc, #556]	; (8003fc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a8a      	ldr	r2, [pc, #552]	; (8003fc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da2:	f7fd fef5 	bl	8001b90 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003daa:	f7fd fef1 	bl	8001b90 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b64      	cmp	r3, #100	; 0x64
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0fd      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbc:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_OscConfig+0x4f8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x312>
 8003dd0:	4b7b      	ldr	r3, [pc, #492]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4a7a      	ldr	r2, [pc, #488]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	6213      	str	r3, [r2, #32]
 8003ddc:	e02d      	b.n	8003e3a <HAL_RCC_OscConfig+0x36e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x334>
 8003de6:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	4a75      	ldr	r2, [pc, #468]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	6213      	str	r3, [r2, #32]
 8003df2:	4b73      	ldr	r3, [pc, #460]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4a72      	ldr	r2, [pc, #456]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	6213      	str	r3, [r2, #32]
 8003dfe:	e01c      	b.n	8003e3a <HAL_RCC_OscConfig+0x36e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d10c      	bne.n	8003e22 <HAL_RCC_OscConfig+0x356>
 8003e08:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4a6c      	ldr	r2, [pc, #432]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e0e:	f043 0304 	orr.w	r3, r3, #4
 8003e12:	6213      	str	r3, [r2, #32]
 8003e14:	4b6a      	ldr	r3, [pc, #424]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4a69      	ldr	r2, [pc, #420]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6213      	str	r3, [r2, #32]
 8003e20:	e00b      	b.n	8003e3a <HAL_RCC_OscConfig+0x36e>
 8003e22:	4b67      	ldr	r3, [pc, #412]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	4a66      	ldr	r2, [pc, #408]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6213      	str	r3, [r2, #32]
 8003e2e:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4a63      	ldr	r2, [pc, #396]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d015      	beq.n	8003e6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e42:	f7fd fea5 	bl	8001b90 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fd fea1 	bl	8001b90 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e0ab      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	4b57      	ldr	r3, [pc, #348]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ee      	beq.n	8003e4a <HAL_RCC_OscConfig+0x37e>
 8003e6c:	e014      	b.n	8003e98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fe8f 	bl	8001b90 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd fe8b 	bl	8001b90 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e095      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8c:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ee      	bne.n	8003e76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d105      	bne.n	8003eaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9e:	4b48      	ldr	r3, [pc, #288]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	4a47      	ldr	r2, [pc, #284]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8081 	beq.w	8003fb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb4:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d061      	beq.n	8003f84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d146      	bne.n	8003f56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <HAL_RCC_OscConfig+0x4fc>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fd fe5f 	bl	8001b90 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed6:	f7fd fe5b 	bl	8001b90 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e067      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee8:	4b35      	ldr	r3, [pc, #212]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f0      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d108      	bne.n	8003f10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003efe:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	492d      	ldr	r1, [pc, #180]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f10:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a19      	ldr	r1, [r3, #32]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	430b      	orrs	r3, r1
 8003f22:	4927      	ldr	r1, [pc, #156]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f28:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <HAL_RCC_OscConfig+0x4fc>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fd fe2f 	bl	8001b90 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fd fe2b 	bl	8001b90 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e037      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x46a>
 8003f54:	e02f      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <HAL_RCC_OscConfig+0x4fc>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fd fe18 	bl	8001b90 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fd fe14 	bl	8001b90 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e020      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x498>
 8003f82:	e018      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e013      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_OscConfig+0x4f4>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	42420060 	.word	0x42420060

08003fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0d0      	b.n	8004182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d910      	bls.n	8004010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	4b67      	ldr	r3, [pc, #412]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 0207 	bic.w	r2, r3, #7
 8003ff6:	4965      	ldr	r1, [pc, #404]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0b8      	b.n	8004182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d020      	beq.n	800405e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004028:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4a58      	ldr	r2, [pc, #352]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004040:	4b53      	ldr	r3, [pc, #332]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a52      	ldr	r2, [pc, #328]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800404a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404c:	4b50      	ldr	r3, [pc, #320]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	494d      	ldr	r1, [pc, #308]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d040      	beq.n	80040ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d115      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e07f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	4b41      	ldr	r3, [pc, #260]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e073      	b.n	8004182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409a:	4b3d      	ldr	r3, [pc, #244]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e06b      	b.n	8004182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040aa:	4b39      	ldr	r3, [pc, #228]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4936      	ldr	r1, [pc, #216]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040bc:	f7fd fd68 	bl	8001b90 <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	e00a      	b.n	80040da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c4:	f7fd fd64 	bl	8001b90 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e053      	b.n	8004182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 020c 	and.w	r2, r3, #12
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d1eb      	bne.n	80040c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ec:	4b27      	ldr	r3, [pc, #156]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d210      	bcs.n	800411c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 0207 	bic.w	r2, r3, #7
 8004102:	4922      	ldr	r1, [pc, #136]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e032      	b.n	8004182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4916      	ldr	r1, [pc, #88]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	490e      	ldr	r1, [pc, #56]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800415a:	f000 f821 	bl	80041a0 <HAL_RCC_GetSysClockFreq>
 800415e:	4602      	mov	r2, r0
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	490a      	ldr	r1, [pc, #40]	; (8004194 <HAL_RCC_ClockConfig+0x1c8>)
 800416c:	5ccb      	ldrb	r3, [r1, r3]
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_RCC_ClockConfig+0x1cc>)
 8004174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCC_ClockConfig+0x1d0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd fcc6 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40022000 	.word	0x40022000
 8004190:	40021000 	.word	0x40021000
 8004194:	0800bfb8 	.word	0x0800bfb8
 8004198:	20000010 	.word	0x20000010
 800419c:	20000014 	.word	0x20000014

080041a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a0:	b490      	push	{r4, r7}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041a6:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041a8:	1d3c      	adds	r4, r7, #4
 80041aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041b0:	f240 2301 	movw	r3, #513	; 0x201
 80041b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	2300      	movs	r3, #0
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d002      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x40>
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_GetSysClockFreq+0x46>
 80041de:	e02d      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041e0:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e2:	623b      	str	r3, [r7, #32]
      break;
 80041e4:	e02d      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	0c9b      	lsrs	r3, r3, #18
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041f2:	4413      	add	r3, r2
 80041f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d013      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c5b      	lsrs	r3, r3, #17
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004212:	4413      	add	r3, r2
 8004214:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004218:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800421e:	fb02 f203 	mul.w	r2, r2, r3
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
 800422a:	e004      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	4a0b      	ldr	r2, [pc, #44]	; (800425c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	623b      	str	r3, [r7, #32]
      break;
 800423a:	e002      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCC_GetSysClockFreq+0xc0>)
 800423e:	623b      	str	r3, [r7, #32]
      break;
 8004240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004242:	6a3b      	ldr	r3, [r7, #32]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3728      	adds	r7, #40	; 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bc90      	pop	{r4, r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	0800bf5c 	.word	0x0800bf5c
 8004254:	40021000 	.word	0x40021000
 8004258:	00f42400 	.word	0x00f42400
 800425c:	003d0900 	.word	0x003d0900
 8004260:	007a1200 	.word	0x007a1200

08004264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <RCC_Delay+0x34>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0a      	ldr	r2, [pc, #40]	; (800429c <RCC_Delay+0x38>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0a5b      	lsrs	r3, r3, #9
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004280:	bf00      	nop
  }
  while (Delay --);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1e5a      	subs	r2, r3, #1
 8004286:	60fa      	str	r2, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f9      	bne.n	8004280 <RCC_Delay+0x1c>
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	20000010 	.word	0x20000010
 800429c:	10624dd3 	.word	0x10624dd3

080042a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d07d      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042bc:	2300      	movs	r3, #0
 80042be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c0:	4b4f      	ldr	r3, [pc, #316]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042cc:	4b4c      	ldr	r3, [pc, #304]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	4a4b      	ldr	r2, [pc, #300]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d6:	61d3      	str	r3, [r2, #28]
 80042d8:	4b49      	ldr	r3, [pc, #292]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	4b46      	ldr	r3, [pc, #280]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d118      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f4:	4b43      	ldr	r3, [pc, #268]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a42      	ldr	r2, [pc, #264]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004300:	f7fd fc46 	bl	8001b90 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	e008      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004308:	f7fd fc42 	bl	8001b90 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e06d      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b3a      	ldr	r3, [pc, #232]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004326:	4b36      	ldr	r3, [pc, #216]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d02e      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	429a      	cmp	r2, r3
 8004342:	d027      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004344:	4b2e      	ldr	r3, [pc, #184]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800434e:	4b2e      	ldr	r3, [pc, #184]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004354:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800435a:	4a29      	ldr	r2, [pc, #164]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d014      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fd fc11 	bl	8001b90 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004370:	e00a      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7fd fc0d 	bl	8001b90 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e036      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ee      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004394:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4917      	ldr	r1, [pc, #92]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d105      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	4a13      	ldr	r2, [pc, #76]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	490b      	ldr	r1, [pc, #44]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4904      	ldr	r1, [pc, #16]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000
 8004404:	40007000 	.word	0x40007000
 8004408:	42420440 	.word	0x42420440

0800440c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e076      	b.n	800450c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d108      	bne.n	8004438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442e:	d009      	beq.n	8004444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	61da      	str	r2, [r3, #28]
 8004436:	e005      	b.n	8004444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd f9e2 	bl	8001828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	ea42 0103 	orr.w	r1, r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	0c1a      	lsrs	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f002 0204 	and.w	r2, r2, #4
 80044ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69da      	ldr	r2, [r3, #28]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_SPI_Transmit+0x22>
 8004532:	2302      	movs	r3, #2
 8004534:	e126      	b.n	8004784 <HAL_SPI_Transmit+0x270>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800453e:	f7fd fb27 	bl	8001b90 <HAL_GetTick>
 8004542:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d002      	beq.n	800455a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004554:	2302      	movs	r3, #2
 8004556:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004558:	e10b      	b.n	8004772 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_Transmit+0x52>
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d102      	bne.n	800456c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	77fb      	strb	r3, [r7, #31]
    goto error;
 800456a:	e102      	b.n	8004772 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2203      	movs	r2, #3
 8004570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b2:	d10f      	bne.n	80045d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d007      	beq.n	80045f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fa:	d14b      	bne.n	8004694 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_Transmit+0xf6>
 8004604:	8afb      	ldrh	r3, [r7, #22]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d13e      	bne.n	8004688 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	881a      	ldrh	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	1c9a      	adds	r2, r3, #2
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800462e:	e02b      	b.n	8004688 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d112      	bne.n	8004664 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	1c9a      	adds	r2, r3, #2
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	86da      	strh	r2, [r3, #54]	; 0x36
 8004662:	e011      	b.n	8004688 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004664:	f7fd fa94 	bl	8001b90 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d803      	bhi.n	800467c <HAL_SPI_Transmit+0x168>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d102      	bne.n	8004682 <HAL_SPI_Transmit+0x16e>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004686:	e074      	b.n	8004772 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1ce      	bne.n	8004630 <HAL_SPI_Transmit+0x11c>
 8004692:	e04c      	b.n	800472e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_SPI_Transmit+0x18e>
 800469c:	8afb      	ldrh	r3, [r7, #22]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d140      	bne.n	8004724 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046c8:	e02c      	b.n	8004724 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d113      	bne.n	8004700 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	7812      	ldrb	r2, [r2, #0]
 80046e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80046fe:	e011      	b.n	8004724 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004700:	f7fd fa46 	bl	8001b90 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d803      	bhi.n	8004718 <HAL_SPI_Transmit+0x204>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d102      	bne.n	800471e <HAL_SPI_Transmit+0x20a>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004722:	e026      	b.n	8004772 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1cd      	bne.n	80046ca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	6839      	ldr	r1, [r7, #0]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f8b2 	bl	800489c <SPI_EndRxTxTransaction>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e000      	b.n	8004772 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004770:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004782:	7ffb      	ldrb	r3, [r7, #31]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800479c:	f7fd f9f8 	bl	8001b90 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	4413      	add	r3, r2
 80047aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047ac:	f7fd f9f0 	bl	8001b90 <HAL_GetTick>
 80047b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047b2:	4b39      	ldr	r3, [pc, #228]	; (8004898 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	015b      	lsls	r3, r3, #5
 80047b8:	0d1b      	lsrs	r3, r3, #20
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	fb02 f303 	mul.w	r3, r2, r3
 80047c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047c2:	e054      	b.n	800486e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d050      	beq.n	800486e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047cc:	f7fd f9e0 	bl	8001b90 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d902      	bls.n	80047e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d13d      	bne.n	800485e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fa:	d111      	bne.n	8004820 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	d004      	beq.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480e:	d107      	bne.n	8004820 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004828:	d10f      	bne.n	800484a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004848:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e017      	b.n	800488e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	3b01      	subs	r3, #1
 800486c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4013      	ands	r3, r2
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	429a      	cmp	r2, r3
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	429a      	cmp	r2, r3
 800488a:	d19b      	bne.n	80047c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000010 	.word	0x20000010

0800489c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2180      	movs	r1, #128	; 0x80
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff ff6a 	bl	800478c <SPI_WaitFlagStateUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e000      	b.n	80048d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048d8:	b084      	sub	sp, #16
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	f107 0014 	add.w	r0, r7, #20
 80048e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	b004      	add	sp, #16
 80048f6:	4770      	bx	lr

080048f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004908:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800490c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800492c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004930:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	b29b      	uxth	r3, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	b29b      	uxth	r3, r3
 8004942:	4013      	ands	r3, r2
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004970:	b084      	sub	sp, #16
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	f107 0014 	add.w	r0, r7, #20
 800497e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	b004      	add	sp, #16
 80049ae:	4770      	bx	lr

080049b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b09b      	sub	sp, #108	; 0x6c
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	78db      	ldrb	r3, [r3, #3]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d81f      	bhi.n	8004a22 <USB_ActivateEndpoint+0x72>
 80049e2:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <USB_ActivateEndpoint+0x38>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	080049f9 	.word	0x080049f9
 80049ec:	08004a15 	.word	0x08004a15
 80049f0:	08004a2b 	.word	0x08004a2b
 80049f4:	08004a07 	.word	0x08004a07
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80049f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a00:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a04:	e012      	b.n	8004a2c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a0a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004a0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a12:	e00b      	b.n	8004a2c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a20:	e004      	b.n	8004a2c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004a28:	e000      	b.n	8004a2c <USB_ActivateEndpoint+0x7c>
      break;
 8004a2a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	441a      	add	r2, r3
 8004a36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	7b1b      	ldrb	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f040 8149 	bne.w	8004d30 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	785b      	ldrb	r3, [r3, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8084 	beq.w	8004bb0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	011a      	lsls	r2, r3, #4
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	88db      	ldrh	r3, [r3, #6]
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	81fb      	strh	r3, [r7, #14]
 8004aea:	89fb      	ldrh	r3, [r7, #14]
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <USB_ActivateEndpoint+0x17c>
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	81bb      	strh	r3, [r7, #12]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	89bb      	ldrh	r3, [r7, #12]
 8004b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	78db      	ldrb	r3, [r3, #3]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d020      	beq.n	8004b76 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4a:	813b      	strh	r3, [r7, #8]
 8004b4c:	893b      	ldrh	r3, [r7, #8]
 8004b4e:	f083 0320 	eor.w	r3, r3, #32
 8004b52:	813b      	strh	r3, [r7, #8]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	893b      	ldrh	r3, [r7, #8]
 8004b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	8013      	strh	r3, [r2, #0]
 8004b74:	e27f      	b.n	8005076 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8c:	817b      	strh	r3, [r7, #10]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	441a      	add	r2, r3
 8004b98:	897b      	ldrh	r3, [r7, #10]
 8004b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	8013      	strh	r3, [r2, #0]
 8004bae:	e262      	b.n	8005076 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	4413      	add	r3, r2
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	011a      	lsls	r2, r3, #4
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	88db      	ldrh	r3, [r3, #6]
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	4413      	add	r3, r2
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	011a      	lsls	r2, r3, #4
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	4413      	add	r3, r2
 8004c02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c06:	623b      	str	r3, [r7, #32]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d112      	bne.n	8004c36 <USB_ActivateEndpoint+0x286>
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	e02f      	b.n	8004c96 <USB_ActivateEndpoint+0x2e6>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c3c:	d813      	bhi.n	8004c66 <USB_ActivateEndpoint+0x2b6>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	663b      	str	r3, [r7, #96]	; 0x60
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <USB_ActivateEndpoint+0x2a8>
 8004c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c54:	3301      	adds	r3, #1
 8004c56:	663b      	str	r3, [r7, #96]	; 0x60
 8004c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	801a      	strh	r2, [r3, #0]
 8004c64:	e017      	b.n	8004c96 <USB_ActivateEndpoint+0x2e6>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <USB_ActivateEndpoint+0x2d0>
 8004c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	029b      	lsls	r3, r3, #10
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	83fb      	strh	r3, [r7, #30]
 8004ca4:	8bfb      	ldrh	r3, [r7, #30]
 8004ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01b      	beq.n	8004ce6 <USB_ActivateEndpoint+0x336>
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc4:	83bb      	strh	r3, [r7, #28]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	8bbb      	ldrh	r3, [r7, #28]
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfc:	837b      	strh	r3, [r7, #26]
 8004cfe:	8b7b      	ldrh	r3, [r7, #26]
 8004d00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d04:	837b      	strh	r3, [r7, #26]
 8004d06:	8b7b      	ldrh	r3, [r7, #26]
 8004d08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d0c:	837b      	strh	r3, [r7, #26]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	441a      	add	r2, r3
 8004d18:	8b7b      	ldrh	r3, [r7, #26]
 8004d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	8013      	strh	r3, [r2, #0]
 8004d2e:	e1a2      	b.n	8005076 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	441a      	add	r2, r3
 8004d54:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d7c:	4413      	add	r3, r2
 8004d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	011a      	lsls	r2, r3, #4
 8004d86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	891b      	ldrh	r3, [r3, #8]
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	653b      	str	r3, [r7, #80]	; 0x50
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db0:	4413      	add	r3, r2
 8004db2:	653b      	str	r3, [r7, #80]	; 0x50
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	011a      	lsls	r2, r3, #4
 8004dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	895b      	ldrh	r3, [r3, #10]
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 8091 	bne.w	8004f00 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004dec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01b      	beq.n	8004e2e <USB_ActivateEndpoint+0x47e>
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004e3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01b      	beq.n	8004e7e <USB_ActivateEndpoint+0x4ce>
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e94:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ea0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ea4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004edc:	867b      	strh	r3, [r7, #50]	; 0x32
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8013      	strh	r3, [r2, #0]
 8004efe:	e0ba      	b.n	8005076 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01d      	beq.n	8004f58 <USB_ActivateEndpoint+0x5a8>
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004f68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01d      	beq.n	8004fb0 <USB_ActivateEndpoint+0x600>
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	441a      	add	r2, r3
 8004f98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	78db      	ldrb	r3, [r3, #3]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d024      	beq.n	8005002 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004fd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fd6:	f083 0320 	eor.w	r3, r3, #32
 8004fda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	441a      	add	r2, r3
 8004fe8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	8013      	strh	r3, [r2, #0]
 8005000:	e01d      	b.n	800503e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005018:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005054:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005076:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800507a:	4618      	mov	r0, r3
 800507c:	376c      	adds	r7, #108	; 0x6c
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr

08005084 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005084:	b480      	push	{r7}
 8005086:	b08d      	sub	sp, #52	; 0x34
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	7b1b      	ldrb	r3, [r3, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f040 808e 	bne.w	80051b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d044      	beq.n	800512a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	81bb      	strh	r3, [r7, #12]
 80050ae:	89bb      	ldrh	r3, [r7, #12]
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01b      	beq.n	80050f0 <USB_DeactivateEndpoint+0x6c>
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ce:	817b      	strh	r3, [r7, #10]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	441a      	add	r2, r3
 80050da:	897b      	ldrh	r3, [r7, #10]
 80050dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005106:	813b      	strh	r3, [r7, #8]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	893b      	ldrh	r3, [r7, #8]
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
 8005128:	e192      	b.n	8005450 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	827b      	strh	r3, [r7, #18]
 8005138:	8a7b      	ldrh	r3, [r7, #18]
 800513a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01b      	beq.n	800517a <USB_DeactivateEndpoint+0xf6>
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005158:	823b      	strh	r3, [r7, #16]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	441a      	add	r2, r3
 8005164:	8a3b      	ldrh	r3, [r7, #16]
 8005166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005176:	b29b      	uxth	r3, r3
 8005178:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	81fb      	strh	r3, [r7, #14]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	441a      	add	r2, r3
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	8013      	strh	r3, [r2, #0]
 80051b2:	e14d      	b.n	8005450 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f040 80a5 	bne.w	8005308 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	843b      	strh	r3, [r7, #32]
 80051cc:	8c3b      	ldrh	r3, [r7, #32]
 80051ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01b      	beq.n	800520e <USB_DeactivateEndpoint+0x18a>
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	83fb      	strh	r3, [r7, #30]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	8bfb      	ldrh	r3, [r7, #30]
 80051fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	83bb      	strh	r3, [r7, #28]
 800521c:	8bbb      	ldrh	r3, [r7, #28]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01b      	beq.n	800525e <USB_DeactivateEndpoint+0x1da>
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	837b      	strh	r3, [r7, #26]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	441a      	add	r2, r3
 8005248:	8b7b      	ldrh	r3, [r7, #26]
 800524a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005256:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800525a:	b29b      	uxth	r3, r3
 800525c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005274:	833b      	strh	r3, [r7, #24]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	441a      	add	r2, r3
 8005280:	8b3b      	ldrh	r3, [r7, #24]
 8005282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800528a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005292:	b29b      	uxth	r3, r3
 8005294:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ac:	82fb      	strh	r3, [r7, #22]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	441a      	add	r2, r3
 80052b8:	8afb      	ldrh	r3, [r7, #22]
 80052ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e4:	82bb      	strh	r3, [r7, #20]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	8abb      	ldrh	r3, [r7, #20]
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]
 8005306:	e0a3      	b.n	8005450 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005316:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01b      	beq.n	8005358 <USB_DeactivateEndpoint+0x2d4>
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005354:	b29b      	uxth	r3, r3
 8005356:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005366:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01b      	beq.n	80053a8 <USB_DeactivateEndpoint+0x324>
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	853b      	strh	r3, [r7, #40]	; 0x28
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	441a      	add	r2, r3
 8005392:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	441a      	add	r2, r3
 80053ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800543c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544c:	b29b      	uxth	r3, r3
 800544e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3734      	adds	r7, #52	; 0x34
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b0cc      	sub	sp, #304	; 0x130
 8005460:	af00      	add	r7, sp, #0
 8005462:	1d3b      	adds	r3, r7, #4
 8005464:	6018      	str	r0, [r3, #0]
 8005466:	463b      	mov	r3, r7
 8005468:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800546a:	463b      	mov	r3, r7
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 872e 	bne.w	80062d2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005476:	463b      	mov	r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	463b      	mov	r3, r7
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	429a      	cmp	r2, r3
 8005484:	d905      	bls.n	8005492 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005486:	463b      	mov	r3, r7
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005490:	e004      	b.n	800549c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005492:	463b      	mov	r3, r7
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800549c:	463b      	mov	r3, r7
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	7b1b      	ldrb	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d134      	bne.n	8005510 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054a6:	463b      	mov	r3, r7
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6959      	ldr	r1, [r3, #20]
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	88da      	ldrh	r2, [r3, #6]
 80054b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	1d38      	adds	r0, r7, #4
 80054ba:	6800      	ldr	r0, [r0, #0]
 80054bc:	f001 fc03 	bl	8006cc6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054c0:	f107 0310 	add.w	r3, r7, #16
 80054c4:	1d3a      	adds	r2, r7, #4
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	4619      	mov	r1, r3
 80054d6:	f107 0310 	add.w	r3, r7, #16
 80054da:	f107 0210 	add.w	r2, r7, #16
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	440a      	add	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	463b      	mov	r3, r7
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	011a      	lsls	r2, r3, #4
 80054ec:	f107 0310 	add.w	r3, r7, #16
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005502:	b29a      	uxth	r2, r3
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	f000 beac 	b.w	8006268 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	78db      	ldrb	r3, [r3, #3]
 8005516:	2b02      	cmp	r3, #2
 8005518:	f040 838c 	bne.w	8005c34 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800551c:	463b      	mov	r3, r7
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	463b      	mov	r3, r7
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	429a      	cmp	r2, r3
 800552a:	f240 8330 	bls.w	8005b8e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005548:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	463b      	mov	r3, r7
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	441a      	add	r2, r3
 800555a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800555e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005566:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800556a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556e:	b29b      	uxth	r3, r3
 8005570:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005572:	463b      	mov	r3, r7
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557c:	1ad2      	subs	r2, r2, r3
 800557e:	463b      	mov	r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	463b      	mov	r3, r7
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 819e 	beq.w	80058dc <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055a4:	1d3a      	adds	r2, r7, #4
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d17a      	bne.n	80056aa <USB_EPStartXfer+0x24e>
 80055b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055b8:	1d3a      	adds	r2, r7, #4
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	4619      	mov	r1, r3
 80055ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	440a      	add	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	011a      	lsls	r2, r3, #4
 80055e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4413      	add	r3, r2
 80055e8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80055ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d11a      	bne.n	8005630 <USB_EPStartXfer+0x1d4>
 80055fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005608:	b29a      	uxth	r2, r3
 800560a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005624:	b29a      	uxth	r2, r3
 8005626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	e062      	b.n	80056f6 <USB_EPStartXfer+0x29a>
 8005630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005634:	2b3e      	cmp	r3, #62	; 0x3e
 8005636:	d819      	bhi.n	800566c <USB_EPStartXfer+0x210>
 8005638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <USB_EPStartXfer+0x1fc>
 800564e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005652:	3301      	adds	r3, #1
 8005654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005658:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800565c:	b29b      	uxth	r3, r3
 800565e:	029b      	lsls	r3, r3, #10
 8005660:	b29a      	uxth	r2, r3
 8005662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	e044      	b.n	80056f6 <USB_EPStartXfer+0x29a>
 800566c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	2b00      	cmp	r3, #0
 8005680:	d104      	bne.n	800568c <USB_EPStartXfer+0x230>
 8005682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005686:	3b01      	subs	r3, #1
 8005688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800568c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005690:	b29b      	uxth	r3, r3
 8005692:	029b      	lsls	r3, r3, #10
 8005694:	b29b      	uxth	r3, r3
 8005696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569e:	b29a      	uxth	r2, r3
 80056a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	e025      	b.n	80056f6 <USB_EPStartXfer+0x29a>
 80056aa:	463b      	mov	r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d120      	bne.n	80056f6 <USB_EPStartXfer+0x29a>
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056bc:	b29b      	uxth	r3, r3
 80056be:	4619      	mov	r1, r3
 80056c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	440a      	add	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	011a      	lsls	r2, r3, #4
 80056d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4413      	add	r3, r2
 80056de:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80056e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056f6:	463b      	mov	r3, r7
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	895b      	ldrh	r3, [r3, #10]
 80056fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005700:	463b      	mov	r3, r7
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6959      	ldr	r1, [r3, #20]
 8005706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570a:	b29b      	uxth	r3, r3
 800570c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005710:	1d38      	adds	r0, r7, #4
 8005712:	6800      	ldr	r0, [r0, #0]
 8005714:	f001 fad7 	bl	8006cc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005722:	441a      	add	r2, r3
 8005724:	463b      	mov	r3, r7
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800572a:	463b      	mov	r3, r7
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	429a      	cmp	r2, r3
 8005738:	d909      	bls.n	800574e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800573a:	463b      	mov	r3, r7
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6a1a      	ldr	r2, [r3, #32]
 8005740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005744:	1ad2      	subs	r2, r2, r3
 8005746:	463b      	mov	r3, r7
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	621a      	str	r2, [r3, #32]
 800574c:	e008      	b.n	8005760 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005758:	463b      	mov	r3, r7
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2200      	movs	r2, #0
 800575e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005760:	463b      	mov	r3, r7
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d17a      	bne.n	8005860 <USB_EPStartXfer+0x404>
 800576a:	f107 0318 	add.w	r3, r7, #24
 800576e:	1d3a      	adds	r2, r7, #4
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577c:	b29b      	uxth	r3, r3
 800577e:	4619      	mov	r1, r3
 8005780:	f107 0318 	add.w	r3, r7, #24
 8005784:	f107 0218 	add.w	r2, r7, #24
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	440a      	add	r2, r1
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	011a      	lsls	r2, r3, #4
 8005796:	f107 0318 	add.w	r3, r7, #24
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4413      	add	r3, r2
 800579e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80057a2:	f107 0314 	add.w	r3, r7, #20
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d11a      	bne.n	80057e6 <USB_EPStartXfer+0x38a>
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f107 0314 	add.w	r3, r7, #20
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	f107 0314 	add.w	r3, r7, #20
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057da:	b29a      	uxth	r2, r3
 80057dc:	f107 0314 	add.w	r3, r7, #20
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	e067      	b.n	80058b6 <USB_EPStartXfer+0x45a>
 80057e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ea:	2b3e      	cmp	r3, #62	; 0x3e
 80057ec:	d819      	bhi.n	8005822 <USB_EPStartXfer+0x3c6>
 80057ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <USB_EPStartXfer+0x3b2>
 8005804:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005808:	3301      	adds	r3, #1
 800580a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800580e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005812:	b29b      	uxth	r3, r3
 8005814:	029b      	lsls	r3, r3, #10
 8005816:	b29a      	uxth	r2, r3
 8005818:	f107 0314 	add.w	r3, r7, #20
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	e049      	b.n	80058b6 <USB_EPStartXfer+0x45a>
 8005822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800582c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <USB_EPStartXfer+0x3e6>
 8005838:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800583c:	3b01      	subs	r3, #1
 800583e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005842:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005846:	b29b      	uxth	r3, r3
 8005848:	029b      	lsls	r3, r3, #10
 800584a:	b29b      	uxth	r3, r3
 800584c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005854:	b29a      	uxth	r2, r3
 8005856:	f107 0314 	add.w	r3, r7, #20
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	e02a      	b.n	80058b6 <USB_EPStartXfer+0x45a>
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d125      	bne.n	80058b6 <USB_EPStartXfer+0x45a>
 800586a:	f107 0320 	add.w	r3, r7, #32
 800586e:	1d3a      	adds	r2, r7, #4
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	1d3b      	adds	r3, r7, #4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587c:	b29b      	uxth	r3, r3
 800587e:	4619      	mov	r1, r3
 8005880:	f107 0320 	add.w	r3, r7, #32
 8005884:	f107 0220 	add.w	r2, r7, #32
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	440a      	add	r2, r1
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	463b      	mov	r3, r7
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	011a      	lsls	r2, r3, #4
 8005896:	f107 0320 	add.w	r3, r7, #32
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4413      	add	r3, r2
 800589e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058a2:	f107 031c 	add.w	r3, r7, #28
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	f107 031c 	add.w	r3, r7, #28
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058b6:	463b      	mov	r3, r7
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	891b      	ldrh	r3, [r3, #8]
 80058bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058c0:	463b      	mov	r3, r7
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6959      	ldr	r1, [r3, #20]
 80058c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058d0:	1d38      	adds	r0, r7, #4
 80058d2:	6800      	ldr	r0, [r0, #0]
 80058d4:	f001 f9f7 	bl	8006cc6 <USB_WritePMA>
 80058d8:	f000 bcc6 	b.w	8006268 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d164      	bne.n	80059b0 <USB_EPStartXfer+0x554>
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fa:	4413      	add	r3, r2
 80058fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	011a      	lsls	r2, r3, #4
 8005906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005908:	4413      	add	r3, r2
 800590a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800590e:	647b      	str	r3, [r7, #68]	; 0x44
 8005910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d112      	bne.n	800593e <USB_EPStartXfer+0x4e2>
 8005918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005922:	b29a      	uxth	r2, r3
 8005924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005936:	b29a      	uxth	r2, r3
 8005938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	e057      	b.n	80059ee <USB_EPStartXfer+0x592>
 800593e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005942:	2b3e      	cmp	r3, #62	; 0x3e
 8005944:	d817      	bhi.n	8005976 <USB_EPStartXfer+0x51a>
 8005946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <USB_EPStartXfer+0x50a>
 800595c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005960:	3301      	adds	r3, #1
 8005962:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005966:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800596a:	b29b      	uxth	r3, r3
 800596c:	029b      	lsls	r3, r3, #10
 800596e:	b29a      	uxth	r2, r3
 8005970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	e03b      	b.n	80059ee <USB_EPStartXfer+0x592>
 8005976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005984:	f003 031f 	and.w	r3, r3, #31
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <USB_EPStartXfer+0x53a>
 800598c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005990:	3b01      	subs	r3, #1
 8005992:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005996:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800599a:	b29b      	uxth	r3, r3
 800599c:	029b      	lsls	r3, r3, #10
 800599e:	b29b      	uxth	r3, r3
 80059a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	e01e      	b.n	80059ee <USB_EPStartXfer+0x592>
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d119      	bne.n	80059ee <USB_EPStartXfer+0x592>
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	653b      	str	r3, [r7, #80]	; 0x50
 80059c0:	1d3b      	adds	r3, r7, #4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ce:	4413      	add	r3, r2
 80059d0:	653b      	str	r3, [r7, #80]	; 0x50
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	011a      	lsls	r2, r3, #4
 80059da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059dc:	4413      	add	r3, r2
 80059de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059ee:	463b      	mov	r3, r7
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	891b      	ldrh	r3, [r3, #8]
 80059f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6959      	ldr	r1, [r3, #20]
 80059fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a08:	1d38      	adds	r0, r7, #4
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	f001 f95b 	bl	8006cc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a10:	463b      	mov	r3, r7
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1a:	441a      	add	r2, r3
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	463b      	mov	r3, r7
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d909      	bls.n	8005a46 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005a32:	463b      	mov	r3, r7
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a1a      	ldr	r2, [r3, #32]
 8005a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3c:	1ad2      	subs	r2, r2, r3
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	621a      	str	r2, [r3, #32]
 8005a44:	e008      	b.n	8005a58 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a46:	463b      	mov	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005a50:	463b      	mov	r3, r7
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a58:	1d3b      	adds	r3, r7, #4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a5e:	463b      	mov	r3, r7
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	785b      	ldrb	r3, [r3, #1]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d164      	bne.n	8005b32 <USB_EPStartXfer+0x6d6>
 8005a68:	1d3b      	adds	r3, r7, #4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a6e:	1d3b      	adds	r3, r7, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	4413      	add	r3, r2
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a80:	463b      	mov	r3, r7
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	011a      	lsls	r2, r3, #4
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
 8005a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d112      	bne.n	8005ac0 <USB_EPStartXfer+0x664>
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	e054      	b.n	8005b6a <USB_EPStartXfer+0x70e>
 8005ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ac6:	d817      	bhi.n	8005af8 <USB_EPStartXfer+0x69c>
 8005ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <USB_EPStartXfer+0x68c>
 8005ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	e038      	b.n	8005b6a <USB_EPStartXfer+0x70e>
 8005af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <USB_EPStartXfer+0x6bc>
 8005b0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b12:	3b01      	subs	r3, #1
 8005b14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	029b      	lsls	r3, r3, #10
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	e01b      	b.n	8005b6a <USB_EPStartXfer+0x70e>
 8005b32:	463b      	mov	r3, r7
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d116      	bne.n	8005b6a <USB_EPStartXfer+0x70e>
 8005b3c:	1d3b      	adds	r3, r7, #4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4a:	4413      	add	r3, r2
 8005b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b4e:	463b      	mov	r3, r7
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	011a      	lsls	r2, r3, #4
 8005b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b58:	4413      	add	r3, r2
 8005b5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	895b      	ldrh	r3, [r3, #10]
 8005b70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6959      	ldr	r1, [r3, #20]
 8005b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b84:	1d38      	adds	r0, r7, #4
 8005b86:	6800      	ldr	r0, [r0, #0]
 8005b88:	f001 f89d 	bl	8006cc6 <USB_WritePMA>
 8005b8c:	e36c      	b.n	8006268 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005b8e:	463b      	mov	r3, r7
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005b98:	1d3b      	adds	r3, r7, #4
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	463b      	mov	r3, r7
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bdc:	1d3b      	adds	r3, r7, #4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf0:	4413      	add	r3, r2
 8005bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	011a      	lsls	r2, r3, #4
 8005bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bfe:	4413      	add	r3, r2
 8005c00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	891b      	ldrh	r3, [r3, #8]
 8005c16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6959      	ldr	r1, [r3, #20]
 8005c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c2a:	1d38      	adds	r0, r7, #4
 8005c2c:	6800      	ldr	r0, [r0, #0]
 8005c2e:	f001 f84a 	bl	8006cc6 <USB_WritePMA>
 8005c32:	e319      	b.n	8006268 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005c34:	1d3b      	adds	r3, r7, #4
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	463b      	mov	r3, r7
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c82:	1ad2      	subs	r2, r2, r3
 8005c84:	463b      	mov	r3, r7
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	463b      	mov	r3, r7
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8162 	beq.w	8005f6a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cae:	463b      	mov	r3, r7
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d164      	bne.n	8005d82 <USB_EPStartXfer+0x926>
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ccc:	4413      	add	r3, r2
 8005cce:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	011a      	lsls	r2, r3, #4
 8005cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cda:	4413      	add	r3, r2
 8005cdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ce0:	677b      	str	r3, [r7, #116]	; 0x74
 8005ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d112      	bne.n	8005d10 <USB_EPStartXfer+0x8b4>
 8005cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	e057      	b.n	8005dc0 <USB_EPStartXfer+0x964>
 8005d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d14:	2b3e      	cmp	r3, #62	; 0x3e
 8005d16:	d817      	bhi.n	8005d48 <USB_EPStartXfer+0x8ec>
 8005d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <USB_EPStartXfer+0x8dc>
 8005d2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d32:	3301      	adds	r3, #1
 8005d34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	029b      	lsls	r3, r3, #10
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	e03b      	b.n	8005dc0 <USB_EPStartXfer+0x964>
 8005d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <USB_EPStartXfer+0x90c>
 8005d5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d62:	3b01      	subs	r3, #1
 8005d64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	029b      	lsls	r3, r3, #10
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e01e      	b.n	8005dc0 <USB_EPStartXfer+0x964>
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d119      	bne.n	8005dc0 <USB_EPStartXfer+0x964>
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005da2:	463b      	mov	r3, r7
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	011a      	lsls	r2, r3, #4
 8005daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dae:	4413      	add	r3, r2
 8005db0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005db4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	895b      	ldrh	r3, [r3, #10]
 8005dc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dca:	463b      	mov	r3, r7
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6959      	ldr	r1, [r3, #20]
 8005dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005dda:	1d38      	adds	r0, r7, #4
 8005ddc:	6800      	ldr	r0, [r0, #0]
 8005dde:	f000 ff72 	bl	8006cc6 <USB_WritePMA>
          ep->xfer_buff += len;
 8005de2:	463b      	mov	r3, r7
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dec:	441a      	add	r2, r3
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d909      	bls.n	8005e18 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	463b      	mov	r3, r7
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	621a      	str	r2, [r3, #32]
 8005e16:	e008      	b.n	8005e2a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005e18:	463b      	mov	r3, r7
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005e22:	463b      	mov	r3, r7
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 821a 	beq.w	8006268 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e34:	463b      	mov	r3, r7
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d164      	bne.n	8005f08 <USB_EPStartXfer+0xaac>
 8005e3e:	1d3b      	adds	r3, r7, #4
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e44:	1d3b      	adds	r3, r7, #4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e52:	4413      	add	r3, r2
 8005e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e56:	463b      	mov	r3, r7
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	011a      	lsls	r2, r3, #4
 8005e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e66:	667b      	str	r3, [r7, #100]	; 0x64
 8005e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d112      	bne.n	8005e96 <USB_EPStartXfer+0xa3a>
 8005e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7e:	801a      	strh	r2, [r3, #0]
 8005e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e057      	b.n	8005f46 <USB_EPStartXfer+0xaea>
 8005e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e9c:	d817      	bhi.n	8005ece <USB_EPStartXfer+0xa72>
 8005e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <USB_EPStartXfer+0xa62>
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb8:	3301      	adds	r3, #1
 8005eba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	029b      	lsls	r3, r3, #10
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e03b      	b.n	8005f46 <USB_EPStartXfer+0xaea>
 8005ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005edc:	f003 031f 	and.w	r3, r3, #31
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <USB_EPStartXfer+0xa92>
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	029b      	lsls	r3, r3, #10
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e01e      	b.n	8005f46 <USB_EPStartXfer+0xaea>
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d119      	bne.n	8005f46 <USB_EPStartXfer+0xaea>
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	673b      	str	r3, [r7, #112]	; 0x70
 8005f18:	1d3b      	adds	r3, r7, #4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f26:	4413      	add	r3, r2
 8005f28:	673b      	str	r3, [r7, #112]	; 0x70
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	011a      	lsls	r2, r3, #4
 8005f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f34:	4413      	add	r3, r2
 8005f36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f46:	463b      	mov	r3, r7
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	891b      	ldrh	r3, [r3, #8]
 8005f4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6959      	ldr	r1, [r3, #20]
 8005f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f60:	1d38      	adds	r0, r7, #4
 8005f62:	6800      	ldr	r0, [r0, #0]
 8005f64:	f000 feaf 	bl	8006cc6 <USB_WritePMA>
 8005f68:	e17e      	b.n	8006268 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d16f      	bne.n	8006054 <USB_EPStartXfer+0xbf8>
 8005f74:	1d3b      	adds	r3, r7, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f7c:	1d3b      	adds	r3, r7, #4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	011a      	lsls	r2, r3, #4
 8005f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d116      	bne.n	8005fde <USB_EPStartXfer+0xb82>
 8005fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	e05f      	b.n	800609e <USB_EPStartXfer+0xc42>
 8005fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe4:	d818      	bhi.n	8006018 <USB_EPStartXfer+0xbbc>
 8005fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <USB_EPStartXfer+0xbaa>
 8005ffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006000:	3301      	adds	r3, #1
 8006002:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006006:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800600a:	b29b      	uxth	r3, r3
 800600c:	029b      	lsls	r3, r3, #10
 800600e:	b29a      	uxth	r2, r3
 8006010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	e042      	b.n	800609e <USB_EPStartXfer+0xc42>
 8006018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <USB_EPStartXfer+0xbdc>
 800602e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006032:	3b01      	subs	r3, #1
 8006034:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006038:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800603c:	b29b      	uxth	r3, r3
 800603e:	029b      	lsls	r3, r3, #10
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29a      	uxth	r2, r3
 800604c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	e024      	b.n	800609e <USB_EPStartXfer+0xc42>
 8006054:	463b      	mov	r3, r7
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	785b      	ldrb	r3, [r3, #1]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d11f      	bne.n	800609e <USB_EPStartXfer+0xc42>
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006066:	1d3b      	adds	r3, r7, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606e:	b29b      	uxth	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006076:	4413      	add	r3, r2
 8006078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	011a      	lsls	r2, r3, #4
 8006084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006088:	4413      	add	r3, r2
 800608a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800608e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	b29a      	uxth	r2, r3
 8006098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800609c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800609e:	463b      	mov	r3, r7
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	891b      	ldrh	r3, [r3, #8]
 80060a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060a8:	463b      	mov	r3, r7
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6959      	ldr	r1, [r3, #20]
 80060ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060b8:	1d38      	adds	r0, r7, #4
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	f000 fe03 	bl	8006cc6 <USB_WritePMA>
          ep->xfer_buff += len;
 80060c0:	463b      	mov	r3, r7
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695a      	ldr	r2, [r3, #20]
 80060c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ca:	441a      	add	r2, r3
 80060cc:	463b      	mov	r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80060d2:	463b      	mov	r3, r7
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d909      	bls.n	80060f6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80060e2:	463b      	mov	r3, r7
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ec:	1ad2      	subs	r2, r2, r3
 80060ee:	463b      	mov	r3, r7
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	621a      	str	r2, [r3, #32]
 80060f4:	e008      	b.n	8006108 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80060f6:	463b      	mov	r3, r7
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006100:	463b      	mov	r3, r7
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2200      	movs	r2, #0
 8006106:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80ab 	beq.w	8006268 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006112:	1d3b      	adds	r3, r7, #4
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800611a:	463b      	mov	r3, r7
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d16f      	bne.n	8006204 <USB_EPStartXfer+0xda8>
 8006124:	1d3b      	adds	r3, r7, #4
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800612c:	1d3b      	adds	r3, r7, #4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006134:	b29b      	uxth	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800613c:	4413      	add	r3, r2
 800613e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	011a      	lsls	r2, r3, #4
 800614a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800614e:	4413      	add	r3, r2
 8006150:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d116      	bne.n	800618e <USB_EPStartXfer+0xd32>
 8006160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800616c:	b29a      	uxth	r2, r3
 800616e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006172:	801a      	strh	r2, [r3, #0]
 8006174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006184:	b29a      	uxth	r2, r3
 8006186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e05b      	b.n	8006246 <USB_EPStartXfer+0xdea>
 800618e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006192:	2b3e      	cmp	r3, #62	; 0x3e
 8006194:	d818      	bhi.n	80061c8 <USB_EPStartXfer+0xd6c>
 8006196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <USB_EPStartXfer+0xd5a>
 80061ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b0:	3301      	adds	r3, #1
 80061b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	029b      	lsls	r3, r3, #10
 80061be:	b29a      	uxth	r2, r3
 80061c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	e03e      	b.n	8006246 <USB_EPStartXfer+0xdea>
 80061c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <USB_EPStartXfer+0xd8c>
 80061de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e2:	3b01      	subs	r3, #1
 80061e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	029b      	lsls	r3, r3, #10
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	e020      	b.n	8006246 <USB_EPStartXfer+0xdea>
 8006204:	463b      	mov	r3, r7
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d11b      	bne.n	8006246 <USB_EPStartXfer+0xdea>
 800620e:	1d3b      	adds	r3, r7, #4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800621e:	4413      	add	r3, r2
 8006220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006224:	463b      	mov	r3, r7
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	011a      	lsls	r2, r3, #4
 800622c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006230:	4413      	add	r3, r2
 8006232:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800623a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623e:	b29a      	uxth	r2, r3
 8006240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006244:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006246:	463b      	mov	r3, r7
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	895b      	ldrh	r3, [r3, #10]
 800624c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006250:	463b      	mov	r3, r7
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6959      	ldr	r1, [r3, #20]
 8006256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625a:	b29b      	uxth	r3, r3
 800625c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006260:	1d38      	adds	r0, r7, #4
 8006262:	6800      	ldr	r0, [r0, #0]
 8006264:	f000 fd2f 	bl	8006cc6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006268:	1d3b      	adds	r3, r7, #4
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29b      	uxth	r3, r3
 800627a:	f107 020a 	add.w	r2, r7, #10
 800627e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006286:	8013      	strh	r3, [r2, #0]
 8006288:	f107 030a 	add.w	r3, r7, #10
 800628c:	f107 020a 	add.w	r2, r7, #10
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	f082 0210 	eor.w	r2, r2, #16
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	f107 030a 	add.w	r3, r7, #10
 800629c:	f107 020a 	add.w	r2, r7, #10
 80062a0:	8812      	ldrh	r2, [r2, #0]
 80062a2:	f082 0220 	eor.w	r2, r2, #32
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	463b      	mov	r3, r7
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	f107 030a 	add.w	r3, r7, #10
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	8013      	strh	r3, [r2, #0]
 80062d0:	e3b5      	b.n	8006a3e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	7b1b      	ldrb	r3, [r3, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f040 8090 	bne.w	80063fe <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80062de:	463b      	mov	r3, r7
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	463b      	mov	r3, r7
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d90e      	bls.n	800630c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80062ee:	463b      	mov	r3, r7
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80062f8:	463b      	mov	r3, r7
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006302:	1ad2      	subs	r2, r2, r3
 8006304:	463b      	mov	r3, r7
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	619a      	str	r2, [r3, #24]
 800630a:	e008      	b.n	800631e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800630c:	463b      	mov	r3, r7
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006316:	463b      	mov	r3, r7
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800631e:	1d3b      	adds	r3, r7, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006336:	4413      	add	r3, r2
 8006338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	011a      	lsls	r2, r3, #4
 8006344:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006348:	4413      	add	r3, r2
 800634a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800634e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d116      	bne.n	8006388 <USB_EPStartXfer+0xf2c>
 800635a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006366:	b29a      	uxth	r2, r3
 8006368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800636c:	801a      	strh	r2, [r3, #0]
 800636e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800637a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637e:	b29a      	uxth	r2, r3
 8006380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	e32c      	b.n	80069e2 <USB_EPStartXfer+0x1586>
 8006388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638c:	2b3e      	cmp	r3, #62	; 0x3e
 800638e:	d818      	bhi.n	80063c2 <USB_EPStartXfer+0xf66>
 8006390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800639a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d004      	beq.n	80063b0 <USB_EPStartXfer+0xf54>
 80063a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063aa:	3301      	adds	r3, #1
 80063ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80063b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	029b      	lsls	r3, r3, #10
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	e30f      	b.n	80069e2 <USB_EPStartXfer+0x1586>
 80063c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80063cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <USB_EPStartXfer+0xf86>
 80063d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063dc:	3b01      	subs	r3, #1
 80063de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80063e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	029b      	lsls	r3, r3, #10
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063fa:	801a      	strh	r2, [r3, #0]
 80063fc:	e2f1      	b.n	80069e2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	78db      	ldrb	r3, [r3, #3]
 8006404:	2b02      	cmp	r3, #2
 8006406:	f040 818f 	bne.w	8006728 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d175      	bne.n	8006500 <USB_EPStartXfer+0x10a4>
 8006414:	1d3b      	adds	r3, r7, #4
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800641c:	1d3b      	adds	r3, r7, #4
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006424:	b29b      	uxth	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800642c:	4413      	add	r3, r2
 800642e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	011a      	lsls	r2, r3, #4
 800643a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800643e:	4413      	add	r3, r2
 8006440:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d116      	bne.n	8006480 <USB_EPStartXfer+0x1024>
 8006452:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800645e:	b29a      	uxth	r2, r3
 8006460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006476:	b29a      	uxth	r2, r3
 8006478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e065      	b.n	800654c <USB_EPStartXfer+0x10f0>
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b3e      	cmp	r3, #62	; 0x3e
 8006488:	d81a      	bhi.n	80064c0 <USB_EPStartXfer+0x1064>
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <USB_EPStartXfer+0x1052>
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a8:	3301      	adds	r3, #1
 80064aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e045      	b.n	800654c <USB_EPStartXfer+0x10f0>
 80064c0:	463b      	mov	r3, r7
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 031f 	and.w	r3, r3, #31
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <USB_EPStartXfer+0x1088>
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064de:	3b01      	subs	r3, #1
 80064e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	029b      	lsls	r3, r3, #10
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e025      	b.n	800654c <USB_EPStartXfer+0x10f0>
 8006500:	463b      	mov	r3, r7
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d120      	bne.n	800654c <USB_EPStartXfer+0x10f0>
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651a:	b29b      	uxth	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006522:	4413      	add	r3, r2
 8006524:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006528:	463b      	mov	r3, r7
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	011a      	lsls	r2, r3, #4
 8006530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006534:	4413      	add	r3, r2
 8006536:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800653a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	b29a      	uxth	r2, r3
 8006546:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006554:	463b      	mov	r3, r7
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d175      	bne.n	800664a <USB_EPStartXfer+0x11ee>
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656e:	b29b      	uxth	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006576:	4413      	add	r3, r2
 8006578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800657c:	463b      	mov	r3, r7
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	011a      	lsls	r2, r3, #4
 8006584:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006588:	4413      	add	r3, r2
 800658a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800658e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006592:	463b      	mov	r3, r7
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d116      	bne.n	80065ca <USB_EPStartXfer+0x116e>
 800659c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ae:	801a      	strh	r2, [r3, #0]
 80065b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	e061      	b.n	800668e <USB_EPStartXfer+0x1232>
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b3e      	cmp	r3, #62	; 0x3e
 80065d2:	d81a      	bhi.n	800660a <USB_EPStartXfer+0x11ae>
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <USB_EPStartXfer+0x119c>
 80065ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065f2:	3301      	adds	r3, #1
 80065f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	029b      	lsls	r3, r3, #10
 8006600:	b29a      	uxth	r2, r3
 8006602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006606:	801a      	strh	r2, [r3, #0]
 8006608:	e041      	b.n	800668e <USB_EPStartXfer+0x1232>
 800660a:	463b      	mov	r3, r7
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006616:	463b      	mov	r3, r7
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	2b00      	cmp	r3, #0
 8006622:	d104      	bne.n	800662e <USB_EPStartXfer+0x11d2>
 8006624:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006628:	3b01      	subs	r3, #1
 800662a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800662e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006632:	b29b      	uxth	r3, r3
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	b29b      	uxth	r3, r3
 8006638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006640:	b29a      	uxth	r2, r3
 8006642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	e021      	b.n	800668e <USB_EPStartXfer+0x1232>
 800664a:	463b      	mov	r3, r7
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	785b      	ldrb	r3, [r3, #1]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d11c      	bne.n	800668e <USB_EPStartXfer+0x1232>
 8006654:	1d3b      	adds	r3, r7, #4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665c:	b29b      	uxth	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006664:	4413      	add	r3, r2
 8006666:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800666a:	463b      	mov	r3, r7
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	011a      	lsls	r2, r3, #4
 8006672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006676:	4413      	add	r3, r2
 8006678:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800667c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006680:	463b      	mov	r3, r7
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	b29a      	uxth	r2, r3
 8006688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800668c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800668e:	463b      	mov	r3, r7
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 81a4 	beq.w	80069e2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800669a:	1d3b      	adds	r3, r7, #4
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	463b      	mov	r3, r7
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066ae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80066b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <USB_EPStartXfer+0x126a>
 80066ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10d      	bne.n	80066e2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80066ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 8187 	bne.w	80069e2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80066d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f040 8180 	bne.w	80069e2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80066e2:	1d3b      	adds	r3, r7, #4
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	463b      	mov	r3, r7
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006700:	1d3b      	adds	r3, r7, #4
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	441a      	add	r2, r3
 800670e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006722:	b29b      	uxth	r3, r3
 8006724:	8013      	strh	r3, [r2, #0]
 8006726:	e15c      	b.n	80069e2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006728:	463b      	mov	r3, r7
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	78db      	ldrb	r3, [r3, #3]
 800672e:	2b01      	cmp	r3, #1
 8006730:	f040 8155 	bne.w	80069de <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006734:	463b      	mov	r3, r7
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	463b      	mov	r3, r7
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	429a      	cmp	r2, r3
 8006742:	d90e      	bls.n	8006762 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006744:	463b      	mov	r3, r7
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800674e:	463b      	mov	r3, r7
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006758:	1ad2      	subs	r2, r2, r3
 800675a:	463b      	mov	r3, r7
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	619a      	str	r2, [r3, #24]
 8006760:	e008      	b.n	8006774 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006762:	463b      	mov	r3, r7
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800676c:	463b      	mov	r3, r7
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2200      	movs	r2, #0
 8006772:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006774:	463b      	mov	r3, r7
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d16f      	bne.n	800685e <USB_EPStartXfer+0x1402>
 800677e:	1d3b      	adds	r3, r7, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006786:	1d3b      	adds	r3, r7, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678e:	b29b      	uxth	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006796:	4413      	add	r3, r2
 8006798:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800679c:	463b      	mov	r3, r7
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	011a      	lsls	r2, r3, #4
 80067a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067a8:	4413      	add	r3, r2
 80067aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d116      	bne.n	80067e8 <USB_EPStartXfer+0x138c>
 80067ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e05f      	b.n	80068a8 <USB_EPStartXfer+0x144c>
 80067e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ec:	2b3e      	cmp	r3, #62	; 0x3e
 80067ee:	d818      	bhi.n	8006822 <USB_EPStartXfer+0x13c6>
 80067f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <USB_EPStartXfer+0x13b4>
 8006806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680a:	3301      	adds	r3, #1
 800680c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006814:	b29b      	uxth	r3, r3
 8006816:	029b      	lsls	r3, r3, #10
 8006818:	b29a      	uxth	r2, r3
 800681a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e042      	b.n	80068a8 <USB_EPStartXfer+0x144c>
 8006822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800682c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006830:	f003 031f 	and.w	r3, r3, #31
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <USB_EPStartXfer+0x13e6>
 8006838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683c:	3b01      	subs	r3, #1
 800683e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006846:	b29b      	uxth	r3, r3
 8006848:	029b      	lsls	r3, r3, #10
 800684a:	b29b      	uxth	r3, r3
 800684c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006854:	b29a      	uxth	r2, r3
 8006856:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800685a:	801a      	strh	r2, [r3, #0]
 800685c:	e024      	b.n	80068a8 <USB_EPStartXfer+0x144c>
 800685e:	463b      	mov	r3, r7
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	785b      	ldrb	r3, [r3, #1]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d11f      	bne.n	80068a8 <USB_EPStartXfer+0x144c>
 8006868:	1d3b      	adds	r3, r7, #4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006870:	1d3b      	adds	r3, r7, #4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006878:	b29b      	uxth	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006880:	4413      	add	r3, r2
 8006882:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006886:	463b      	mov	r3, r7
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	011a      	lsls	r2, r3, #4
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006892:	4413      	add	r3, r2
 8006894:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006898:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800689c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	1d3b      	adds	r3, r7, #4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068b0:	463b      	mov	r3, r7
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d16f      	bne.n	800699a <USB_EPStartXfer+0x153e>
 80068ba:	1d3b      	adds	r3, r7, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d2:	4413      	add	r3, r2
 80068d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068d8:	463b      	mov	r3, r7
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	011a      	lsls	r2, r3, #4
 80068e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068e4:	4413      	add	r3, r2
 80068e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d116      	bne.n	8006924 <USB_EPStartXfer+0x14c8>
 80068f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691a:	b29a      	uxth	r2, r3
 800691c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e05e      	b.n	80069e2 <USB_EPStartXfer+0x1586>
 8006924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006928:	2b3e      	cmp	r3, #62	; 0x3e
 800692a:	d818      	bhi.n	800695e <USB_EPStartXfer+0x1502>
 800692c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <USB_EPStartXfer+0x14f0>
 8006942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006946:	3301      	adds	r3, #1
 8006948:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800694c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006950:	b29b      	uxth	r3, r3
 8006952:	029b      	lsls	r3, r3, #10
 8006954:	b29a      	uxth	r2, r3
 8006956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800695a:	801a      	strh	r2, [r3, #0]
 800695c:	e041      	b.n	80069e2 <USB_EPStartXfer+0x1586>
 800695e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <USB_EPStartXfer+0x1522>
 8006974:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006978:	3b01      	subs	r3, #1
 800697a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800697e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006982:	b29b      	uxth	r3, r3
 8006984:	029b      	lsls	r3, r3, #10
 8006986:	b29b      	uxth	r3, r3
 8006988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800698c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006990:	b29a      	uxth	r2, r3
 8006992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	e023      	b.n	80069e2 <USB_EPStartXfer+0x1586>
 800699a:	463b      	mov	r3, r7
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d11e      	bne.n	80069e2 <USB_EPStartXfer+0x1586>
 80069a4:	1d3b      	adds	r3, r7, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b4:	4413      	add	r3, r2
 80069b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ba:	463b      	mov	r3, r7
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	011a      	lsls	r2, r3, #4
 80069c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c6:	4413      	add	r3, r2
 80069c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e001      	b.n	80069e2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e02e      	b.n	8006a40 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069e2:	1d3b      	adds	r3, r7, #4
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	463b      	mov	r3, r7
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a08:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a14:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a18:	1d3b      	adds	r3, r7, #4
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	441a      	add	r2, r3
 8006a26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d020      	beq.n	8006a9e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a72:	81bb      	strh	r3, [r7, #12]
 8006a74:	89bb      	ldrh	r3, [r7, #12]
 8006a76:	f083 0310 	eor.w	r3, r3, #16
 8006a7a:	81bb      	strh	r3, [r7, #12]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	89bb      	ldrh	r3, [r7, #12]
 8006a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]
 8006a9c:	e01f      	b.n	8006ade <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab4:	81fb      	strh	r3, [r7, #14]
 8006ab6:	89fb      	ldrh	r3, [r7, #14]
 8006ab8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006abc:	81fb      	strh	r3, [r7, #14]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	89fb      	ldrh	r3, [r7, #14]
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr

08006aea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	7b1b      	ldrb	r3, [r3, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f040 809d 	bne.w	8006c38 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d04c      	beq.n	8006ba0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	823b      	strh	r3, [r7, #16]
 8006b14:	8a3b      	ldrh	r3, [r7, #16]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01b      	beq.n	8006b56 <USB_EPClearStall+0x6c>
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b34:	81fb      	strh	r3, [r7, #14]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	441a      	add	r2, r3
 8006b40:	89fb      	ldrh	r3, [r7, #14]
 8006b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	78db      	ldrb	r3, [r3, #3]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d06c      	beq.n	8006c38 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b74:	81bb      	strh	r3, [r7, #12]
 8006b76:	89bb      	ldrh	r3, [r7, #12]
 8006b78:	f083 0320 	eor.w	r3, r3, #32
 8006b7c:	81bb      	strh	r3, [r7, #12]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	89bb      	ldrh	r3, [r7, #12]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]
 8006b9e:	e04b      	b.n	8006c38 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	82fb      	strh	r3, [r7, #22]
 8006bae:	8afb      	ldrh	r3, [r7, #22]
 8006bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01b      	beq.n	8006bf0 <USB_EPClearStall+0x106>
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	82bb      	strh	r3, [r7, #20]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	441a      	add	r2, r3
 8006bda:	8abb      	ldrh	r3, [r7, #20]
 8006bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	827b      	strh	r3, [r7, #18]
 8006c08:	8a7b      	ldrh	r3, [r7, #18]
 8006c0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c0e:	827b      	strh	r3, [r7, #18]
 8006c10:	8a7b      	ldrh	r3, [r7, #18]
 8006c12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c16:	827b      	strh	r3, [r7, #18]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	8a7b      	ldrh	r3, [r7, #18]
 8006c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr

08006c44 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2280      	movs	r2, #128	; 0x80
 8006c5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr

08006c6a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr

08006c92 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr

08006cc6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b08d      	sub	sp, #52	; 0x34
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	80fb      	strh	r3, [r7, #6]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006cdc:	88bb      	ldrh	r3, [r7, #4]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	085b      	lsrs	r3, r3, #1
 8006ce2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	005a      	lsls	r2, r3, #1
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfe:	e01e      	b.n	8006d3e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	3301      	adds	r3, #1
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	461a      	mov	r2, r3
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	3302      	adds	r3, #2
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	3302      	adds	r3, #2
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	3301      	adds	r3, #1
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1dd      	bne.n	8006d00 <USB_WritePMA+0x3a>
  }
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	3734      	adds	r7, #52	; 0x34
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr

08006d50 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b08b      	sub	sp, #44	; 0x2c
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	460b      	mov	r3, r1
 8006d60:	80fb      	strh	r3, [r7, #6]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d66:	88bb      	ldrh	r3, [r7, #4]
 8006d68:	085b      	lsrs	r3, r3, #1
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	005a      	lsls	r2, r3, #1
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d82:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
 8006d88:	e01b      	b.n	8006dc2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	3302      	adds	r3, #2
 8006d96:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	3301      	adds	r3, #1
 8006da4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	3302      	adds	r3, #2
 8006dba:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e0      	bne.n	8006d8a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006dc8:	88bb      	ldrh	r3, [r7, #4]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	701a      	strb	r2, [r3, #0]
  }
}
 8006de4:	bf00      	nop
 8006de6:	372c      	adds	r7, #44	; 0x2c
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7c1b      	ldrb	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d115      	bne.n	8006e32 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	2181      	movs	r1, #129	; 0x81
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 fe99 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e1e:	2202      	movs	r2, #2
 8006e20:	2101      	movs	r1, #1
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 fe8f 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006e30:	e012      	b.n	8006e58 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e32:	2340      	movs	r3, #64	; 0x40
 8006e34:	2202      	movs	r2, #2
 8006e36:	2181      	movs	r1, #129	; 0x81
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fe84 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e44:	2340      	movs	r3, #64	; 0x40
 8006e46:	2202      	movs	r2, #2
 8006e48:	2101      	movs	r1, #1
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fe7b 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e58:	2308      	movs	r3, #8
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	2182      	movs	r1, #130	; 0x82
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fe71 	bl	8008b46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e6a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e6e:	f001 ff91 	bl	8008d94 <USBD_static_malloc>
 8006e72:	4602      	mov	r2, r0
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
 8006e88:	e026      	b.n	8006ed8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7c1b      	ldrb	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d109      	bne.n	8006ec8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 ff31 	bl	8008d28 <USBD_LL_PrepareReceive>
 8006ec6:	e007      	b.n	8006ed8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ece:	2340      	movs	r3, #64	; 0x40
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 ff28 	bl	8008d28 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ef2:	2181      	movs	r1, #129	; 0x81
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fe4c 	bl	8008b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f00:	2101      	movs	r1, #1
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 fe45 	bl	8008b92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f10:	2182      	movs	r1, #130	; 0x82
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fe3d 	bl	8008b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00e      	beq.n	8006f46 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 ff37 	bl	8008dac <USBD_static_free>
    pdev->pClassData = NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d039      	beq.n	8006fee <USBD_CDC_Setup+0x9e>
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	d17f      	bne.n	800707e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	88db      	ldrh	r3, [r3, #6]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d029      	beq.n	8006fda <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	b25b      	sxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	da11      	bge.n	8006fb4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f9c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	88d2      	ldrh	r2, [r2, #6]
 8006fa2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fa4:	6939      	ldr	r1, [r7, #16]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	88db      	ldrh	r3, [r3, #6]
 8006faa:	461a      	mov	r2, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 fa0a 	bl	80083c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006fb2:	e06b      	b.n	800708c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	785a      	ldrb	r2, [r3, #1]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	88db      	ldrh	r3, [r3, #6]
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fca:	6939      	ldr	r1, [r7, #16]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	88db      	ldrh	r3, [r3, #6]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fa25 	bl	8008422 <USBD_CtlPrepareRx>
      break;
 8006fd8:	e058      	b.n	800708c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	7850      	ldrb	r0, [r2, #1]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	4798      	blx	r3
      break;
 8006fec:	e04e      	b.n	800708c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	785b      	ldrb	r3, [r3, #1]
 8006ff2:	2b0b      	cmp	r3, #11
 8006ff4:	d02e      	beq.n	8007054 <USBD_CDC_Setup+0x104>
 8006ff6:	2b0b      	cmp	r3, #11
 8006ff8:	dc38      	bgt.n	800706c <USBD_CDC_Setup+0x11c>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <USBD_CDC_Setup+0xb4>
 8006ffe:	2b0a      	cmp	r3, #10
 8007000:	d014      	beq.n	800702c <USBD_CDC_Setup+0xdc>
 8007002:	e033      	b.n	800706c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700a:	2b03      	cmp	r3, #3
 800700c:	d107      	bne.n	800701e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800700e:	f107 030c 	add.w	r3, r7, #12
 8007012:	2202      	movs	r2, #2
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f9d5 	bl	80083c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800701c:	e02e      	b.n	800707c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f001 f966 	bl	80082f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007026:	2302      	movs	r3, #2
 8007028:	75fb      	strb	r3, [r7, #23]
          break;
 800702a:	e027      	b.n	800707c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007032:	2b03      	cmp	r3, #3
 8007034:	d107      	bne.n	8007046 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007036:	f107 030f 	add.w	r3, r7, #15
 800703a:	2201      	movs	r2, #1
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 f9c1 	bl	80083c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007044:	e01a      	b.n	800707c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 f952 	bl	80082f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800704e:	2302      	movs	r3, #2
 8007050:	75fb      	strb	r3, [r7, #23]
          break;
 8007052:	e013      	b.n	800707c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705a:	2b03      	cmp	r3, #3
 800705c:	d00d      	beq.n	800707a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 f946 	bl	80082f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007066:	2302      	movs	r3, #2
 8007068:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800706a:	e006      	b.n	800707a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 f93f 	bl	80082f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007074:	2302      	movs	r3, #2
 8007076:	75fb      	strb	r3, [r7, #23]
          break;
 8007078:	e000      	b.n	800707c <USBD_CDC_Setup+0x12c>
          break;
 800707a:	bf00      	nop
      }
      break;
 800707c:	e006      	b.n	800708c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f936 	bl	80082f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007086:	2302      	movs	r3, #2
 8007088:	75fb      	strb	r3, [r7, #23]
      break;
 800708a:	bf00      	nop
  }

  return ret;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d03a      	beq.n	8007132 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070bc:	78fa      	ldrb	r2, [r7, #3]
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	331c      	adds	r3, #28
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d029      	beq.n	8007126 <USBD_CDC_DataIn+0x90>
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	331c      	adds	r3, #28
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	78f9      	ldrb	r1, [r7, #3]
 80070e6:	68b8      	ldr	r0, [r7, #8]
 80070e8:	460b      	mov	r3, r1
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	4403      	add	r3, r0
 80070f2:	3338      	adds	r3, #56	; 0x38
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80070fa:	fb03 f301 	mul.w	r3, r3, r1
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d110      	bne.n	8007126 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007104:	78fa      	ldrb	r2, [r7, #3]
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	4613      	mov	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	440b      	add	r3, r1
 8007112:	331c      	adds	r3, #28
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007118:	78f9      	ldrb	r1, [r7, #3]
 800711a:	2300      	movs	r3, #0
 800711c:	2200      	movs	r2, #0
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 fddf 	bl	8008ce2 <USBD_LL_Transmit>
 8007124:	e003      	b.n	800712e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	e000      	b.n	8007134 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007132:	2302      	movs	r3, #2
  }
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fe0a 	bl	8008d6e <USBD_LL_GetRxDataSize>
 800715a:	4602      	mov	r2, r0
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00d      	beq.n	8007188 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007180:	4611      	mov	r1, r2
 8007182:	4798      	blx	r3

    return USBD_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	e000      	b.n	800718a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007188:	2302      	movs	r3, #2
  }
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d015      	beq.n	80071d8 <USBD_CDC_EP0_RxReady+0x46>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071b2:	2bff      	cmp	r3, #255	; 0xff
 80071b4:	d010      	beq.n	80071d8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80071c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071cc:	b292      	uxth	r2, r2
 80071ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	22ff      	movs	r2, #255	; 0xff
 80071d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2243      	movs	r2, #67	; 0x43
 80071f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80071f2:	4b03      	ldr	r3, [pc, #12]	; (8007200 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	200000a4 	.word	0x200000a4

08007204 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2243      	movs	r2, #67	; 0x43
 8007210:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007212:	4b03      	ldr	r3, [pc, #12]	; (8007220 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20000060 	.word	0x20000060

08007224 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2243      	movs	r2, #67	; 0x43
 8007230:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007232:	4b03      	ldr	r3, [pc, #12]	; (8007240 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	200000e8 	.word	0x200000e8

08007244 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	220a      	movs	r2, #10
 8007250:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007252:	4b03      	ldr	r3, [pc, #12]	; (8007260 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	2000001c 	.word	0x2000001c

08007264 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800726e:	2302      	movs	r3, #2
 8007270:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr

080072c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr

080072e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d01c      	beq.n	800733c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007308:	2b00      	cmp	r3, #0
 800730a:	d115      	bne.n	8007338 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800732a:	b29b      	uxth	r3, r3
 800732c:	2181      	movs	r1, #129	; 0x81
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 fcd7 	bl	8008ce2 <USBD_LL_Transmit>

      return USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	e002      	b.n	800733e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800733c:	2302      	movs	r3, #2
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007354:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d017      	beq.n	8007390 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7c1b      	ldrb	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800736e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007372:	2101      	movs	r1, #1
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 fcd7 	bl	8008d28 <USBD_LL_PrepareReceive>
 800737a:	e007      	b.n	800738c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007382:	2340      	movs	r3, #64	; 0x40
 8007384:	2101      	movs	r1, #1
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 fcce 	bl	8008d28 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	e000      	b.n	8007392 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007390:	2302      	movs	r3, #2
  }
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	4613      	mov	r3, r2
 80073a6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073ae:	2302      	movs	r3, #2
 80073b0:	e01a      	b.n	80073e8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	79fa      	ldrb	r2, [r7, #7]
 80073de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f001 fb3b 	bl	8008a5c <USBD_LL_Init>

  return USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d006      	beq.n	8007412 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]
 8007410:	e001      	b.n	8007416 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007412:	2302      	movs	r3, #2
 8007414:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007416:	7bfb      	ldrb	r3, [r7, #15]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr

08007422 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 fb70 	bl	8008b10 <USBD_LL_Start>

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr

0800744e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800745a:	2302      	movs	r3, #2
 800745c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	4611      	mov	r1, r2
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	4611      	mov	r1, r2
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3

  return USBD_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fed8 	bl	800827a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074d8:	461a      	mov	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d016      	beq.n	800751c <USBD_LL_SetupStage+0x6a>
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d81c      	bhi.n	800752c <USBD_LL_SetupStage+0x7a>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <USBD_LL_SetupStage+0x4a>
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d008      	beq.n	800750c <USBD_LL_SetupStage+0x5a>
 80074fa:	e017      	b.n	800752c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f9cb 	bl	80078a0 <USBD_StdDevReq>
      break;
 800750a:	e01a      	b.n	8007542 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fa2d 	bl	8007974 <USBD_StdItfReq>
      break;
 800751a:	e012      	b.n	8007542 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fa6d 	bl	8007a04 <USBD_StdEPReq>
      break;
 800752a:	e00a      	b.n	8007542 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007532:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007536:	b2db      	uxtb	r3, r3
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fb48 	bl	8008bd0 <USBD_LL_StallEP>
      break;
 8007540:	bf00      	nop
  }

  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	460b      	mov	r3, r1
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800755a:	7afb      	ldrb	r3, [r7, #11]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d14b      	bne.n	80075f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007566:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800756e:	2b03      	cmp	r3, #3
 8007570:	d134      	bne.n	80075dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	429a      	cmp	r2, r3
 800757c:	d919      	bls.n	80075b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	1ad2      	subs	r2, r2, r3
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007594:	429a      	cmp	r2, r3
 8007596:	d203      	bcs.n	80075a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800759c:	b29b      	uxth	r3, r3
 800759e:	e002      	b.n	80075a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 ff57 	bl	800845e <USBD_CtlContinueRx>
 80075b0:	e038      	b.n	8007624 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d105      	bne.n	80075d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 ff54 	bl	8008482 <USBD_CtlSendStatus>
 80075da:	e023      	b.n	8007624 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	d11e      	bne.n	8007624 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80075ee:	2100      	movs	r1, #0
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f001 faed 	bl	8008bd0 <USBD_LL_StallEP>
 80075f6:	e015      	b.n	8007624 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00d      	beq.n	8007620 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800760a:	2b03      	cmp	r3, #3
 800760c:	d108      	bne.n	8007620 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	7afa      	ldrb	r2, [r7, #11]
 8007618:	4611      	mov	r1, r2
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	4798      	blx	r3
 800761e:	e001      	b.n	8007624 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007620:	2302      	movs	r3, #2
 8007622:	e000      	b.n	8007626 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b086      	sub	sp, #24
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	460b      	mov	r3, r1
 8007638:	607a      	str	r2, [r7, #4]
 800763a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d17f      	bne.n	8007742 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3314      	adds	r3, #20
 8007646:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800764e:	2b02      	cmp	r3, #2
 8007650:	d15c      	bne.n	800770c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	429a      	cmp	r2, r3
 800765c:	d915      	bls.n	800768a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	1ad2      	subs	r2, r2, r3
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	b29b      	uxth	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fec1 	bl	80083fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800767c:	2300      	movs	r3, #0
 800767e:	2200      	movs	r2, #0
 8007680:	2100      	movs	r1, #0
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f001 fb50 	bl	8008d28 <USBD_LL_PrepareReceive>
 8007688:	e04e      	b.n	8007728 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	6912      	ldr	r2, [r2, #16]
 8007692:	fbb3 f1f2 	udiv	r1, r3, r2
 8007696:	fb02 f201 	mul.w	r2, r2, r1
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d11c      	bne.n	80076da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d316      	bcc.n	80076da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d20f      	bcs.n	80076da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076ba:	2200      	movs	r2, #0
 80076bc:	2100      	movs	r1, #0
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fe9d 	bl	80083fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076cc:	2300      	movs	r3, #0
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f001 fb28 	bl	8008d28 <USBD_LL_PrepareReceive>
 80076d8:	e026      	b.n	8007728 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d105      	bne.n	80076fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076fc:	2180      	movs	r1, #128	; 0x80
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f001 fa66 	bl	8008bd0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 fecf 	bl	80084a8 <USBD_CtlReceiveStatus>
 800770a:	e00d      	b.n	8007728 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007712:	2b04      	cmp	r3, #4
 8007714:	d004      	beq.n	8007720 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007720:	2180      	movs	r1, #128	; 0x80
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f001 fa54 	bl	8008bd0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800772e:	2b01      	cmp	r3, #1
 8007730:	d11d      	bne.n	800776e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff fe81 	bl	800743a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007740:	e015      	b.n	800776e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007754:	2b03      	cmp	r3, #3
 8007756:	d108      	bne.n	800776a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	7afa      	ldrb	r2, [r7, #11]
 8007762:	4611      	mov	r1, r2
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	4798      	blx	r3
 8007768:	e001      	b.n	800776e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800776a:	2302      	movs	r3, #2
 800776c:	e000      	b.n	8007770 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	2200      	movs	r2, #0
 8007784:	2100      	movs	r1, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 f9dd 	bl	8008b46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2240      	movs	r2, #64	; 0x40
 8007798:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800779c:	2340      	movs	r3, #64	; 0x40
 800779e:	2200      	movs	r2, #0
 80077a0:	2180      	movs	r1, #128	; 0x80
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f9cf 	bl	8008b46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2240      	movs	r2, #64	; 0x40
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d009      	beq.n	80077f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6852      	ldr	r2, [r2, #4]
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	4611      	mov	r1, r2
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
  }

  return USBD_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	78fa      	ldrb	r2, [r7, #3]
 800780a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr

08007818 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2204      	movs	r2, #4
 8007830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr

08007840 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784e:	2b04      	cmp	r3, #4
 8007850:	d105      	bne.n	800785e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	bc80      	pop	{r7}
 8007868:	4770      	bx	lr

0800786a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007878:	2b03      	cmp	r3, #3
 800787a:	d10b      	bne.n	8007894 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078b6:	2b40      	cmp	r3, #64	; 0x40
 80078b8:	d005      	beq.n	80078c6 <USBD_StdDevReq+0x26>
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d84f      	bhi.n	800795e <USBD_StdDevReq+0xbe>
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <USBD_StdDevReq+0x36>
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d14b      	bne.n	800795e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
      break;
 80078d4:	e048      	b.n	8007968 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	785b      	ldrb	r3, [r3, #1]
 80078da:	2b09      	cmp	r3, #9
 80078dc:	d839      	bhi.n	8007952 <USBD_StdDevReq+0xb2>
 80078de:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <USBD_StdDevReq+0x44>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007935 	.word	0x08007935
 80078e8:	08007949 	.word	0x08007949
 80078ec:	08007953 	.word	0x08007953
 80078f0:	0800793f 	.word	0x0800793f
 80078f4:	08007953 	.word	0x08007953
 80078f8:	08007917 	.word	0x08007917
 80078fc:	0800790d 	.word	0x0800790d
 8007900:	08007953 	.word	0x08007953
 8007904:	0800792b 	.word	0x0800792b
 8007908:	08007921 	.word	0x08007921
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f9dc 	bl	8007ccc <USBD_GetDescriptor>
          break;
 8007914:	e022      	b.n	800795c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fb3f 	bl	8007f9c <USBD_SetAddress>
          break;
 800791e:	e01d      	b.n	800795c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fb7e 	bl	8008024 <USBD_SetConfig>
          break;
 8007928:	e018      	b.n	800795c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fc07 	bl	8008140 <USBD_GetConfig>
          break;
 8007932:	e013      	b.n	800795c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fc37 	bl	80081aa <USBD_GetStatus>
          break;
 800793c:	e00e      	b.n	800795c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fc65 	bl	8008210 <USBD_SetFeature>
          break;
 8007946:	e009      	b.n	800795c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fc74 	bl	8008238 <USBD_ClrFeature>
          break;
 8007950:	e004      	b.n	800795c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fccc 	bl	80082f2 <USBD_CtlError>
          break;
 800795a:	bf00      	nop
      }
      break;
 800795c:	e004      	b.n	8007968 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fcc6 	bl	80082f2 <USBD_CtlError>
      break;
 8007966:	bf00      	nop
  }

  return ret;
 8007968:	7bfb      	ldrb	r3, [r7, #15]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop

08007974 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800798a:	2b40      	cmp	r3, #64	; 0x40
 800798c:	d005      	beq.n	800799a <USBD_StdItfReq+0x26>
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d82e      	bhi.n	80079f0 <USBD_StdItfReq+0x7c>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <USBD_StdItfReq+0x26>
 8007996:	2b20      	cmp	r3, #32
 8007998:	d12a      	bne.n	80079f0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a0:	3b01      	subs	r3, #1
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d81d      	bhi.n	80079e2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	889b      	ldrh	r3, [r3, #4]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d813      	bhi.n	80079d8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d110      	bne.n	80079ec <USBD_StdItfReq+0x78>
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10d      	bne.n	80079ec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fd56 	bl	8008482 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079d6:	e009      	b.n	80079ec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fc89 	bl	80082f2 <USBD_CtlError>
          break;
 80079e0:	e004      	b.n	80079ec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fc84 	bl	80082f2 <USBD_CtlError>
          break;
 80079ea:	e000      	b.n	80079ee <USBD_StdItfReq+0x7a>
          break;
 80079ec:	bf00      	nop
      }
      break;
 80079ee:	e004      	b.n	80079fa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fc7d 	bl	80082f2 <USBD_CtlError>
      break;
 80079f8:	bf00      	nop
  }

  return USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	889b      	ldrh	r3, [r3, #4]
 8007a16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d007      	beq.n	8007a34 <USBD_StdEPReq+0x30>
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	f200 8146 	bhi.w	8007cb6 <USBD_StdEPReq+0x2b2>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <USBD_StdEPReq+0x40>
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	f040 8141 	bne.w	8007cb6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	4798      	blx	r3
      break;
 8007a42:	e13d      	b.n	8007cc0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d10a      	bne.n	8007a66 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	e12d      	b.n	8007cc2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d007      	beq.n	8007a7e <USBD_StdEPReq+0x7a>
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	f300 811b 	bgt.w	8007caa <USBD_StdEPReq+0x2a6>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d072      	beq.n	8007b5e <USBD_StdEPReq+0x15a>
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d03a      	beq.n	8007af2 <USBD_StdEPReq+0xee>
 8007a7c:	e115      	b.n	8007caa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d002      	beq.n	8007a8e <USBD_StdEPReq+0x8a>
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d015      	beq.n	8007ab8 <USBD_StdEPReq+0xb4>
 8007a8c:	e02b      	b.n	8007ae6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <USBD_StdEPReq+0xaa>
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b80      	cmp	r3, #128	; 0x80
 8007a98:	d009      	beq.n	8007aae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 f896 	bl	8008bd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007aa4:	2180      	movs	r1, #128	; 0x80
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 f892 	bl	8008bd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007aac:	e020      	b.n	8007af0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fc1e 	bl	80082f2 <USBD_CtlError>
              break;
 8007ab6:	e01b      	b.n	8007af0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	885b      	ldrh	r3, [r3, #2]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10e      	bne.n	8007ade <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <USBD_StdEPReq+0xda>
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b80      	cmp	r3, #128	; 0x80
 8007aca:	d008      	beq.n	8007ade <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	88db      	ldrh	r3, [r3, #6]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 f879 	bl	8008bd0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fccf 	bl	8008482 <USBD_CtlSendStatus>

              break;
 8007ae4:	e004      	b.n	8007af0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fc02 	bl	80082f2 <USBD_CtlError>
              break;
 8007aee:	bf00      	nop
          }
          break;
 8007af0:	e0e0      	b.n	8007cb4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d002      	beq.n	8007b02 <USBD_StdEPReq+0xfe>
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d015      	beq.n	8007b2c <USBD_StdEPReq+0x128>
 8007b00:	e026      	b.n	8007b50 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00c      	beq.n	8007b22 <USBD_StdEPReq+0x11e>
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b80      	cmp	r3, #128	; 0x80
 8007b0c:	d009      	beq.n	8007b22 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 f85c 	bl	8008bd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b18:	2180      	movs	r1, #128	; 0x80
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f858 	bl	8008bd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b20:	e01c      	b.n	8007b5c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fbe4 	bl	80082f2 <USBD_CtlError>
              break;
 8007b2a:	e017      	b.n	8007b5c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	885b      	ldrh	r3, [r3, #2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d112      	bne.n	8007b5a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 f863 	bl	8008c0e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fc9a 	bl	8008482 <USBD_CtlSendStatus>
              }
              break;
 8007b4e:	e004      	b.n	8007b5a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fbcd 	bl	80082f2 <USBD_CtlError>
              break;
 8007b58:	e000      	b.n	8007b5c <USBD_StdEPReq+0x158>
              break;
 8007b5a:	bf00      	nop
          }
          break;
 8007b5c:	e0aa      	b.n	8007cb4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d002      	beq.n	8007b6e <USBD_StdEPReq+0x16a>
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d032      	beq.n	8007bd2 <USBD_StdEPReq+0x1ce>
 8007b6c:	e097      	b.n	8007c9e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d007      	beq.n	8007b84 <USBD_StdEPReq+0x180>
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b80      	cmp	r3, #128	; 0x80
 8007b78:	d004      	beq.n	8007b84 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fbb8 	bl	80082f2 <USBD_CtlError>
                break;
 8007b82:	e091      	b.n	8007ca8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	da0b      	bge.n	8007ba4 <USBD_StdEPReq+0x1a0>
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	3310      	adds	r3, #16
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	e00b      	b.n	8007bbc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	4413      	add	r3, r2
 8007bba:	3304      	adds	r3, #4
 8007bbc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fbfb 	bl	80083c6 <USBD_CtlSendData>
              break;
 8007bd0:	e06a      	b.n	8007ca8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	da11      	bge.n	8007bfe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	f003 020f 	and.w	r2, r3, #15
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	4613      	mov	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	440b      	add	r3, r1
 8007bec:	3318      	adds	r3, #24
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d117      	bne.n	8007c24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fb7b 	bl	80082f2 <USBD_CtlError>
                  break;
 8007bfc:	e054      	b.n	8007ca8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	f003 020f 	and.w	r2, r3, #15
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fb68 	bl	80082f2 <USBD_CtlError>
                  break;
 8007c22:	e041      	b.n	8007ca8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	da0b      	bge.n	8007c44 <USBD_StdEPReq+0x240>
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	3310      	adds	r3, #16
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	e00b      	b.n	8007c5c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	4413      	add	r3, r2
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <USBD_StdEPReq+0x266>
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b80      	cmp	r3, #128	; 0x80
 8007c68:	d103      	bne.n	8007c72 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	e00e      	b.n	8007c90 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 ffe8 	bl	8008c4c <USBD_LL_IsStallEP>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2201      	movs	r2, #1
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	e002      	b.n	8007c90 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2202      	movs	r2, #2
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb95 	bl	80083c6 <USBD_CtlSendData>
              break;
 8007c9c:	e004      	b.n	8007ca8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fb26 	bl	80082f2 <USBD_CtlError>
              break;
 8007ca6:	bf00      	nop
          }
          break;
 8007ca8:	e004      	b.n	8007cb4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fb20 	bl	80082f2 <USBD_CtlError>
          break;
 8007cb2:	bf00      	nop
      }
      break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fb1a 	bl	80082f2 <USBD_CtlError>
      break;
 8007cbe:	bf00      	nop
  }

  return ret;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	885b      	ldrh	r3, [r3, #2]
 8007ce6:	0a1b      	lsrs	r3, r3, #8
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	2b06      	cmp	r3, #6
 8007cee:	f200 8128 	bhi.w	8007f42 <USBD_GetDescriptor+0x276>
 8007cf2:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <USBD_GetDescriptor+0x2c>)
 8007cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf8:	08007d15 	.word	0x08007d15
 8007cfc:	08007d2d 	.word	0x08007d2d
 8007d00:	08007d6d 	.word	0x08007d6d
 8007d04:	08007f43 	.word	0x08007f43
 8007d08:	08007f43 	.word	0x08007f43
 8007d0c:	08007ee3 	.word	0x08007ee3
 8007d10:	08007f0f 	.word	0x08007f0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7c12      	ldrb	r2, [r2, #16]
 8007d20:	f107 0108 	add.w	r1, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
      break;
 8007d2a:	e112      	b.n	8007f52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7c1b      	ldrb	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10d      	bne.n	8007d50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	f107 0208 	add.w	r2, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d4e:	e100      	b.n	8007f52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	f107 0208 	add.w	r2, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	2202      	movs	r2, #2
 8007d68:	701a      	strb	r2, [r3, #0]
      break;
 8007d6a:	e0f2      	b.n	8007f52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	885b      	ldrh	r3, [r3, #2]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b05      	cmp	r3, #5
 8007d74:	f200 80ac 	bhi.w	8007ed0 <USBD_GetDescriptor+0x204>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <USBD_GetDescriptor+0xb4>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007d99 	.word	0x08007d99
 8007d84:	08007dcd 	.word	0x08007dcd
 8007d88:	08007e01 	.word	0x08007e01
 8007d8c:	08007e35 	.word	0x08007e35
 8007d90:	08007e69 	.word	0x08007e69
 8007d94:	08007e9d 	.word	0x08007e9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	7c12      	ldrb	r2, [r2, #16]
 8007db0:	f107 0108 	add.w	r1, r7, #8
 8007db4:	4610      	mov	r0, r2
 8007db6:	4798      	blx	r3
 8007db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dba:	e091      	b.n	8007ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa97 	bl	80082f2 <USBD_CtlError>
            err++;
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dca:	e089      	b.n	8007ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7c12      	ldrb	r2, [r2, #16]
 8007de4:	f107 0108 	add.w	r1, r7, #8
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dee:	e077      	b.n	8007ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa7d 	bl	80082f2 <USBD_CtlError>
            err++;
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfe:	e06f      	b.n	8007ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	7c12      	ldrb	r2, [r2, #16]
 8007e18:	f107 0108 	add.w	r1, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e22:	e05d      	b.n	8007ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fa63 	bl	80082f2 <USBD_CtlError>
            err++;
 8007e2c:	7afb      	ldrb	r3, [r7, #11]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	72fb      	strb	r3, [r7, #11]
          break;
 8007e32:	e055      	b.n	8007ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	7c12      	ldrb	r2, [r2, #16]
 8007e4c:	f107 0108 	add.w	r1, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e56:	e043      	b.n	8007ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa49 	bl	80082f2 <USBD_CtlError>
            err++;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	3301      	adds	r3, #1
 8007e64:	72fb      	strb	r3, [r7, #11]
          break;
 8007e66:	e03b      	b.n	8007ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	7c12      	ldrb	r2, [r2, #16]
 8007e80:	f107 0108 	add.w	r1, r7, #8
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8a:	e029      	b.n	8007ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa2f 	bl	80082f2 <USBD_CtlError>
            err++;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	3301      	adds	r3, #1
 8007e98:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9a:	e021      	b.n	8007ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7c12      	ldrb	r2, [r2, #16]
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ebe:	e00f      	b.n	8007ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa15 	bl	80082f2 <USBD_CtlError>
            err++;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ece:	e007      	b.n	8007ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa0d 	bl	80082f2 <USBD_CtlError>
          err++;
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	3301      	adds	r3, #1
 8007edc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ede:	e038      	b.n	8007f52 <USBD_GetDescriptor+0x286>
 8007ee0:	e037      	b.n	8007f52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	7c1b      	ldrb	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef2:	f107 0208 	add.w	r2, r7, #8
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	4798      	blx	r3
 8007efa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007efc:	e029      	b.n	8007f52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f9f6 	bl	80082f2 <USBD_CtlError>
        err++;
 8007f06:	7afb      	ldrb	r3, [r7, #11]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f0c:	e021      	b.n	8007f52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7c1b      	ldrb	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10d      	bne.n	8007f32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	f107 0208 	add.w	r2, r7, #8
 8007f22:	4610      	mov	r0, r2
 8007f24:	4798      	blx	r3
 8007f26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	2207      	movs	r2, #7
 8007f2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f30:	e00f      	b.n	8007f52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f9dc 	bl	80082f2 <USBD_CtlError>
        err++;
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f40:	e007      	b.n	8007f52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f9d4 	bl	80082f2 <USBD_CtlError>
      err++;
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f50:	bf00      	nop
  }

  if (err != 0U)
 8007f52:	7afb      	ldrb	r3, [r7, #11]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d11c      	bne.n	8007f92 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f58:	893b      	ldrh	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d011      	beq.n	8007f82 <USBD_GetDescriptor+0x2b6>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	88db      	ldrh	r3, [r3, #6]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00d      	beq.n	8007f82 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	88da      	ldrh	r2, [r3, #6]
 8007f6a:	893b      	ldrh	r3, [r7, #8]
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	bf28      	it	cs
 8007f70:	4613      	movcs	r3, r2
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f76:	893b      	ldrh	r3, [r7, #8]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68f9      	ldr	r1, [r7, #12]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fa22 	bl	80083c6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	88db      	ldrh	r3, [r3, #6]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d104      	bne.n	8007f94 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fa79 	bl	8008482 <USBD_CtlSendStatus>
 8007f90:	e000      	b.n	8007f94 <USBD_GetDescriptor+0x2c8>
    return;
 8007f92:	bf00      	nop
    }
  }
}
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop

08007f9c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	889b      	ldrh	r3, [r3, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d130      	bne.n	8008010 <USBD_SetAddress+0x74>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	88db      	ldrh	r3, [r3, #6]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d12c      	bne.n	8008010 <USBD_SetAddress+0x74>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	885b      	ldrh	r3, [r3, #2]
 8007fba:	2b7f      	cmp	r3, #127	; 0x7f
 8007fbc:	d828      	bhi.n	8008010 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	885b      	ldrh	r3, [r3, #2]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d104      	bne.n	8007fde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f98b 	bl	80082f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fdc:	e01d      	b.n	800801a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	7bfa      	ldrb	r2, [r7, #15]
 8007fe2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fe5a 	bl	8008ca4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fa46 	bl	8008482 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008004:	e009      	b.n	800801a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800800e:	e004      	b.n	800801a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f96d 	bl	80082f2 <USBD_CtlError>
  }
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	885b      	ldrh	r3, [r3, #2]
 8008032:	b2da      	uxtb	r2, r3
 8008034:	4b41      	ldr	r3, [pc, #260]	; (800813c <USBD_SetConfig+0x118>)
 8008036:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008038:	4b40      	ldr	r3, [pc, #256]	; (800813c <USBD_SetConfig+0x118>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d904      	bls.n	800804a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f955 	bl	80082f2 <USBD_CtlError>
 8008048:	e075      	b.n	8008136 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008050:	2b02      	cmp	r3, #2
 8008052:	d002      	beq.n	800805a <USBD_SetConfig+0x36>
 8008054:	2b03      	cmp	r3, #3
 8008056:	d023      	beq.n	80080a0 <USBD_SetConfig+0x7c>
 8008058:	e062      	b.n	8008120 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800805a:	4b38      	ldr	r3, [pc, #224]	; (800813c <USBD_SetConfig+0x118>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d01a      	beq.n	8008098 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008062:	4b36      	ldr	r3, [pc, #216]	; (800813c <USBD_SetConfig+0x118>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2203      	movs	r2, #3
 8008070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008074:	4b31      	ldr	r3, [pc, #196]	; (800813c <USBD_SetConfig+0x118>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff f9e7 	bl	800744e <USBD_SetClassConfig>
 8008080:	4603      	mov	r3, r0
 8008082:	2b02      	cmp	r3, #2
 8008084:	d104      	bne.n	8008090 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f932 	bl	80082f2 <USBD_CtlError>
            return;
 800808e:	e052      	b.n	8008136 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f9f6 	bl	8008482 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008096:	e04e      	b.n	8008136 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f9f2 	bl	8008482 <USBD_CtlSendStatus>
        break;
 800809e:	e04a      	b.n	8008136 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80080a0:	4b26      	ldr	r3, [pc, #152]	; (800813c <USBD_SetConfig+0x118>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d112      	bne.n	80080ce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80080b0:	4b22      	ldr	r3, [pc, #136]	; (800813c <USBD_SetConfig+0x118>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80080ba:	4b20      	ldr	r3, [pc, #128]	; (800813c <USBD_SetConfig+0x118>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff f9e3 	bl	800748c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f9db 	bl	8008482 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080cc:	e033      	b.n	8008136 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80080ce:	4b1b      	ldr	r3, [pc, #108]	; (800813c <USBD_SetConfig+0x118>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d01d      	beq.n	8008118 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff f9d1 	bl	800748c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80080ea:	4b14      	ldr	r3, [pc, #80]	; (800813c <USBD_SetConfig+0x118>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080f4:	4b11      	ldr	r3, [pc, #68]	; (800813c <USBD_SetConfig+0x118>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff f9a7 	bl	800744e <USBD_SetClassConfig>
 8008100:	4603      	mov	r3, r0
 8008102:	2b02      	cmp	r3, #2
 8008104:	d104      	bne.n	8008110 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f8f2 	bl	80082f2 <USBD_CtlError>
            return;
 800810e:	e012      	b.n	8008136 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f9b6 	bl	8008482 <USBD_CtlSendStatus>
        break;
 8008116:	e00e      	b.n	8008136 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f9b2 	bl	8008482 <USBD_CtlSendStatus>
        break;
 800811e:	e00a      	b.n	8008136 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f8e5 	bl	80082f2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008128:	4b04      	ldr	r3, [pc, #16]	; (800813c <USBD_SetConfig+0x118>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff f9ac 	bl	800748c <USBD_ClrClassConfig>
        break;
 8008134:	bf00      	nop
    }
  }
}
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20000388 	.word	0x20000388

08008140 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	88db      	ldrh	r3, [r3, #6]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d004      	beq.n	800815c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f8cc 	bl	80082f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800815a:	e022      	b.n	80081a2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008162:	2b02      	cmp	r3, #2
 8008164:	dc02      	bgt.n	800816c <USBD_GetConfig+0x2c>
 8008166:	2b00      	cmp	r3, #0
 8008168:	dc03      	bgt.n	8008172 <USBD_GetConfig+0x32>
 800816a:	e015      	b.n	8008198 <USBD_GetConfig+0x58>
 800816c:	2b03      	cmp	r3, #3
 800816e:	d00b      	beq.n	8008188 <USBD_GetConfig+0x48>
 8008170:	e012      	b.n	8008198 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3308      	adds	r3, #8
 800817c:	2201      	movs	r2, #1
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f920 	bl	80083c6 <USBD_CtlSendData>
        break;
 8008186:	e00c      	b.n	80081a2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	2201      	movs	r2, #1
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f918 	bl	80083c6 <USBD_CtlSendData>
        break;
 8008196:	e004      	b.n	80081a2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f8a9 	bl	80082f2 <USBD_CtlError>
        break;
 80081a0:	bf00      	nop
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ba:	3b01      	subs	r3, #1
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d81e      	bhi.n	80081fe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	88db      	ldrh	r3, [r3, #6]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d004      	beq.n	80081d2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f891 	bl	80082f2 <USBD_CtlError>
        break;
 80081d0:	e01a      	b.n	8008208 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f043 0202 	orr.w	r2, r3, #2
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	330c      	adds	r3, #12
 80081f2:	2202      	movs	r2, #2
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f8e5 	bl	80083c6 <USBD_CtlSendData>
      break;
 80081fc:	e004      	b.n	8008208 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f876 	bl	80082f2 <USBD_CtlError>
      break;
 8008206:	bf00      	nop
  }
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	885b      	ldrh	r3, [r3, #2]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d106      	bne.n	8008230 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f929 	bl	8008482 <USBD_CtlSendStatus>
  }
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008248:	3b01      	subs	r3, #1
 800824a:	2b02      	cmp	r3, #2
 800824c:	d80b      	bhi.n	8008266 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	885b      	ldrh	r3, [r3, #2]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d10c      	bne.n	8008270 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f90f 	bl	8008482 <USBD_CtlSendStatus>
      }
      break;
 8008264:	e004      	b.n	8008270 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f842 	bl	80082f2 <USBD_CtlError>
      break;
 800826e:	e000      	b.n	8008272 <USBD_ClrFeature+0x3a>
      break;
 8008270:	bf00      	nop
  }
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	785a      	ldrb	r2, [r3, #1]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	3302      	adds	r3, #2
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	b29a      	uxth	r2, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	3303      	adds	r3, #3
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	4413      	add	r3, r2
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	3304      	adds	r3, #4
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	3305      	adds	r3, #5
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	4413      	add	r3, r2
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	3306      	adds	r3, #6
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	3307      	adds	r3, #7
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	b29b      	uxth	r3, r3
 80082e0:	4413      	add	r3, r2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	80da      	strh	r2, [r3, #6]

}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bc80      	pop	{r7}
 80082f0:	4770      	bx	lr

080082f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80082fc:	2180      	movs	r1, #128	; 0x80
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fc66 	bl	8008bd0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008304:	2100      	movs	r1, #0
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fc62 	bl	8008bd0 <USBD_LL_StallEP>
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d032      	beq.n	8008390 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 f834 	bl	8008398 <USBD_GetLen>
 8008330:	4603      	mov	r3, r0
 8008332:	3301      	adds	r3, #1
 8008334:	b29b      	uxth	r3, r3
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	75fa      	strb	r2, [r7, #23]
 8008344:	461a      	mov	r2, r3
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	4413      	add	r3, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	7812      	ldrb	r2, [r2, #0]
 800834e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	75fa      	strb	r2, [r7, #23]
 8008356:	461a      	mov	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4413      	add	r3, r2
 800835c:	2203      	movs	r2, #3
 800835e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008360:	e012      	b.n	8008388 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	60fa      	str	r2, [r7, #12]
 8008368:	7dfa      	ldrb	r2, [r7, #23]
 800836a:	1c51      	adds	r1, r2, #1
 800836c:	75f9      	strb	r1, [r7, #23]
 800836e:	4611      	mov	r1, r2
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	440a      	add	r2, r1
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	75fa      	strb	r2, [r7, #23]
 800837e:	461a      	mov	r2, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4413      	add	r3, r2
 8008384:	2200      	movs	r2, #0
 8008386:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e8      	bne.n	8008362 <USBD_GetString+0x4e>
    }
  }
}
 8008390:	bf00      	nop
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80083a4:	e005      	b.n	80083b2 <USBD_GetLen+0x1a>
  {
    len++;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	3301      	adds	r3, #1
 80083aa:	73fb      	strb	r3, [r7, #15]
    buf++;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3301      	adds	r3, #1
 80083b0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1f5      	bne.n	80083a6 <USBD_GetLen+0xe>
  }

  return len;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr

080083c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	4613      	mov	r3, r2
 80083d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083dc:	88fa      	ldrh	r2, [r7, #6]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80083e2:	88fa      	ldrh	r2, [r7, #6]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	2100      	movs	r1, #0
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fc77 	bl	8008ce2 <USBD_LL_Transmit>

  return USBD_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	4613      	mov	r3, r2
 800840a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800840c:	88fb      	ldrh	r3, [r7, #6]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	2100      	movs	r1, #0
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 fc65 	bl	8008ce2 <USBD_LL_Transmit>

  return USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	4613      	mov	r3, r2
 800842e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2203      	movs	r2, #3
 8008434:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008438:	88fa      	ldrh	r2, [r7, #6]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008440:	88fa      	ldrh	r2, [r7, #6]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008448:	88fb      	ldrh	r3, [r7, #6]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	2100      	movs	r1, #0
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 fc6a 	bl	8008d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	4613      	mov	r3, r2
 800846a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800846c:	88fb      	ldrh	r3, [r7, #6]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	2100      	movs	r1, #0
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fc58 	bl	8008d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2204      	movs	r2, #4
 800848e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008492:	2300      	movs	r3, #0
 8008494:	2200      	movs	r2, #0
 8008496:	2100      	movs	r1, #0
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fc22 	bl	8008ce2 <USBD_LL_Transmit>

  return USBD_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2205      	movs	r2, #5
 80084b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084b8:	2300      	movs	r3, #0
 80084ba:	2200      	movs	r2, #0
 80084bc:	2100      	movs	r1, #0
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fc32 	bl	8008d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084d4:	2200      	movs	r2, #0
 80084d6:	4912      	ldr	r1, [pc, #72]	; (8008520 <MX_USB_DEVICE_Init+0x50>)
 80084d8:	4812      	ldr	r0, [pc, #72]	; (8008524 <MX_USB_DEVICE_Init+0x54>)
 80084da:	f7fe ff5e 	bl	800739a <USBD_Init>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084e4:	f7f9 f968 	bl	80017b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084e8:	490f      	ldr	r1, [pc, #60]	; (8008528 <MX_USB_DEVICE_Init+0x58>)
 80084ea:	480e      	ldr	r0, [pc, #56]	; (8008524 <MX_USB_DEVICE_Init+0x54>)
 80084ec:	f7fe ff80 	bl	80073f0 <USBD_RegisterClass>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084f6:	f7f9 f95f 	bl	80017b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084fa:	490c      	ldr	r1, [pc, #48]	; (800852c <MX_USB_DEVICE_Init+0x5c>)
 80084fc:	4809      	ldr	r0, [pc, #36]	; (8008524 <MX_USB_DEVICE_Init+0x54>)
 80084fe:	f7fe feb1 	bl	8007264 <USBD_CDC_RegisterInterface>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008508:	f7f9 f956 	bl	80017b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800850c:	4805      	ldr	r0, [pc, #20]	; (8008524 <MX_USB_DEVICE_Init+0x54>)
 800850e:	f7fe ff88 	bl	8007422 <USBD_Start>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008518:	f7f9 f94e 	bl	80017b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800851c:	bf00      	nop
 800851e:	bd80      	pop	{r7, pc}
 8008520:	2000013c 	.word	0x2000013c
 8008524:	2000063c 	.word	0x2000063c
 8008528:	20000028 	.word	0x20000028
 800852c:	2000012c 	.word	0x2000012c

08008530 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008534:	2200      	movs	r2, #0
 8008536:	4905      	ldr	r1, [pc, #20]	; (800854c <CDC_Init_FS+0x1c>)
 8008538:	4805      	ldr	r0, [pc, #20]	; (8008550 <CDC_Init_FS+0x20>)
 800853a:	f7fe fea9 	bl	8007290 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800853e:	4905      	ldr	r1, [pc, #20]	; (8008554 <CDC_Init_FS+0x24>)
 8008540:	4803      	ldr	r0, [pc, #12]	; (8008550 <CDC_Init_FS+0x20>)
 8008542:	f7fe febe 	bl	80072c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008546:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008548:	4618      	mov	r0, r3
 800854a:	bd80      	pop	{r7, pc}
 800854c:	20000a2c 	.word	0x20000a2c
 8008550:	2000063c 	.word	0x2000063c
 8008554:	20000900 	.word	0x20000900

08008558 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008558:	b480      	push	{r7}
 800855a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800855c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800855e:	4618      	mov	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	bc80      	pop	{r7}
 8008564:	4770      	bx	lr
	...

08008568 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
 8008574:	4613      	mov	r3, r2
 8008576:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008578:	79fb      	ldrb	r3, [r7, #7]
 800857a:	2b23      	cmp	r3, #35	; 0x23
 800857c:	d84a      	bhi.n	8008614 <CDC_Control_FS+0xac>
 800857e:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <CDC_Control_FS+0x1c>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	08008615 	.word	0x08008615
 8008588:	08008615 	.word	0x08008615
 800858c:	08008615 	.word	0x08008615
 8008590:	08008615 	.word	0x08008615
 8008594:	08008615 	.word	0x08008615
 8008598:	08008615 	.word	0x08008615
 800859c:	08008615 	.word	0x08008615
 80085a0:	08008615 	.word	0x08008615
 80085a4:	08008615 	.word	0x08008615
 80085a8:	08008615 	.word	0x08008615
 80085ac:	08008615 	.word	0x08008615
 80085b0:	08008615 	.word	0x08008615
 80085b4:	08008615 	.word	0x08008615
 80085b8:	08008615 	.word	0x08008615
 80085bc:	08008615 	.word	0x08008615
 80085c0:	08008615 	.word	0x08008615
 80085c4:	08008615 	.word	0x08008615
 80085c8:	08008615 	.word	0x08008615
 80085cc:	08008615 	.word	0x08008615
 80085d0:	08008615 	.word	0x08008615
 80085d4:	08008615 	.word	0x08008615
 80085d8:	08008615 	.word	0x08008615
 80085dc:	08008615 	.word	0x08008615
 80085e0:	08008615 	.word	0x08008615
 80085e4:	08008615 	.word	0x08008615
 80085e8:	08008615 	.word	0x08008615
 80085ec:	08008615 	.word	0x08008615
 80085f0:	08008615 	.word	0x08008615
 80085f4:	08008615 	.word	0x08008615
 80085f8:	08008615 	.word	0x08008615
 80085fc:	08008615 	.word	0x08008615
 8008600:	08008615 	.word	0x08008615
 8008604:	08008615 	.word	0x08008615
 8008608:	08008615 	.word	0x08008615
 800860c:	08008615 	.word	0x08008615
 8008610:	08008615 	.word	0x08008615
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008614:	bf00      	nop
  }

  return (USBD_OK);
 8008616:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop

08008624 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


	//memset(UserTxBufferFS, 0, sizeof(UserTxBufferFS));
	strncpy(UserTxBufferFS,(char*)Buf,*Len);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	480c      	ldr	r0, [pc, #48]	; (8008668 <CDC_Receive_FS+0x44>)
 8008638:	f000 fcfe 	bl	8009038 <strncpy>
	UserTxBufferFS[*Len] = 0;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a09      	ldr	r2, [pc, #36]	; (8008668 <CDC_Receive_FS+0x44>)
 8008642:	2100      	movs	r1, #0
 8008644:	54d1      	strb	r1, [r2, r3]

	CLI_Process_Command(UserTxBufferFS);
 8008646:	4808      	ldr	r0, [pc, #32]	; (8008668 <CDC_Receive_FS+0x44>)
 8008648:	f7f8 fce4 	bl	8001014 <CLI_Process_Command>
	memset(UserTxBufferFS, 0, sizeof(UserTxBufferFS));
 800864c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008650:	2100      	movs	r1, #0
 8008652:	4805      	ldr	r0, [pc, #20]	; (8008668 <CDC_Receive_FS+0x44>)
 8008654:	f000 fc20 	bl	8008e98 <memset>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008658:	4804      	ldr	r0, [pc, #16]	; (800866c <CDC_Receive_FS+0x48>)
 800865a:	f7fe fe74 	bl	8007346 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800865e:	2300      	movs	r3, #0

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20000a2c 	.word	0x20000a2c
 800866c:	2000063c 	.word	0x2000063c

08008670 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008680:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <CDC_Transmit_FS+0x48>)
 8008682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008686:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008692:	2301      	movs	r3, #1
 8008694:	e00b      	b.n	80086ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008696:	887b      	ldrh	r3, [r7, #2]
 8008698:	461a      	mov	r2, r3
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4806      	ldr	r0, [pc, #24]	; (80086b8 <CDC_Transmit_FS+0x48>)
 800869e:	f7fe fdf7 	bl	8007290 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086a2:	4805      	ldr	r0, [pc, #20]	; (80086b8 <CDC_Transmit_FS+0x48>)
 80086a4:	f7fe fe20 	bl	80072e8 <USBD_CDC_TransmitPacket>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	2000063c 	.word	0x2000063c

080086bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2212      	movs	r2, #18
 80086cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086ce:	4b03      	ldr	r3, [pc, #12]	; (80086dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	20000158 	.word	0x20000158

080086e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	6039      	str	r1, [r7, #0]
 80086ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2204      	movs	r2, #4
 80086f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086f2:	4b03      	ldr	r3, [pc, #12]	; (8008700 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bc80      	pop	{r7}
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	2000016c 	.word	0x2000016c

08008704 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d105      	bne.n	8008722 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4907      	ldr	r1, [pc, #28]	; (8008738 <USBD_FS_ProductStrDescriptor+0x34>)
 800871a:	4808      	ldr	r0, [pc, #32]	; (800873c <USBD_FS_ProductStrDescriptor+0x38>)
 800871c:	f7ff fdfa 	bl	8008314 <USBD_GetString>
 8008720:	e004      	b.n	800872c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	4904      	ldr	r1, [pc, #16]	; (8008738 <USBD_FS_ProductStrDescriptor+0x34>)
 8008726:	4805      	ldr	r0, [pc, #20]	; (800873c <USBD_FS_ProductStrDescriptor+0x38>)
 8008728:	f7ff fdf4 	bl	8008314 <USBD_GetString>
  }
  return USBD_StrDesc;
 800872c:	4b02      	ldr	r3, [pc, #8]	; (8008738 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20000b58 	.word	0x20000b58
 800873c:	0800bf6c 	.word	0x0800bf6c

08008740 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	4904      	ldr	r1, [pc, #16]	; (8008760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008750:	4804      	ldr	r0, [pc, #16]	; (8008764 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008752:	f7ff fddf 	bl	8008314 <USBD_GetString>
  return USBD_StrDesc;
 8008756:	4b02      	ldr	r3, [pc, #8]	; (8008760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000b58 	.word	0x20000b58
 8008764:	0800bf88 	.word	0x0800bf88

08008768 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	6039      	str	r1, [r7, #0]
 8008772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	221a      	movs	r2, #26
 8008778:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800877a:	f000 f843 	bl	8008804 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800877e:	4b02      	ldr	r3, [pc, #8]	; (8008788 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20000170 	.word	0x20000170

0800878c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	4907      	ldr	r1, [pc, #28]	; (80087c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087a2:	4808      	ldr	r0, [pc, #32]	; (80087c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087a4:	f7ff fdb6 	bl	8008314 <USBD_GetString>
 80087a8:	e004      	b.n	80087b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4904      	ldr	r1, [pc, #16]	; (80087c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ae:	4805      	ldr	r0, [pc, #20]	; (80087c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087b0:	f7ff fdb0 	bl	8008314 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000b58 	.word	0x20000b58
 80087c4:	0800bf9c 	.word	0x0800bf9c

080087c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4907      	ldr	r1, [pc, #28]	; (80087fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087de:	4808      	ldr	r0, [pc, #32]	; (8008800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087e0:	f7ff fd98 	bl	8008314 <USBD_GetString>
 80087e4:	e004      	b.n	80087f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4904      	ldr	r1, [pc, #16]	; (80087fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087ea:	4805      	ldr	r0, [pc, #20]	; (8008800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087ec:	f7ff fd92 	bl	8008314 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f0:	4b02      	ldr	r3, [pc, #8]	; (80087fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000b58 	.word	0x20000b58
 8008800:	0800bfa8 	.word	0x0800bfa8

08008804 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <Get_SerialNum+0x44>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008810:	4b0e      	ldr	r3, [pc, #56]	; (800884c <Get_SerialNum+0x48>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008816:	4b0e      	ldr	r3, [pc, #56]	; (8008850 <Get_SerialNum+0x4c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4413      	add	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800882a:	2208      	movs	r2, #8
 800882c:	4909      	ldr	r1, [pc, #36]	; (8008854 <Get_SerialNum+0x50>)
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 f814 	bl	800885c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008834:	2204      	movs	r2, #4
 8008836:	4908      	ldr	r1, [pc, #32]	; (8008858 <Get_SerialNum+0x54>)
 8008838:	68b8      	ldr	r0, [r7, #8]
 800883a:	f000 f80f 	bl	800885c <IntToUnicode>
  }
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	1ffff7e8 	.word	0x1ffff7e8
 800884c:	1ffff7ec 	.word	0x1ffff7ec
 8008850:	1ffff7f0 	.word	0x1ffff7f0
 8008854:	20000172 	.word	0x20000172
 8008858:	20000182 	.word	0x20000182

0800885c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800886e:	2300      	movs	r3, #0
 8008870:	75fb      	strb	r3, [r7, #23]
 8008872:	e027      	b.n	80088c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	0f1b      	lsrs	r3, r3, #28
 8008878:	2b09      	cmp	r3, #9
 800887a:	d80b      	bhi.n	8008894 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	0f1b      	lsrs	r3, r3, #28
 8008880:	b2da      	uxtb	r2, r3
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	4619      	mov	r1, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	440b      	add	r3, r1
 800888c:	3230      	adds	r2, #48	; 0x30
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	e00a      	b.n	80088aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	0f1b      	lsrs	r3, r3, #28
 8008898:	b2da      	uxtb	r2, r3
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	4619      	mov	r1, r3
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	440b      	add	r3, r1
 80088a4:	3237      	adds	r2, #55	; 0x37
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	3301      	adds	r3, #1
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	4413      	add	r3, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	3301      	adds	r3, #1
 80088c2:	75fb      	strb	r3, [r7, #23]
 80088c4:	7dfa      	ldrb	r2, [r7, #23]
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d3d3      	bcc.n	8008874 <IntToUnicode+0x18>
  }
}
 80088cc:	bf00      	nop
 80088ce:	bf00      	nop
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr

080088d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a0d      	ldr	r2, [pc, #52]	; (800891c <HAL_PCD_MspInit+0x44>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d113      	bne.n	8008912 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80088ea:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <HAL_PCD_MspInit+0x48>)
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <HAL_PCD_MspInit+0x48>)
 80088f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088f4:	61d3      	str	r3, [r2, #28]
 80088f6:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <HAL_PCD_MspInit+0x48>)
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	2014      	movs	r0, #20
 8008908:	f7f9 fa47 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800890c:	2014      	movs	r0, #20
 800890e:	f7f9 fa60 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40005c00 	.word	0x40005c00
 8008920:	40021000 	.word	0x40021000

08008924 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008938:	4619      	mov	r1, r3
 800893a:	4610      	mov	r0, r2
 800893c:	f7fe fdb9 	bl	80074b2 <USBD_LL_SetupStage>
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	440b      	add	r3, r1
 8008968:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	4619      	mov	r1, r3
 8008972:	f7fe fdeb 	bl	800754c <USBD_LL_DataOutStage>
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	440b      	add	r3, r1
 800899e:	333c      	adds	r3, #60	; 0x3c
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	78fb      	ldrb	r3, [r7, #3]
 80089a4:	4619      	mov	r1, r3
 80089a6:	f7fe fe42 	bl	800762e <USBD_LL_DataInStage>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe ff52 	bl	800786a <USBD_LL_SOF>
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089d6:	2301      	movs	r3, #1
 80089d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d001      	beq.n	80089e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089e2:	f7f8 fee9 	bl	80017b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089ec:	7bfa      	ldrb	r2, [r7, #15]
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe ff02 	bl	80077fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe febb 	bl	8007778 <USBD_LL_Reset>
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fefc 	bl	8007818 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a28:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <HAL_PCD_SuspendCallback+0x30>)
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	4a03      	ldr	r2, [pc, #12]	; (8008a3c <HAL_PCD_SuspendCallback+0x30>)
 8008a2e:	f043 0306 	orr.w	r3, r3, #6
 8008a32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	e000ed00 	.word	0xe000ed00

08008a40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fef6 	bl	8007840 <USBD_LL_Resume>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a64:	4a28      	ldr	r2, [pc, #160]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a26      	ldr	r2, [pc, #152]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008a74:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a76:	4a25      	ldr	r2, [pc, #148]	; (8008b0c <USBD_LL_Init+0xb0>)
 8008a78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a7a:	4b23      	ldr	r3, [pc, #140]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a80:	4b21      	ldr	r3, [pc, #132]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a82:	2202      	movs	r2, #2
 8008a84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a86:	4b20      	ldr	r3, [pc, #128]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a8c:	4b1e      	ldr	r3, [pc, #120]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a92:	4b1d      	ldr	r3, [pc, #116]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a98:	481b      	ldr	r0, [pc, #108]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a9a:	f7f9 fb51 	bl	8002140 <HAL_PCD_Init>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008aa4:	f7f8 fe88 	bl	80017b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aae:	2318      	movs	r3, #24
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	f7fa ffc7 	bl	8003a46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008abe:	2358      	movs	r3, #88	; 0x58
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2180      	movs	r1, #128	; 0x80
 8008ac4:	f7fa ffbf 	bl	8003a46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ace:	23c0      	movs	r3, #192	; 0xc0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2181      	movs	r1, #129	; 0x81
 8008ad4:	f7fa ffb7 	bl	8003a46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ade:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	f7fa ffae 	bl	8003a46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008af4:	2200      	movs	r2, #0
 8008af6:	2182      	movs	r1, #130	; 0x82
 8008af8:	f7fa ffa5 	bl	8003a46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000d58 	.word	0x20000d58
 8008b0c:	40005c00 	.word	0x40005c00

08008b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7f9 fc15 	bl	8002356 <HAL_PCD_Start>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f94e 	bl	8008dd4 <USBD_Get_USB_Status>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	4608      	mov	r0, r1
 8008b50:	4611      	mov	r1, r2
 8008b52:	461a      	mov	r2, r3
 8008b54:	4603      	mov	r3, r0
 8008b56:	70fb      	strb	r3, [r7, #3]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70bb      	strb	r3, [r7, #2]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b6e:	78bb      	ldrb	r3, [r7, #2]
 8008b70:	883a      	ldrh	r2, [r7, #0]
 8008b72:	78f9      	ldrb	r1, [r7, #3]
 8008b74:	f7f9 fd8f 	bl	8002696 <HAL_PCD_EP_Open>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f928 	bl	8008dd4 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7f9 fdd6 	bl	8002762 <HAL_PCD_EP_Close>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 f909 	bl	8008dd4 <USBD_Get_USB_Status>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f9 fe96 	bl	8002920 <HAL_PCD_EP_SetStall>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f8ea 	bl	8008dd4 <USBD_Get_USB_Status>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7f9 fed7 	bl	80029e0 <HAL_PCD_EP_ClrStall>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 f8cb 	bl	8008dd4 <USBD_Get_USB_Status>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da0c      	bge.n	8008c82 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c6e:	68f9      	ldr	r1, [r7, #12]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	440b      	add	r3, r1
 8008c7c:	3302      	adds	r3, #2
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	e00b      	b.n	8008c9a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c88:	68f9      	ldr	r1, [r7, #12]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	440b      	add	r3, r1
 8008c94:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c98:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bc80      	pop	{r7}
 8008ca2:	4770      	bx	lr

08008ca4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7f9 fcc2 	bl	800264c <HAL_PCD_SetAddress>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 f880 	bl	8008dd4 <USBD_Get_USB_Status>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b086      	sub	sp, #24
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	461a      	mov	r2, r3
 8008cee:	460b      	mov	r3, r1
 8008cf0:	72fb      	strb	r3, [r7, #11]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d04:	893b      	ldrh	r3, [r7, #8]
 8008d06:	7af9      	ldrb	r1, [r7, #11]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	f7f9 fdc6 	bl	800289a <HAL_PCD_EP_Transmit>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 f85d 	bl	8008dd4 <USBD_Get_USB_Status>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	461a      	mov	r2, r3
 8008d34:	460b      	mov	r3, r1
 8008d36:	72fb      	strb	r3, [r7, #11]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d4a:	893b      	ldrh	r3, [r7, #8]
 8008d4c:	7af9      	ldrb	r1, [r7, #11]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	f7f9 fd4f 	bl	80027f2 <HAL_PCD_EP_Receive>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f83a 	bl	8008dd4 <USBD_Get_USB_Status>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d64:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d80:	78fa      	ldrb	r2, [r7, #3]
 8008d82:	4611      	mov	r1, r2
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7f9 fd71 	bl	800286c <HAL_PCD_EP_GetRxCount>
 8008d8a:	4603      	mov	r3, r0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <USBD_static_malloc+0x14>)
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bc80      	pop	{r7}
 8008da6:	4770      	bx	lr
 8008da8:	2000038c 	.word	0x2000038c

08008dac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]

}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bc80      	pop	{r7}
 8008dd2:	4770      	bx	lr

08008dd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d817      	bhi.n	8008e18 <USBD_Get_USB_Status+0x44>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <USBD_Get_USB_Status+0x1c>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e01 	.word	0x08008e01
 8008df4:	08008e07 	.word	0x08008e07
 8008df8:	08008e0d 	.word	0x08008e0d
 8008dfc:	08008e13 	.word	0x08008e13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
    break;
 8008e04:	e00b      	b.n	8008e1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e06:	2302      	movs	r3, #2
 8008e08:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0a:	e008      	b.n	8008e1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e10:	e005      	b.n	8008e1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e12:	2302      	movs	r3, #2
 8008e14:	73fb      	strb	r3, [r7, #15]
    break;
 8008e16:	e002      	b.n	8008e1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1c:	bf00      	nop
  }
  return usb_status;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bc80      	pop	{r7}
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop

08008e2c <atof>:
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	f000 bf2b 	b.w	8009c88 <strtod>
	...

08008e34 <__errno>:
 8008e34:	4b01      	ldr	r3, [pc, #4]	; (8008e3c <__errno+0x8>)
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	2000018c 	.word	0x2000018c

08008e40 <__libc_init_array>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	2600      	movs	r6, #0
 8008e44:	4d0c      	ldr	r5, [pc, #48]	; (8008e78 <__libc_init_array+0x38>)
 8008e46:	4c0d      	ldr	r4, [pc, #52]	; (8008e7c <__libc_init_array+0x3c>)
 8008e48:	1b64      	subs	r4, r4, r5
 8008e4a:	10a4      	asrs	r4, r4, #2
 8008e4c:	42a6      	cmp	r6, r4
 8008e4e:	d109      	bne.n	8008e64 <__libc_init_array+0x24>
 8008e50:	f003 f85a 	bl	800bf08 <_init>
 8008e54:	2600      	movs	r6, #0
 8008e56:	4d0a      	ldr	r5, [pc, #40]	; (8008e80 <__libc_init_array+0x40>)
 8008e58:	4c0a      	ldr	r4, [pc, #40]	; (8008e84 <__libc_init_array+0x44>)
 8008e5a:	1b64      	subs	r4, r4, r5
 8008e5c:	10a4      	asrs	r4, r4, #2
 8008e5e:	42a6      	cmp	r6, r4
 8008e60:	d105      	bne.n	8008e6e <__libc_init_array+0x2e>
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e68:	4798      	blx	r3
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	e7ee      	b.n	8008e4c <__libc_init_array+0xc>
 8008e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e72:	4798      	blx	r3
 8008e74:	3601      	adds	r6, #1
 8008e76:	e7f2      	b.n	8008e5e <__libc_init_array+0x1e>
 8008e78:	0800c3fc 	.word	0x0800c3fc
 8008e7c:	0800c3fc 	.word	0x0800c3fc
 8008e80:	0800c3fc 	.word	0x0800c3fc
 8008e84:	0800c400 	.word	0x0800c400

08008e88 <malloc>:
 8008e88:	4b02      	ldr	r3, [pc, #8]	; (8008e94 <malloc+0xc>)
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	f000 b857 	b.w	8008f40 <_malloc_r>
 8008e92:	bf00      	nop
 8008e94:	2000018c 	.word	0x2000018c

08008e98 <memset>:
 8008e98:	4603      	mov	r3, r0
 8008e9a:	4402      	add	r2, r0
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d100      	bne.n	8008ea2 <memset+0xa>
 8008ea0:	4770      	bx	lr
 8008ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea6:	e7f9      	b.n	8008e9c <memset+0x4>

08008ea8 <_free_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4605      	mov	r5, r0
 8008eac:	2900      	cmp	r1, #0
 8008eae:	d043      	beq.n	8008f38 <_free_r+0x90>
 8008eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb4:	1f0c      	subs	r4, r1, #4
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	bfb8      	it	lt
 8008eba:	18e4      	addlt	r4, r4, r3
 8008ebc:	f001 fb90 	bl	800a5e0 <__malloc_lock>
 8008ec0:	4a1e      	ldr	r2, [pc, #120]	; (8008f3c <_free_r+0x94>)
 8008ec2:	6813      	ldr	r3, [r2, #0]
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	b933      	cbnz	r3, 8008ed6 <_free_r+0x2e>
 8008ec8:	6063      	str	r3, [r4, #4]
 8008eca:	6014      	str	r4, [r2, #0]
 8008ecc:	4628      	mov	r0, r5
 8008ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ed2:	f001 bb8b 	b.w	800a5ec <__malloc_unlock>
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	d90a      	bls.n	8008ef0 <_free_r+0x48>
 8008eda:	6821      	ldr	r1, [r4, #0]
 8008edc:	1862      	adds	r2, r4, r1
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	bf01      	itttt	eq
 8008ee2:	681a      	ldreq	r2, [r3, #0]
 8008ee4:	685b      	ldreq	r3, [r3, #4]
 8008ee6:	1852      	addeq	r2, r2, r1
 8008ee8:	6022      	streq	r2, [r4, #0]
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	6004      	str	r4, [r0, #0]
 8008eee:	e7ed      	b.n	8008ecc <_free_r+0x24>
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	b10b      	cbz	r3, 8008efa <_free_r+0x52>
 8008ef6:	42a3      	cmp	r3, r4
 8008ef8:	d9fa      	bls.n	8008ef0 <_free_r+0x48>
 8008efa:	6811      	ldr	r1, [r2, #0]
 8008efc:	1850      	adds	r0, r2, r1
 8008efe:	42a0      	cmp	r0, r4
 8008f00:	d10b      	bne.n	8008f1a <_free_r+0x72>
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	4401      	add	r1, r0
 8008f06:	1850      	adds	r0, r2, r1
 8008f08:	4283      	cmp	r3, r0
 8008f0a:	6011      	str	r1, [r2, #0]
 8008f0c:	d1de      	bne.n	8008ecc <_free_r+0x24>
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	4401      	add	r1, r0
 8008f14:	6011      	str	r1, [r2, #0]
 8008f16:	6053      	str	r3, [r2, #4]
 8008f18:	e7d8      	b.n	8008ecc <_free_r+0x24>
 8008f1a:	d902      	bls.n	8008f22 <_free_r+0x7a>
 8008f1c:	230c      	movs	r3, #12
 8008f1e:	602b      	str	r3, [r5, #0]
 8008f20:	e7d4      	b.n	8008ecc <_free_r+0x24>
 8008f22:	6820      	ldr	r0, [r4, #0]
 8008f24:	1821      	adds	r1, r4, r0
 8008f26:	428b      	cmp	r3, r1
 8008f28:	bf01      	itttt	eq
 8008f2a:	6819      	ldreq	r1, [r3, #0]
 8008f2c:	685b      	ldreq	r3, [r3, #4]
 8008f2e:	1809      	addeq	r1, r1, r0
 8008f30:	6021      	streq	r1, [r4, #0]
 8008f32:	6063      	str	r3, [r4, #4]
 8008f34:	6054      	str	r4, [r2, #4]
 8008f36:	e7c9      	b.n	8008ecc <_free_r+0x24>
 8008f38:	bd38      	pop	{r3, r4, r5, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200005ac 	.word	0x200005ac

08008f40 <_malloc_r>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	1ccd      	adds	r5, r1, #3
 8008f44:	f025 0503 	bic.w	r5, r5, #3
 8008f48:	3508      	adds	r5, #8
 8008f4a:	2d0c      	cmp	r5, #12
 8008f4c:	bf38      	it	cc
 8008f4e:	250c      	movcc	r5, #12
 8008f50:	2d00      	cmp	r5, #0
 8008f52:	4606      	mov	r6, r0
 8008f54:	db01      	blt.n	8008f5a <_malloc_r+0x1a>
 8008f56:	42a9      	cmp	r1, r5
 8008f58:	d903      	bls.n	8008f62 <_malloc_r+0x22>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	6033      	str	r3, [r6, #0]
 8008f5e:	2000      	movs	r0, #0
 8008f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f62:	f001 fb3d 	bl	800a5e0 <__malloc_lock>
 8008f66:	4921      	ldr	r1, [pc, #132]	; (8008fec <_malloc_r+0xac>)
 8008f68:	680a      	ldr	r2, [r1, #0]
 8008f6a:	4614      	mov	r4, r2
 8008f6c:	b99c      	cbnz	r4, 8008f96 <_malloc_r+0x56>
 8008f6e:	4f20      	ldr	r7, [pc, #128]	; (8008ff0 <_malloc_r+0xb0>)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	b923      	cbnz	r3, 8008f7e <_malloc_r+0x3e>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4630      	mov	r0, r6
 8008f78:	f000 f83c 	bl	8008ff4 <_sbrk_r>
 8008f7c:	6038      	str	r0, [r7, #0]
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4630      	mov	r0, r6
 8008f82:	f000 f837 	bl	8008ff4 <_sbrk_r>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	d123      	bne.n	8008fd2 <_malloc_r+0x92>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	6033      	str	r3, [r6, #0]
 8008f90:	f001 fb2c 	bl	800a5ec <__malloc_unlock>
 8008f94:	e7e3      	b.n	8008f5e <_malloc_r+0x1e>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	1b5b      	subs	r3, r3, r5
 8008f9a:	d417      	bmi.n	8008fcc <_malloc_r+0x8c>
 8008f9c:	2b0b      	cmp	r3, #11
 8008f9e:	d903      	bls.n	8008fa8 <_malloc_r+0x68>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	441c      	add	r4, r3
 8008fa4:	6025      	str	r5, [r4, #0]
 8008fa6:	e004      	b.n	8008fb2 <_malloc_r+0x72>
 8008fa8:	6863      	ldr	r3, [r4, #4]
 8008faa:	42a2      	cmp	r2, r4
 8008fac:	bf0c      	ite	eq
 8008fae:	600b      	streq	r3, [r1, #0]
 8008fb0:	6053      	strne	r3, [r2, #4]
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f001 fb1a 	bl	800a5ec <__malloc_unlock>
 8008fb8:	f104 000b 	add.w	r0, r4, #11
 8008fbc:	1d23      	adds	r3, r4, #4
 8008fbe:	f020 0007 	bic.w	r0, r0, #7
 8008fc2:	1ac2      	subs	r2, r0, r3
 8008fc4:	d0cc      	beq.n	8008f60 <_malloc_r+0x20>
 8008fc6:	1a1b      	subs	r3, r3, r0
 8008fc8:	50a3      	str	r3, [r4, r2]
 8008fca:	e7c9      	b.n	8008f60 <_malloc_r+0x20>
 8008fcc:	4622      	mov	r2, r4
 8008fce:	6864      	ldr	r4, [r4, #4]
 8008fd0:	e7cc      	b.n	8008f6c <_malloc_r+0x2c>
 8008fd2:	1cc4      	adds	r4, r0, #3
 8008fd4:	f024 0403 	bic.w	r4, r4, #3
 8008fd8:	42a0      	cmp	r0, r4
 8008fda:	d0e3      	beq.n	8008fa4 <_malloc_r+0x64>
 8008fdc:	1a21      	subs	r1, r4, r0
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f000 f808 	bl	8008ff4 <_sbrk_r>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d1dd      	bne.n	8008fa4 <_malloc_r+0x64>
 8008fe8:	e7cf      	b.n	8008f8a <_malloc_r+0x4a>
 8008fea:	bf00      	nop
 8008fec:	200005ac 	.word	0x200005ac
 8008ff0:	200005b0 	.word	0x200005b0

08008ff4 <_sbrk_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	4d05      	ldr	r5, [pc, #20]	; (8009010 <_sbrk_r+0x1c>)
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	4608      	mov	r0, r1
 8008ffe:	602b      	str	r3, [r5, #0]
 8009000:	f7f8 fd0c 	bl	8001a1c <_sbrk>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d102      	bne.n	800900e <_sbrk_r+0x1a>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	b103      	cbz	r3, 800900e <_sbrk_r+0x1a>
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	20001050 	.word	0x20001050

08009014 <strncmp>:
 8009014:	b510      	push	{r4, lr}
 8009016:	b16a      	cbz	r2, 8009034 <strncmp+0x20>
 8009018:	3901      	subs	r1, #1
 800901a:	1884      	adds	r4, r0, r2
 800901c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009020:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009024:	4293      	cmp	r3, r2
 8009026:	d103      	bne.n	8009030 <strncmp+0x1c>
 8009028:	42a0      	cmp	r0, r4
 800902a:	d001      	beq.n	8009030 <strncmp+0x1c>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1f5      	bne.n	800901c <strncmp+0x8>
 8009030:	1a98      	subs	r0, r3, r2
 8009032:	bd10      	pop	{r4, pc}
 8009034:	4610      	mov	r0, r2
 8009036:	e7fc      	b.n	8009032 <strncmp+0x1e>

08009038 <strncpy>:
 8009038:	4603      	mov	r3, r0
 800903a:	b510      	push	{r4, lr}
 800903c:	3901      	subs	r1, #1
 800903e:	b132      	cbz	r2, 800904e <strncpy+0x16>
 8009040:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009044:	3a01      	subs	r2, #1
 8009046:	f803 4b01 	strb.w	r4, [r3], #1
 800904a:	2c00      	cmp	r4, #0
 800904c:	d1f7      	bne.n	800903e <strncpy+0x6>
 800904e:	2100      	movs	r1, #0
 8009050:	441a      	add	r2, r3
 8009052:	4293      	cmp	r3, r2
 8009054:	d100      	bne.n	8009058 <strncpy+0x20>
 8009056:	bd10      	pop	{r4, pc}
 8009058:	f803 1b01 	strb.w	r1, [r3], #1
 800905c:	e7f9      	b.n	8009052 <strncpy+0x1a>

0800905e <sulp>:
 800905e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009062:	460f      	mov	r7, r1
 8009064:	4690      	mov	r8, r2
 8009066:	f001 fe37 	bl	800acd8 <__ulp>
 800906a:	4604      	mov	r4, r0
 800906c:	460d      	mov	r5, r1
 800906e:	f1b8 0f00 	cmp.w	r8, #0
 8009072:	d011      	beq.n	8009098 <sulp+0x3a>
 8009074:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009078:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800907c:	2b00      	cmp	r3, #0
 800907e:	dd0b      	ble.n	8009098 <sulp+0x3a>
 8009080:	2400      	movs	r4, #0
 8009082:	051b      	lsls	r3, r3, #20
 8009084:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009088:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800908c:	4622      	mov	r2, r4
 800908e:	462b      	mov	r3, r5
 8009090:	f7f7 fa22 	bl	80004d8 <__aeabi_dmul>
 8009094:	4604      	mov	r4, r0
 8009096:	460d      	mov	r5, r1
 8009098:	4620      	mov	r0, r4
 800909a:	4629      	mov	r1, r5
 800909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090a0 <_strtod_l>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	469b      	mov	fp, r3
 80090a6:	2300      	movs	r3, #0
 80090a8:	b0a1      	sub	sp, #132	; 0x84
 80090aa:	931c      	str	r3, [sp, #112]	; 0x70
 80090ac:	4ba1      	ldr	r3, [pc, #644]	; (8009334 <_strtod_l+0x294>)
 80090ae:	4682      	mov	sl, r0
 80090b0:	681f      	ldr	r7, [r3, #0]
 80090b2:	460e      	mov	r6, r1
 80090b4:	4638      	mov	r0, r7
 80090b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80090b8:	f7f7 f84a 	bl	8000150 <strlen>
 80090bc:	f04f 0800 	mov.w	r8, #0
 80090c0:	4604      	mov	r4, r0
 80090c2:	f04f 0900 	mov.w	r9, #0
 80090c6:	961b      	str	r6, [sp, #108]	; 0x6c
 80090c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090ca:	781a      	ldrb	r2, [r3, #0]
 80090cc:	2a2b      	cmp	r2, #43	; 0x2b
 80090ce:	d04c      	beq.n	800916a <_strtod_l+0xca>
 80090d0:	d83a      	bhi.n	8009148 <_strtod_l+0xa8>
 80090d2:	2a0d      	cmp	r2, #13
 80090d4:	d833      	bhi.n	800913e <_strtod_l+0x9e>
 80090d6:	2a08      	cmp	r2, #8
 80090d8:	d833      	bhi.n	8009142 <_strtod_l+0xa2>
 80090da:	2a00      	cmp	r2, #0
 80090dc:	d03d      	beq.n	800915a <_strtod_l+0xba>
 80090de:	2300      	movs	r3, #0
 80090e0:	930c      	str	r3, [sp, #48]	; 0x30
 80090e2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80090e4:	782b      	ldrb	r3, [r5, #0]
 80090e6:	2b30      	cmp	r3, #48	; 0x30
 80090e8:	f040 80af 	bne.w	800924a <_strtod_l+0x1aa>
 80090ec:	786b      	ldrb	r3, [r5, #1]
 80090ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090f2:	2b58      	cmp	r3, #88	; 0x58
 80090f4:	d16c      	bne.n	80091d0 <_strtod_l+0x130>
 80090f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090f8:	4650      	mov	r0, sl
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	ab1c      	add	r3, sp, #112	; 0x70
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	4a8d      	ldr	r2, [pc, #564]	; (8009338 <_strtod_l+0x298>)
 8009102:	f8cd b008 	str.w	fp, [sp, #8]
 8009106:	ab1d      	add	r3, sp, #116	; 0x74
 8009108:	a91b      	add	r1, sp, #108	; 0x6c
 800910a:	f000 ff47 	bl	8009f9c <__gethex>
 800910e:	f010 0607 	ands.w	r6, r0, #7
 8009112:	4604      	mov	r4, r0
 8009114:	d005      	beq.n	8009122 <_strtod_l+0x82>
 8009116:	2e06      	cmp	r6, #6
 8009118:	d129      	bne.n	800916e <_strtod_l+0xce>
 800911a:	2300      	movs	r3, #0
 800911c:	3501      	adds	r5, #1
 800911e:	951b      	str	r5, [sp, #108]	; 0x6c
 8009120:	930c      	str	r3, [sp, #48]	; 0x30
 8009122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009124:	2b00      	cmp	r3, #0
 8009126:	f040 8596 	bne.w	8009c56 <_strtod_l+0xbb6>
 800912a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800912c:	b1d3      	cbz	r3, 8009164 <_strtod_l+0xc4>
 800912e:	4642      	mov	r2, r8
 8009130:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009134:	4610      	mov	r0, r2
 8009136:	4619      	mov	r1, r3
 8009138:	b021      	add	sp, #132	; 0x84
 800913a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913e:	2a20      	cmp	r2, #32
 8009140:	d1cd      	bne.n	80090de <_strtod_l+0x3e>
 8009142:	3301      	adds	r3, #1
 8009144:	931b      	str	r3, [sp, #108]	; 0x6c
 8009146:	e7bf      	b.n	80090c8 <_strtod_l+0x28>
 8009148:	2a2d      	cmp	r2, #45	; 0x2d
 800914a:	d1c8      	bne.n	80090de <_strtod_l+0x3e>
 800914c:	2201      	movs	r2, #1
 800914e:	920c      	str	r2, [sp, #48]	; 0x30
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	921b      	str	r2, [sp, #108]	; 0x6c
 8009154:	785b      	ldrb	r3, [r3, #1]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1c3      	bne.n	80090e2 <_strtod_l+0x42>
 800915a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800915c:	961b      	str	r6, [sp, #108]	; 0x6c
 800915e:	2b00      	cmp	r3, #0
 8009160:	f040 8577 	bne.w	8009c52 <_strtod_l+0xbb2>
 8009164:	4642      	mov	r2, r8
 8009166:	464b      	mov	r3, r9
 8009168:	e7e4      	b.n	8009134 <_strtod_l+0x94>
 800916a:	2200      	movs	r2, #0
 800916c:	e7ef      	b.n	800914e <_strtod_l+0xae>
 800916e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009170:	b13a      	cbz	r2, 8009182 <_strtod_l+0xe2>
 8009172:	2135      	movs	r1, #53	; 0x35
 8009174:	a81e      	add	r0, sp, #120	; 0x78
 8009176:	f001 feb3 	bl	800aee0 <__copybits>
 800917a:	4650      	mov	r0, sl
 800917c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800917e:	f001 fa7b 	bl	800a678 <_Bfree>
 8009182:	3e01      	subs	r6, #1
 8009184:	2e05      	cmp	r6, #5
 8009186:	d807      	bhi.n	8009198 <_strtod_l+0xf8>
 8009188:	e8df f006 	tbb	[pc, r6]
 800918c:	1d180b0e 	.word	0x1d180b0e
 8009190:	030e      	.short	0x030e
 8009192:	f04f 0900 	mov.w	r9, #0
 8009196:	46c8      	mov	r8, r9
 8009198:	0721      	lsls	r1, r4, #28
 800919a:	d5c2      	bpl.n	8009122 <_strtod_l+0x82>
 800919c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80091a0:	e7bf      	b.n	8009122 <_strtod_l+0x82>
 80091a2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80091a6:	e7f7      	b.n	8009198 <_strtod_l+0xf8>
 80091a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80091aa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80091ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80091b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80091b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80091ba:	e7ed      	b.n	8009198 <_strtod_l+0xf8>
 80091bc:	f04f 0800 	mov.w	r8, #0
 80091c0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800933c <_strtod_l+0x29c>
 80091c4:	e7e8      	b.n	8009198 <_strtod_l+0xf8>
 80091c6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80091ca:	f04f 38ff 	mov.w	r8, #4294967295
 80091ce:	e7e3      	b.n	8009198 <_strtod_l+0xf8>
 80091d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	2b30      	cmp	r3, #48	; 0x30
 80091da:	d0f9      	beq.n	80091d0 <_strtod_l+0x130>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0a0      	beq.n	8009122 <_strtod_l+0x82>
 80091e0:	2301      	movs	r3, #1
 80091e2:	9307      	str	r3, [sp, #28]
 80091e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091e6:	220a      	movs	r2, #10
 80091e8:	9308      	str	r3, [sp, #32]
 80091ea:	2300      	movs	r3, #0
 80091ec:	469b      	mov	fp, r3
 80091ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80091f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80091f4:	7805      	ldrb	r5, [r0, #0]
 80091f6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80091fa:	b2d9      	uxtb	r1, r3
 80091fc:	2909      	cmp	r1, #9
 80091fe:	d926      	bls.n	800924e <_strtod_l+0x1ae>
 8009200:	4622      	mov	r2, r4
 8009202:	4639      	mov	r1, r7
 8009204:	f7ff ff06 	bl	8009014 <strncmp>
 8009208:	2800      	cmp	r0, #0
 800920a:	d032      	beq.n	8009272 <_strtod_l+0x1d2>
 800920c:	2000      	movs	r0, #0
 800920e:	462b      	mov	r3, r5
 8009210:	465c      	mov	r4, fp
 8009212:	4602      	mov	r2, r0
 8009214:	9004      	str	r0, [sp, #16]
 8009216:	2b65      	cmp	r3, #101	; 0x65
 8009218:	d001      	beq.n	800921e <_strtod_l+0x17e>
 800921a:	2b45      	cmp	r3, #69	; 0x45
 800921c:	d113      	bne.n	8009246 <_strtod_l+0x1a6>
 800921e:	b91c      	cbnz	r4, 8009228 <_strtod_l+0x188>
 8009220:	9b07      	ldr	r3, [sp, #28]
 8009222:	4303      	orrs	r3, r0
 8009224:	d099      	beq.n	800915a <_strtod_l+0xba>
 8009226:	2400      	movs	r4, #0
 8009228:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800922a:	1c73      	adds	r3, r6, #1
 800922c:	931b      	str	r3, [sp, #108]	; 0x6c
 800922e:	7873      	ldrb	r3, [r6, #1]
 8009230:	2b2b      	cmp	r3, #43	; 0x2b
 8009232:	d078      	beq.n	8009326 <_strtod_l+0x286>
 8009234:	2b2d      	cmp	r3, #45	; 0x2d
 8009236:	d07b      	beq.n	8009330 <_strtod_l+0x290>
 8009238:	2700      	movs	r7, #0
 800923a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800923e:	2909      	cmp	r1, #9
 8009240:	f240 8082 	bls.w	8009348 <_strtod_l+0x2a8>
 8009244:	961b      	str	r6, [sp, #108]	; 0x6c
 8009246:	2500      	movs	r5, #0
 8009248:	e09e      	b.n	8009388 <_strtod_l+0x2e8>
 800924a:	2300      	movs	r3, #0
 800924c:	e7c9      	b.n	80091e2 <_strtod_l+0x142>
 800924e:	f1bb 0f08 	cmp.w	fp, #8
 8009252:	bfd5      	itete	le
 8009254:	9906      	ldrle	r1, [sp, #24]
 8009256:	9905      	ldrgt	r1, [sp, #20]
 8009258:	fb02 3301 	mlale	r3, r2, r1, r3
 800925c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009260:	f100 0001 	add.w	r0, r0, #1
 8009264:	bfd4      	ite	le
 8009266:	9306      	strle	r3, [sp, #24]
 8009268:	9305      	strgt	r3, [sp, #20]
 800926a:	f10b 0b01 	add.w	fp, fp, #1
 800926e:	901b      	str	r0, [sp, #108]	; 0x6c
 8009270:	e7bf      	b.n	80091f2 <_strtod_l+0x152>
 8009272:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009274:	191a      	adds	r2, r3, r4
 8009276:	921b      	str	r2, [sp, #108]	; 0x6c
 8009278:	5d1b      	ldrb	r3, [r3, r4]
 800927a:	f1bb 0f00 	cmp.w	fp, #0
 800927e:	d036      	beq.n	80092ee <_strtod_l+0x24e>
 8009280:	465c      	mov	r4, fp
 8009282:	9004      	str	r0, [sp, #16]
 8009284:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009288:	2a09      	cmp	r2, #9
 800928a:	d912      	bls.n	80092b2 <_strtod_l+0x212>
 800928c:	2201      	movs	r2, #1
 800928e:	e7c2      	b.n	8009216 <_strtod_l+0x176>
 8009290:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009292:	3001      	adds	r0, #1
 8009294:	1c5a      	adds	r2, r3, #1
 8009296:	921b      	str	r2, [sp, #108]	; 0x6c
 8009298:	785b      	ldrb	r3, [r3, #1]
 800929a:	2b30      	cmp	r3, #48	; 0x30
 800929c:	d0f8      	beq.n	8009290 <_strtod_l+0x1f0>
 800929e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80092a2:	2a08      	cmp	r2, #8
 80092a4:	f200 84dc 	bhi.w	8009c60 <_strtod_l+0xbc0>
 80092a8:	9004      	str	r0, [sp, #16]
 80092aa:	2000      	movs	r0, #0
 80092ac:	4604      	mov	r4, r0
 80092ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80092b0:	9208      	str	r2, [sp, #32]
 80092b2:	3b30      	subs	r3, #48	; 0x30
 80092b4:	f100 0201 	add.w	r2, r0, #1
 80092b8:	d013      	beq.n	80092e2 <_strtod_l+0x242>
 80092ba:	9904      	ldr	r1, [sp, #16]
 80092bc:	1905      	adds	r5, r0, r4
 80092be:	4411      	add	r1, r2
 80092c0:	9104      	str	r1, [sp, #16]
 80092c2:	4622      	mov	r2, r4
 80092c4:	210a      	movs	r1, #10
 80092c6:	42aa      	cmp	r2, r5
 80092c8:	d113      	bne.n	80092f2 <_strtod_l+0x252>
 80092ca:	1822      	adds	r2, r4, r0
 80092cc:	2a08      	cmp	r2, #8
 80092ce:	f104 0401 	add.w	r4, r4, #1
 80092d2:	4404      	add	r4, r0
 80092d4:	dc1b      	bgt.n	800930e <_strtod_l+0x26e>
 80092d6:	220a      	movs	r2, #10
 80092d8:	9906      	ldr	r1, [sp, #24]
 80092da:	fb02 3301 	mla	r3, r2, r1, r3
 80092de:	9306      	str	r3, [sp, #24]
 80092e0:	2200      	movs	r2, #0
 80092e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092e4:	4610      	mov	r0, r2
 80092e6:	1c59      	adds	r1, r3, #1
 80092e8:	911b      	str	r1, [sp, #108]	; 0x6c
 80092ea:	785b      	ldrb	r3, [r3, #1]
 80092ec:	e7ca      	b.n	8009284 <_strtod_l+0x1e4>
 80092ee:	4658      	mov	r0, fp
 80092f0:	e7d3      	b.n	800929a <_strtod_l+0x1fa>
 80092f2:	2a08      	cmp	r2, #8
 80092f4:	dc04      	bgt.n	8009300 <_strtod_l+0x260>
 80092f6:	9f06      	ldr	r7, [sp, #24]
 80092f8:	434f      	muls	r7, r1
 80092fa:	9706      	str	r7, [sp, #24]
 80092fc:	3201      	adds	r2, #1
 80092fe:	e7e2      	b.n	80092c6 <_strtod_l+0x226>
 8009300:	1c57      	adds	r7, r2, #1
 8009302:	2f10      	cmp	r7, #16
 8009304:	bfde      	ittt	le
 8009306:	9f05      	ldrle	r7, [sp, #20]
 8009308:	434f      	mulle	r7, r1
 800930a:	9705      	strle	r7, [sp, #20]
 800930c:	e7f6      	b.n	80092fc <_strtod_l+0x25c>
 800930e:	2c10      	cmp	r4, #16
 8009310:	bfdf      	itttt	le
 8009312:	220a      	movle	r2, #10
 8009314:	9905      	ldrle	r1, [sp, #20]
 8009316:	fb02 3301 	mlale	r3, r2, r1, r3
 800931a:	9305      	strle	r3, [sp, #20]
 800931c:	e7e0      	b.n	80092e0 <_strtod_l+0x240>
 800931e:	2300      	movs	r3, #0
 8009320:	2201      	movs	r2, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	e77c      	b.n	8009220 <_strtod_l+0x180>
 8009326:	2700      	movs	r7, #0
 8009328:	1cb3      	adds	r3, r6, #2
 800932a:	931b      	str	r3, [sp, #108]	; 0x6c
 800932c:	78b3      	ldrb	r3, [r6, #2]
 800932e:	e784      	b.n	800923a <_strtod_l+0x19a>
 8009330:	2701      	movs	r7, #1
 8009332:	e7f9      	b.n	8009328 <_strtod_l+0x288>
 8009334:	0800c104 	.word	0x0800c104
 8009338:	0800bfd8 	.word	0x0800bfd8
 800933c:	7ff00000 	.word	0x7ff00000
 8009340:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009342:	1c59      	adds	r1, r3, #1
 8009344:	911b      	str	r1, [sp, #108]	; 0x6c
 8009346:	785b      	ldrb	r3, [r3, #1]
 8009348:	2b30      	cmp	r3, #48	; 0x30
 800934a:	d0f9      	beq.n	8009340 <_strtod_l+0x2a0>
 800934c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009350:	2908      	cmp	r1, #8
 8009352:	f63f af78 	bhi.w	8009246 <_strtod_l+0x1a6>
 8009356:	f04f 0e0a 	mov.w	lr, #10
 800935a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800935e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009360:	9309      	str	r3, [sp, #36]	; 0x24
 8009362:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009364:	1c59      	adds	r1, r3, #1
 8009366:	911b      	str	r1, [sp, #108]	; 0x6c
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800936e:	2d09      	cmp	r5, #9
 8009370:	d935      	bls.n	80093de <_strtod_l+0x33e>
 8009372:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009374:	1b49      	subs	r1, r1, r5
 8009376:	2908      	cmp	r1, #8
 8009378:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800937c:	dc02      	bgt.n	8009384 <_strtod_l+0x2e4>
 800937e:	4565      	cmp	r5, ip
 8009380:	bfa8      	it	ge
 8009382:	4665      	movge	r5, ip
 8009384:	b107      	cbz	r7, 8009388 <_strtod_l+0x2e8>
 8009386:	426d      	negs	r5, r5
 8009388:	2c00      	cmp	r4, #0
 800938a:	d14c      	bne.n	8009426 <_strtod_l+0x386>
 800938c:	9907      	ldr	r1, [sp, #28]
 800938e:	4301      	orrs	r1, r0
 8009390:	f47f aec7 	bne.w	8009122 <_strtod_l+0x82>
 8009394:	2a00      	cmp	r2, #0
 8009396:	f47f aee0 	bne.w	800915a <_strtod_l+0xba>
 800939a:	2b69      	cmp	r3, #105	; 0x69
 800939c:	d026      	beq.n	80093ec <_strtod_l+0x34c>
 800939e:	dc23      	bgt.n	80093e8 <_strtod_l+0x348>
 80093a0:	2b49      	cmp	r3, #73	; 0x49
 80093a2:	d023      	beq.n	80093ec <_strtod_l+0x34c>
 80093a4:	2b4e      	cmp	r3, #78	; 0x4e
 80093a6:	f47f aed8 	bne.w	800915a <_strtod_l+0xba>
 80093aa:	499c      	ldr	r1, [pc, #624]	; (800961c <_strtod_l+0x57c>)
 80093ac:	a81b      	add	r0, sp, #108	; 0x6c
 80093ae:	f001 f843 	bl	800a438 <__match>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f43f aed1 	beq.w	800915a <_strtod_l+0xba>
 80093b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b28      	cmp	r3, #40	; 0x28
 80093be:	d12c      	bne.n	800941a <_strtod_l+0x37a>
 80093c0:	4997      	ldr	r1, [pc, #604]	; (8009620 <_strtod_l+0x580>)
 80093c2:	aa1e      	add	r2, sp, #120	; 0x78
 80093c4:	a81b      	add	r0, sp, #108	; 0x6c
 80093c6:	f001 f84b 	bl	800a460 <__hexnan>
 80093ca:	2805      	cmp	r0, #5
 80093cc:	d125      	bne.n	800941a <_strtod_l+0x37a>
 80093ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093d0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80093d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80093d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80093dc:	e6a1      	b.n	8009122 <_strtod_l+0x82>
 80093de:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80093e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80093e6:	e7bc      	b.n	8009362 <_strtod_l+0x2c2>
 80093e8:	2b6e      	cmp	r3, #110	; 0x6e
 80093ea:	e7dc      	b.n	80093a6 <_strtod_l+0x306>
 80093ec:	498d      	ldr	r1, [pc, #564]	; (8009624 <_strtod_l+0x584>)
 80093ee:	a81b      	add	r0, sp, #108	; 0x6c
 80093f0:	f001 f822 	bl	800a438 <__match>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f43f aeb0 	beq.w	800915a <_strtod_l+0xba>
 80093fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093fc:	498a      	ldr	r1, [pc, #552]	; (8009628 <_strtod_l+0x588>)
 80093fe:	3b01      	subs	r3, #1
 8009400:	a81b      	add	r0, sp, #108	; 0x6c
 8009402:	931b      	str	r3, [sp, #108]	; 0x6c
 8009404:	f001 f818 	bl	800a438 <__match>
 8009408:	b910      	cbnz	r0, 8009410 <_strtod_l+0x370>
 800940a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800940c:	3301      	adds	r3, #1
 800940e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009410:	f04f 0800 	mov.w	r8, #0
 8009414:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009638 <_strtod_l+0x598>
 8009418:	e683      	b.n	8009122 <_strtod_l+0x82>
 800941a:	4884      	ldr	r0, [pc, #528]	; (800962c <_strtod_l+0x58c>)
 800941c:	f002 f9fc 	bl	800b818 <nan>
 8009420:	4680      	mov	r8, r0
 8009422:	4689      	mov	r9, r1
 8009424:	e67d      	b.n	8009122 <_strtod_l+0x82>
 8009426:	9b04      	ldr	r3, [sp, #16]
 8009428:	f1bb 0f00 	cmp.w	fp, #0
 800942c:	bf08      	it	eq
 800942e:	46a3      	moveq	fp, r4
 8009430:	1aeb      	subs	r3, r5, r3
 8009432:	2c10      	cmp	r4, #16
 8009434:	9806      	ldr	r0, [sp, #24]
 8009436:	4626      	mov	r6, r4
 8009438:	9307      	str	r3, [sp, #28]
 800943a:	bfa8      	it	ge
 800943c:	2610      	movge	r6, #16
 800943e:	f7f6 ffd1 	bl	80003e4 <__aeabi_ui2d>
 8009442:	2c09      	cmp	r4, #9
 8009444:	4680      	mov	r8, r0
 8009446:	4689      	mov	r9, r1
 8009448:	dd13      	ble.n	8009472 <_strtod_l+0x3d2>
 800944a:	4b79      	ldr	r3, [pc, #484]	; (8009630 <_strtod_l+0x590>)
 800944c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009450:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009454:	f7f7 f840 	bl	80004d8 <__aeabi_dmul>
 8009458:	4680      	mov	r8, r0
 800945a:	9805      	ldr	r0, [sp, #20]
 800945c:	4689      	mov	r9, r1
 800945e:	f7f6 ffc1 	bl	80003e4 <__aeabi_ui2d>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4640      	mov	r0, r8
 8009468:	4649      	mov	r1, r9
 800946a:	f7f6 fe7f 	bl	800016c <__adddf3>
 800946e:	4680      	mov	r8, r0
 8009470:	4689      	mov	r9, r1
 8009472:	2c0f      	cmp	r4, #15
 8009474:	dc36      	bgt.n	80094e4 <_strtod_l+0x444>
 8009476:	9b07      	ldr	r3, [sp, #28]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f43f ae52 	beq.w	8009122 <_strtod_l+0x82>
 800947e:	dd22      	ble.n	80094c6 <_strtod_l+0x426>
 8009480:	2b16      	cmp	r3, #22
 8009482:	dc09      	bgt.n	8009498 <_strtod_l+0x3f8>
 8009484:	4c6a      	ldr	r4, [pc, #424]	; (8009630 <_strtod_l+0x590>)
 8009486:	4642      	mov	r2, r8
 8009488:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800948c:	464b      	mov	r3, r9
 800948e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009492:	f7f7 f821 	bl	80004d8 <__aeabi_dmul>
 8009496:	e7c3      	b.n	8009420 <_strtod_l+0x380>
 8009498:	9a07      	ldr	r2, [sp, #28]
 800949a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800949e:	4293      	cmp	r3, r2
 80094a0:	db20      	blt.n	80094e4 <_strtod_l+0x444>
 80094a2:	4d63      	ldr	r5, [pc, #396]	; (8009630 <_strtod_l+0x590>)
 80094a4:	f1c4 040f 	rsb	r4, r4, #15
 80094a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80094ac:	4642      	mov	r2, r8
 80094ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094b2:	464b      	mov	r3, r9
 80094b4:	f7f7 f810 	bl	80004d8 <__aeabi_dmul>
 80094b8:	9b07      	ldr	r3, [sp, #28]
 80094ba:	1b1c      	subs	r4, r3, r4
 80094bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80094c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094c4:	e7e5      	b.n	8009492 <_strtod_l+0x3f2>
 80094c6:	9b07      	ldr	r3, [sp, #28]
 80094c8:	3316      	adds	r3, #22
 80094ca:	db0b      	blt.n	80094e4 <_strtod_l+0x444>
 80094cc:	9b04      	ldr	r3, [sp, #16]
 80094ce:	4a58      	ldr	r2, [pc, #352]	; (8009630 <_strtod_l+0x590>)
 80094d0:	1b5d      	subs	r5, r3, r5
 80094d2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80094d6:	4640      	mov	r0, r8
 80094d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f7 f925 	bl	800072c <__aeabi_ddiv>
 80094e2:	e79d      	b.n	8009420 <_strtod_l+0x380>
 80094e4:	9b07      	ldr	r3, [sp, #28]
 80094e6:	1ba6      	subs	r6, r4, r6
 80094e8:	441e      	add	r6, r3
 80094ea:	2e00      	cmp	r6, #0
 80094ec:	dd71      	ble.n	80095d2 <_strtod_l+0x532>
 80094ee:	f016 030f 	ands.w	r3, r6, #15
 80094f2:	d00a      	beq.n	800950a <_strtod_l+0x46a>
 80094f4:	494e      	ldr	r1, [pc, #312]	; (8009630 <_strtod_l+0x590>)
 80094f6:	4642      	mov	r2, r8
 80094f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009500:	464b      	mov	r3, r9
 8009502:	f7f6 ffe9 	bl	80004d8 <__aeabi_dmul>
 8009506:	4680      	mov	r8, r0
 8009508:	4689      	mov	r9, r1
 800950a:	f036 060f 	bics.w	r6, r6, #15
 800950e:	d050      	beq.n	80095b2 <_strtod_l+0x512>
 8009510:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009514:	dd27      	ble.n	8009566 <_strtod_l+0x4c6>
 8009516:	f04f 0b00 	mov.w	fp, #0
 800951a:	f8cd b010 	str.w	fp, [sp, #16]
 800951e:	f8cd b020 	str.w	fp, [sp, #32]
 8009522:	f8cd b018 	str.w	fp, [sp, #24]
 8009526:	2322      	movs	r3, #34	; 0x22
 8009528:	f04f 0800 	mov.w	r8, #0
 800952c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009638 <_strtod_l+0x598>
 8009530:	f8ca 3000 	str.w	r3, [sl]
 8009534:	9b08      	ldr	r3, [sp, #32]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f43f adf3 	beq.w	8009122 <_strtod_l+0x82>
 800953c:	4650      	mov	r0, sl
 800953e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009540:	f001 f89a 	bl	800a678 <_Bfree>
 8009544:	4650      	mov	r0, sl
 8009546:	9906      	ldr	r1, [sp, #24]
 8009548:	f001 f896 	bl	800a678 <_Bfree>
 800954c:	4650      	mov	r0, sl
 800954e:	9904      	ldr	r1, [sp, #16]
 8009550:	f001 f892 	bl	800a678 <_Bfree>
 8009554:	4650      	mov	r0, sl
 8009556:	9908      	ldr	r1, [sp, #32]
 8009558:	f001 f88e 	bl	800a678 <_Bfree>
 800955c:	4659      	mov	r1, fp
 800955e:	4650      	mov	r0, sl
 8009560:	f001 f88a 	bl	800a678 <_Bfree>
 8009564:	e5dd      	b.n	8009122 <_strtod_l+0x82>
 8009566:	2300      	movs	r3, #0
 8009568:	4640      	mov	r0, r8
 800956a:	4649      	mov	r1, r9
 800956c:	461f      	mov	r7, r3
 800956e:	1136      	asrs	r6, r6, #4
 8009570:	2e01      	cmp	r6, #1
 8009572:	dc21      	bgt.n	80095b8 <_strtod_l+0x518>
 8009574:	b10b      	cbz	r3, 800957a <_strtod_l+0x4da>
 8009576:	4680      	mov	r8, r0
 8009578:	4689      	mov	r9, r1
 800957a:	4b2e      	ldr	r3, [pc, #184]	; (8009634 <_strtod_l+0x594>)
 800957c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009580:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009584:	4642      	mov	r2, r8
 8009586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800958a:	464b      	mov	r3, r9
 800958c:	f7f6 ffa4 	bl	80004d8 <__aeabi_dmul>
 8009590:	4b29      	ldr	r3, [pc, #164]	; (8009638 <_strtod_l+0x598>)
 8009592:	460a      	mov	r2, r1
 8009594:	400b      	ands	r3, r1
 8009596:	4929      	ldr	r1, [pc, #164]	; (800963c <_strtod_l+0x59c>)
 8009598:	4680      	mov	r8, r0
 800959a:	428b      	cmp	r3, r1
 800959c:	d8bb      	bhi.n	8009516 <_strtod_l+0x476>
 800959e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80095a2:	428b      	cmp	r3, r1
 80095a4:	bf86      	itte	hi
 80095a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80095aa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009640 <_strtod_l+0x5a0>
 80095ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80095b2:	2300      	movs	r3, #0
 80095b4:	9305      	str	r3, [sp, #20]
 80095b6:	e07e      	b.n	80096b6 <_strtod_l+0x616>
 80095b8:	07f2      	lsls	r2, r6, #31
 80095ba:	d507      	bpl.n	80095cc <_strtod_l+0x52c>
 80095bc:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <_strtod_l+0x594>)
 80095be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	f7f6 ff87 	bl	80004d8 <__aeabi_dmul>
 80095ca:	2301      	movs	r3, #1
 80095cc:	3701      	adds	r7, #1
 80095ce:	1076      	asrs	r6, r6, #1
 80095d0:	e7ce      	b.n	8009570 <_strtod_l+0x4d0>
 80095d2:	d0ee      	beq.n	80095b2 <_strtod_l+0x512>
 80095d4:	4276      	negs	r6, r6
 80095d6:	f016 020f 	ands.w	r2, r6, #15
 80095da:	d00a      	beq.n	80095f2 <_strtod_l+0x552>
 80095dc:	4b14      	ldr	r3, [pc, #80]	; (8009630 <_strtod_l+0x590>)
 80095de:	4640      	mov	r0, r8
 80095e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095e4:	4649      	mov	r1, r9
 80095e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ea:	f7f7 f89f 	bl	800072c <__aeabi_ddiv>
 80095ee:	4680      	mov	r8, r0
 80095f0:	4689      	mov	r9, r1
 80095f2:	1136      	asrs	r6, r6, #4
 80095f4:	d0dd      	beq.n	80095b2 <_strtod_l+0x512>
 80095f6:	2e1f      	cmp	r6, #31
 80095f8:	dd24      	ble.n	8009644 <_strtod_l+0x5a4>
 80095fa:	f04f 0b00 	mov.w	fp, #0
 80095fe:	f8cd b010 	str.w	fp, [sp, #16]
 8009602:	f8cd b020 	str.w	fp, [sp, #32]
 8009606:	f8cd b018 	str.w	fp, [sp, #24]
 800960a:	2322      	movs	r3, #34	; 0x22
 800960c:	f04f 0800 	mov.w	r8, #0
 8009610:	f04f 0900 	mov.w	r9, #0
 8009614:	f8ca 3000 	str.w	r3, [sl]
 8009618:	e78c      	b.n	8009534 <_strtod_l+0x494>
 800961a:	bf00      	nop
 800961c:	0800bfd5 	.word	0x0800bfd5
 8009620:	0800bfec 	.word	0x0800bfec
 8009624:	0800bfcc 	.word	0x0800bfcc
 8009628:	0800bfcf 	.word	0x0800bfcf
 800962c:	0800c2fa 	.word	0x0800c2fa
 8009630:	0800c1b8 	.word	0x0800c1b8
 8009634:	0800c190 	.word	0x0800c190
 8009638:	7ff00000 	.word	0x7ff00000
 800963c:	7ca00000 	.word	0x7ca00000
 8009640:	7fefffff 	.word	0x7fefffff
 8009644:	f016 0310 	ands.w	r3, r6, #16
 8009648:	bf18      	it	ne
 800964a:	236a      	movne	r3, #106	; 0x6a
 800964c:	4640      	mov	r0, r8
 800964e:	9305      	str	r3, [sp, #20]
 8009650:	4649      	mov	r1, r9
 8009652:	2300      	movs	r3, #0
 8009654:	4fb2      	ldr	r7, [pc, #712]	; (8009920 <_strtod_l+0x880>)
 8009656:	07f2      	lsls	r2, r6, #31
 8009658:	d504      	bpl.n	8009664 <_strtod_l+0x5c4>
 800965a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800965e:	f7f6 ff3b 	bl	80004d8 <__aeabi_dmul>
 8009662:	2301      	movs	r3, #1
 8009664:	1076      	asrs	r6, r6, #1
 8009666:	f107 0708 	add.w	r7, r7, #8
 800966a:	d1f4      	bne.n	8009656 <_strtod_l+0x5b6>
 800966c:	b10b      	cbz	r3, 8009672 <_strtod_l+0x5d2>
 800966e:	4680      	mov	r8, r0
 8009670:	4689      	mov	r9, r1
 8009672:	9b05      	ldr	r3, [sp, #20]
 8009674:	b1bb      	cbz	r3, 80096a6 <_strtod_l+0x606>
 8009676:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800967a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800967e:	2b00      	cmp	r3, #0
 8009680:	4649      	mov	r1, r9
 8009682:	dd10      	ble.n	80096a6 <_strtod_l+0x606>
 8009684:	2b1f      	cmp	r3, #31
 8009686:	f340 812b 	ble.w	80098e0 <_strtod_l+0x840>
 800968a:	2b34      	cmp	r3, #52	; 0x34
 800968c:	bfd8      	it	le
 800968e:	f04f 32ff 	movle.w	r2, #4294967295
 8009692:	f04f 0800 	mov.w	r8, #0
 8009696:	bfcf      	iteee	gt
 8009698:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800969c:	3b20      	suble	r3, #32
 800969e:	fa02 f303 	lslle.w	r3, r2, r3
 80096a2:	ea03 0901 	andle.w	r9, r3, r1
 80096a6:	2200      	movs	r2, #0
 80096a8:	2300      	movs	r3, #0
 80096aa:	4640      	mov	r0, r8
 80096ac:	4649      	mov	r1, r9
 80096ae:	f7f7 f97b 	bl	80009a8 <__aeabi_dcmpeq>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d1a1      	bne.n	80095fa <_strtod_l+0x55a>
 80096b6:	9b06      	ldr	r3, [sp, #24]
 80096b8:	465a      	mov	r2, fp
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	4650      	mov	r0, sl
 80096be:	4623      	mov	r3, r4
 80096c0:	9908      	ldr	r1, [sp, #32]
 80096c2:	f001 f845 	bl	800a750 <__s2b>
 80096c6:	9008      	str	r0, [sp, #32]
 80096c8:	2800      	cmp	r0, #0
 80096ca:	f43f af24 	beq.w	8009516 <_strtod_l+0x476>
 80096ce:	9b04      	ldr	r3, [sp, #16]
 80096d0:	f04f 0b00 	mov.w	fp, #0
 80096d4:	1b5d      	subs	r5, r3, r5
 80096d6:	9b07      	ldr	r3, [sp, #28]
 80096d8:	f8cd b010 	str.w	fp, [sp, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bfb4      	ite	lt
 80096e0:	462b      	movlt	r3, r5
 80096e2:	2300      	movge	r3, #0
 80096e4:	930e      	str	r3, [sp, #56]	; 0x38
 80096e6:	9b07      	ldr	r3, [sp, #28]
 80096e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80096ec:	9316      	str	r3, [sp, #88]	; 0x58
 80096ee:	9b08      	ldr	r3, [sp, #32]
 80096f0:	4650      	mov	r0, sl
 80096f2:	6859      	ldr	r1, [r3, #4]
 80096f4:	f000 ff80 	bl	800a5f8 <_Balloc>
 80096f8:	9006      	str	r0, [sp, #24]
 80096fa:	2800      	cmp	r0, #0
 80096fc:	f43f af13 	beq.w	8009526 <_strtod_l+0x486>
 8009700:	9b08      	ldr	r3, [sp, #32]
 8009702:	300c      	adds	r0, #12
 8009704:	691a      	ldr	r2, [r3, #16]
 8009706:	f103 010c 	add.w	r1, r3, #12
 800970a:	3202      	adds	r2, #2
 800970c:	0092      	lsls	r2, r2, #2
 800970e:	f000 ff58 	bl	800a5c2 <memcpy>
 8009712:	ab1e      	add	r3, sp, #120	; 0x78
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	ab1d      	add	r3, sp, #116	; 0x74
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	4642      	mov	r2, r8
 800971c:	464b      	mov	r3, r9
 800971e:	4650      	mov	r0, sl
 8009720:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8009724:	f001 fb52 	bl	800adcc <__d2b>
 8009728:	901c      	str	r0, [sp, #112]	; 0x70
 800972a:	2800      	cmp	r0, #0
 800972c:	f43f aefb 	beq.w	8009526 <_strtod_l+0x486>
 8009730:	2101      	movs	r1, #1
 8009732:	4650      	mov	r0, sl
 8009734:	f001 f8a4 	bl	800a880 <__i2b>
 8009738:	4603      	mov	r3, r0
 800973a:	9004      	str	r0, [sp, #16]
 800973c:	2800      	cmp	r0, #0
 800973e:	f43f aef2 	beq.w	8009526 <_strtod_l+0x486>
 8009742:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009744:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009746:	2d00      	cmp	r5, #0
 8009748:	bfab      	itete	ge
 800974a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800974c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800974e:	18ee      	addge	r6, r5, r3
 8009750:	1b5c      	sublt	r4, r3, r5
 8009752:	9b05      	ldr	r3, [sp, #20]
 8009754:	bfa8      	it	ge
 8009756:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009758:	eba5 0503 	sub.w	r5, r5, r3
 800975c:	4415      	add	r5, r2
 800975e:	4b71      	ldr	r3, [pc, #452]	; (8009924 <_strtod_l+0x884>)
 8009760:	f105 35ff 	add.w	r5, r5, #4294967295
 8009764:	bfb8      	it	lt
 8009766:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009768:	429d      	cmp	r5, r3
 800976a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800976e:	f280 80c9 	bge.w	8009904 <_strtod_l+0x864>
 8009772:	1b5b      	subs	r3, r3, r5
 8009774:	2b1f      	cmp	r3, #31
 8009776:	f04f 0701 	mov.w	r7, #1
 800977a:	eba2 0203 	sub.w	r2, r2, r3
 800977e:	f300 80b6 	bgt.w	80098ee <_strtod_l+0x84e>
 8009782:	2500      	movs	r5, #0
 8009784:	fa07 f303 	lsl.w	r3, r7, r3
 8009788:	930f      	str	r3, [sp, #60]	; 0x3c
 800978a:	18b7      	adds	r7, r6, r2
 800978c:	9b05      	ldr	r3, [sp, #20]
 800978e:	42be      	cmp	r6, r7
 8009790:	4414      	add	r4, r2
 8009792:	441c      	add	r4, r3
 8009794:	4633      	mov	r3, r6
 8009796:	bfa8      	it	ge
 8009798:	463b      	movge	r3, r7
 800979a:	42a3      	cmp	r3, r4
 800979c:	bfa8      	it	ge
 800979e:	4623      	movge	r3, r4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	bfc2      	ittt	gt
 80097a4:	1aff      	subgt	r7, r7, r3
 80097a6:	1ae4      	subgt	r4, r4, r3
 80097a8:	1af6      	subgt	r6, r6, r3
 80097aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dd17      	ble.n	80097e0 <_strtod_l+0x740>
 80097b0:	461a      	mov	r2, r3
 80097b2:	4650      	mov	r0, sl
 80097b4:	9904      	ldr	r1, [sp, #16]
 80097b6:	f001 f91d 	bl	800a9f4 <__pow5mult>
 80097ba:	9004      	str	r0, [sp, #16]
 80097bc:	2800      	cmp	r0, #0
 80097be:	f43f aeb2 	beq.w	8009526 <_strtod_l+0x486>
 80097c2:	4601      	mov	r1, r0
 80097c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097c6:	4650      	mov	r0, sl
 80097c8:	f001 f870 	bl	800a8ac <__multiply>
 80097cc:	9009      	str	r0, [sp, #36]	; 0x24
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f43f aea9 	beq.w	8009526 <_strtod_l+0x486>
 80097d4:	4650      	mov	r0, sl
 80097d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80097d8:	f000 ff4e 	bl	800a678 <_Bfree>
 80097dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097de:	931c      	str	r3, [sp, #112]	; 0x70
 80097e0:	2f00      	cmp	r7, #0
 80097e2:	f300 8093 	bgt.w	800990c <_strtod_l+0x86c>
 80097e6:	9b07      	ldr	r3, [sp, #28]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	dd08      	ble.n	80097fe <_strtod_l+0x75e>
 80097ec:	4650      	mov	r0, sl
 80097ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80097f0:	9906      	ldr	r1, [sp, #24]
 80097f2:	f001 f8ff 	bl	800a9f4 <__pow5mult>
 80097f6:	9006      	str	r0, [sp, #24]
 80097f8:	2800      	cmp	r0, #0
 80097fa:	f43f ae94 	beq.w	8009526 <_strtod_l+0x486>
 80097fe:	2c00      	cmp	r4, #0
 8009800:	dd08      	ble.n	8009814 <_strtod_l+0x774>
 8009802:	4622      	mov	r2, r4
 8009804:	4650      	mov	r0, sl
 8009806:	9906      	ldr	r1, [sp, #24]
 8009808:	f001 f94e 	bl	800aaa8 <__lshift>
 800980c:	9006      	str	r0, [sp, #24]
 800980e:	2800      	cmp	r0, #0
 8009810:	f43f ae89 	beq.w	8009526 <_strtod_l+0x486>
 8009814:	2e00      	cmp	r6, #0
 8009816:	dd08      	ble.n	800982a <_strtod_l+0x78a>
 8009818:	4632      	mov	r2, r6
 800981a:	4650      	mov	r0, sl
 800981c:	9904      	ldr	r1, [sp, #16]
 800981e:	f001 f943 	bl	800aaa8 <__lshift>
 8009822:	9004      	str	r0, [sp, #16]
 8009824:	2800      	cmp	r0, #0
 8009826:	f43f ae7e 	beq.w	8009526 <_strtod_l+0x486>
 800982a:	4650      	mov	r0, sl
 800982c:	9a06      	ldr	r2, [sp, #24]
 800982e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009830:	f001 f9c2 	bl	800abb8 <__mdiff>
 8009834:	4683      	mov	fp, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	f43f ae75 	beq.w	8009526 <_strtod_l+0x486>
 800983c:	2400      	movs	r4, #0
 800983e:	68c3      	ldr	r3, [r0, #12]
 8009840:	9904      	ldr	r1, [sp, #16]
 8009842:	60c4      	str	r4, [r0, #12]
 8009844:	930d      	str	r3, [sp, #52]	; 0x34
 8009846:	f001 f99b 	bl	800ab80 <__mcmp>
 800984a:	42a0      	cmp	r0, r4
 800984c:	da70      	bge.n	8009930 <_strtod_l+0x890>
 800984e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009850:	ea53 0308 	orrs.w	r3, r3, r8
 8009854:	f040 8096 	bne.w	8009984 <_strtod_l+0x8e4>
 8009858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800985c:	2b00      	cmp	r3, #0
 800985e:	f040 8091 	bne.w	8009984 <_strtod_l+0x8e4>
 8009862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009866:	0d1b      	lsrs	r3, r3, #20
 8009868:	051b      	lsls	r3, r3, #20
 800986a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800986e:	f240 8089 	bls.w	8009984 <_strtod_l+0x8e4>
 8009872:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009876:	b923      	cbnz	r3, 8009882 <_strtod_l+0x7e2>
 8009878:	f8db 3010 	ldr.w	r3, [fp, #16]
 800987c:	2b01      	cmp	r3, #1
 800987e:	f340 8081 	ble.w	8009984 <_strtod_l+0x8e4>
 8009882:	4659      	mov	r1, fp
 8009884:	2201      	movs	r2, #1
 8009886:	4650      	mov	r0, sl
 8009888:	f001 f90e 	bl	800aaa8 <__lshift>
 800988c:	9904      	ldr	r1, [sp, #16]
 800988e:	4683      	mov	fp, r0
 8009890:	f001 f976 	bl	800ab80 <__mcmp>
 8009894:	2800      	cmp	r0, #0
 8009896:	dd75      	ble.n	8009984 <_strtod_l+0x8e4>
 8009898:	9905      	ldr	r1, [sp, #20]
 800989a:	464b      	mov	r3, r9
 800989c:	4a22      	ldr	r2, [pc, #136]	; (8009928 <_strtod_l+0x888>)
 800989e:	2900      	cmp	r1, #0
 80098a0:	f000 8091 	beq.w	80099c6 <_strtod_l+0x926>
 80098a4:	ea02 0109 	and.w	r1, r2, r9
 80098a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80098ac:	f300 808b 	bgt.w	80099c6 <_strtod_l+0x926>
 80098b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80098b4:	f77f aea9 	ble.w	800960a <_strtod_l+0x56a>
 80098b8:	2300      	movs	r3, #0
 80098ba:	4a1c      	ldr	r2, [pc, #112]	; (800992c <_strtod_l+0x88c>)
 80098bc:	4640      	mov	r0, r8
 80098be:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80098c2:	4649      	mov	r1, r9
 80098c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80098c8:	f7f6 fe06 	bl	80004d8 <__aeabi_dmul>
 80098cc:	460b      	mov	r3, r1
 80098ce:	4303      	orrs	r3, r0
 80098d0:	bf08      	it	eq
 80098d2:	2322      	moveq	r3, #34	; 0x22
 80098d4:	4680      	mov	r8, r0
 80098d6:	4689      	mov	r9, r1
 80098d8:	bf08      	it	eq
 80098da:	f8ca 3000 	streq.w	r3, [sl]
 80098de:	e62d      	b.n	800953c <_strtod_l+0x49c>
 80098e0:	f04f 32ff 	mov.w	r2, #4294967295
 80098e4:	fa02 f303 	lsl.w	r3, r2, r3
 80098e8:	ea03 0808 	and.w	r8, r3, r8
 80098ec:	e6db      	b.n	80096a6 <_strtod_l+0x606>
 80098ee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80098f2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80098f6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80098fa:	35e2      	adds	r5, #226	; 0xe2
 80098fc:	fa07 f505 	lsl.w	r5, r7, r5
 8009900:	970f      	str	r7, [sp, #60]	; 0x3c
 8009902:	e742      	b.n	800978a <_strtod_l+0x6ea>
 8009904:	2301      	movs	r3, #1
 8009906:	2500      	movs	r5, #0
 8009908:	930f      	str	r3, [sp, #60]	; 0x3c
 800990a:	e73e      	b.n	800978a <_strtod_l+0x6ea>
 800990c:	463a      	mov	r2, r7
 800990e:	4650      	mov	r0, sl
 8009910:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009912:	f001 f8c9 	bl	800aaa8 <__lshift>
 8009916:	901c      	str	r0, [sp, #112]	; 0x70
 8009918:	2800      	cmp	r0, #0
 800991a:	f47f af64 	bne.w	80097e6 <_strtod_l+0x746>
 800991e:	e602      	b.n	8009526 <_strtod_l+0x486>
 8009920:	0800c000 	.word	0x0800c000
 8009924:	fffffc02 	.word	0xfffffc02
 8009928:	7ff00000 	.word	0x7ff00000
 800992c:	39500000 	.word	0x39500000
 8009930:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009934:	d166      	bne.n	8009a04 <_strtod_l+0x964>
 8009936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800993c:	b35a      	cbz	r2, 8009996 <_strtod_l+0x8f6>
 800993e:	4a9c      	ldr	r2, [pc, #624]	; (8009bb0 <_strtod_l+0xb10>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d12c      	bne.n	800999e <_strtod_l+0x8fe>
 8009944:	9b05      	ldr	r3, [sp, #20]
 8009946:	4640      	mov	r0, r8
 8009948:	b303      	cbz	r3, 800998c <_strtod_l+0x8ec>
 800994a:	464b      	mov	r3, r9
 800994c:	4a99      	ldr	r2, [pc, #612]	; (8009bb4 <_strtod_l+0xb14>)
 800994e:	f04f 31ff 	mov.w	r1, #4294967295
 8009952:	401a      	ands	r2, r3
 8009954:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009958:	d81b      	bhi.n	8009992 <_strtod_l+0x8f2>
 800995a:	0d12      	lsrs	r2, r2, #20
 800995c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009960:	fa01 f303 	lsl.w	r3, r1, r3
 8009964:	4298      	cmp	r0, r3
 8009966:	d11a      	bne.n	800999e <_strtod_l+0x8fe>
 8009968:	4b93      	ldr	r3, [pc, #588]	; (8009bb8 <_strtod_l+0xb18>)
 800996a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996c:	429a      	cmp	r2, r3
 800996e:	d102      	bne.n	8009976 <_strtod_l+0x8d6>
 8009970:	3001      	adds	r0, #1
 8009972:	f43f add8 	beq.w	8009526 <_strtod_l+0x486>
 8009976:	f04f 0800 	mov.w	r8, #0
 800997a:	4b8e      	ldr	r3, [pc, #568]	; (8009bb4 <_strtod_l+0xb14>)
 800997c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800997e:	401a      	ands	r2, r3
 8009980:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009984:	9b05      	ldr	r3, [sp, #20]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d196      	bne.n	80098b8 <_strtod_l+0x818>
 800998a:	e5d7      	b.n	800953c <_strtod_l+0x49c>
 800998c:	f04f 33ff 	mov.w	r3, #4294967295
 8009990:	e7e8      	b.n	8009964 <_strtod_l+0x8c4>
 8009992:	460b      	mov	r3, r1
 8009994:	e7e6      	b.n	8009964 <_strtod_l+0x8c4>
 8009996:	ea53 0308 	orrs.w	r3, r3, r8
 800999a:	f43f af7d 	beq.w	8009898 <_strtod_l+0x7f8>
 800999e:	b1e5      	cbz	r5, 80099da <_strtod_l+0x93a>
 80099a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a2:	421d      	tst	r5, r3
 80099a4:	d0ee      	beq.n	8009984 <_strtod_l+0x8e4>
 80099a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099a8:	4640      	mov	r0, r8
 80099aa:	4649      	mov	r1, r9
 80099ac:	9a05      	ldr	r2, [sp, #20]
 80099ae:	b1c3      	cbz	r3, 80099e2 <_strtod_l+0x942>
 80099b0:	f7ff fb55 	bl	800905e <sulp>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80099bc:	f7f6 fbd6 	bl	800016c <__adddf3>
 80099c0:	4680      	mov	r8, r0
 80099c2:	4689      	mov	r9, r1
 80099c4:	e7de      	b.n	8009984 <_strtod_l+0x8e4>
 80099c6:	4013      	ands	r3, r2
 80099c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80099cc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80099d0:	f04f 38ff 	mov.w	r8, #4294967295
 80099d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80099d8:	e7d4      	b.n	8009984 <_strtod_l+0x8e4>
 80099da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099dc:	ea13 0f08 	tst.w	r3, r8
 80099e0:	e7e0      	b.n	80099a4 <_strtod_l+0x904>
 80099e2:	f7ff fb3c 	bl	800905e <sulp>
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80099ee:	f7f6 fbbb 	bl	8000168 <__aeabi_dsub>
 80099f2:	2200      	movs	r2, #0
 80099f4:	2300      	movs	r3, #0
 80099f6:	4680      	mov	r8, r0
 80099f8:	4689      	mov	r9, r1
 80099fa:	f7f6 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d0c0      	beq.n	8009984 <_strtod_l+0x8e4>
 8009a02:	e602      	b.n	800960a <_strtod_l+0x56a>
 8009a04:	4658      	mov	r0, fp
 8009a06:	9904      	ldr	r1, [sp, #16]
 8009a08:	f001 fa3c 	bl	800ae84 <__ratio>
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a12:	4606      	mov	r6, r0
 8009a14:	460f      	mov	r7, r1
 8009a16:	f7f6 ffdb 	bl	80009d0 <__aeabi_dcmple>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d075      	beq.n	8009b0a <_strtod_l+0xa6a>
 8009a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d047      	beq.n	8009ab4 <_strtod_l+0xa14>
 8009a24:	2600      	movs	r6, #0
 8009a26:	4f65      	ldr	r7, [pc, #404]	; (8009bbc <_strtod_l+0xb1c>)
 8009a28:	4d64      	ldr	r5, [pc, #400]	; (8009bbc <_strtod_l+0xb1c>)
 8009a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a30:	0d1b      	lsrs	r3, r3, #20
 8009a32:	051b      	lsls	r3, r3, #20
 8009a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a38:	4b61      	ldr	r3, [pc, #388]	; (8009bc0 <_strtod_l+0xb20>)
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	f040 80c8 	bne.w	8009bd0 <_strtod_l+0xb30>
 8009a40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a44:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009a50:	4649      	mov	r1, r9
 8009a52:	f001 f941 	bl	800acd8 <__ulp>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	f7f6 fd3b 	bl	80004d8 <__aeabi_dmul>
 8009a62:	4642      	mov	r2, r8
 8009a64:	464b      	mov	r3, r9
 8009a66:	f7f6 fb81 	bl	800016c <__adddf3>
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4951      	ldr	r1, [pc, #324]	; (8009bb4 <_strtod_l+0xb14>)
 8009a6e:	4a55      	ldr	r2, [pc, #340]	; (8009bc4 <_strtod_l+0xb24>)
 8009a70:	4019      	ands	r1, r3
 8009a72:	4291      	cmp	r1, r2
 8009a74:	4680      	mov	r8, r0
 8009a76:	d95e      	bls.n	8009b36 <_strtod_l+0xa96>
 8009a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d103      	bne.n	8009a8a <_strtod_l+0x9ea>
 8009a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a84:	3301      	adds	r3, #1
 8009a86:	f43f ad4e 	beq.w	8009526 <_strtod_l+0x486>
 8009a8a:	f04f 38ff 	mov.w	r8, #4294967295
 8009a8e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009bb8 <_strtod_l+0xb18>
 8009a92:	4650      	mov	r0, sl
 8009a94:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a96:	f000 fdef 	bl	800a678 <_Bfree>
 8009a9a:	4650      	mov	r0, sl
 8009a9c:	9906      	ldr	r1, [sp, #24]
 8009a9e:	f000 fdeb 	bl	800a678 <_Bfree>
 8009aa2:	4650      	mov	r0, sl
 8009aa4:	9904      	ldr	r1, [sp, #16]
 8009aa6:	f000 fde7 	bl	800a678 <_Bfree>
 8009aaa:	4659      	mov	r1, fp
 8009aac:	4650      	mov	r0, sl
 8009aae:	f000 fde3 	bl	800a678 <_Bfree>
 8009ab2:	e61c      	b.n	80096ee <_strtod_l+0x64e>
 8009ab4:	f1b8 0f00 	cmp.w	r8, #0
 8009ab8:	d119      	bne.n	8009aee <_strtod_l+0xa4e>
 8009aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ac0:	b9e3      	cbnz	r3, 8009afc <_strtod_l+0xa5c>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	4b3c      	ldr	r3, [pc, #240]	; (8009bbc <_strtod_l+0xb1c>)
 8009aca:	f7f6 ff77 	bl	80009bc <__aeabi_dcmplt>
 8009ace:	b9c8      	cbnz	r0, 8009b04 <_strtod_l+0xa64>
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	4b3c      	ldr	r3, [pc, #240]	; (8009bc8 <_strtod_l+0xb28>)
 8009ad8:	f7f6 fcfe 	bl	80004d8 <__aeabi_dmul>
 8009adc:	4604      	mov	r4, r0
 8009ade:	460d      	mov	r5, r1
 8009ae0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009ae4:	9418      	str	r4, [sp, #96]	; 0x60
 8009ae6:	9319      	str	r3, [sp, #100]	; 0x64
 8009ae8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009aec:	e79d      	b.n	8009a2a <_strtod_l+0x98a>
 8009aee:	f1b8 0f01 	cmp.w	r8, #1
 8009af2:	d103      	bne.n	8009afc <_strtod_l+0xa5c>
 8009af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f43f ad87 	beq.w	800960a <_strtod_l+0x56a>
 8009afc:	2600      	movs	r6, #0
 8009afe:	2400      	movs	r4, #0
 8009b00:	4f32      	ldr	r7, [pc, #200]	; (8009bcc <_strtod_l+0xb2c>)
 8009b02:	e791      	b.n	8009a28 <_strtod_l+0x988>
 8009b04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009b06:	4d30      	ldr	r5, [pc, #192]	; (8009bc8 <_strtod_l+0xb28>)
 8009b08:	e7ea      	b.n	8009ae0 <_strtod_l+0xa40>
 8009b0a:	4b2f      	ldr	r3, [pc, #188]	; (8009bc8 <_strtod_l+0xb28>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4630      	mov	r0, r6
 8009b10:	4639      	mov	r1, r7
 8009b12:	f7f6 fce1 	bl	80004d8 <__aeabi_dmul>
 8009b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b18:	4604      	mov	r4, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	b933      	cbnz	r3, 8009b2c <_strtod_l+0xa8c>
 8009b1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b22:	9010      	str	r0, [sp, #64]	; 0x40
 8009b24:	9311      	str	r3, [sp, #68]	; 0x44
 8009b26:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009b2a:	e77e      	b.n	8009a2a <_strtod_l+0x98a>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009b34:	e7f7      	b.n	8009b26 <_strtod_l+0xa86>
 8009b36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009b3a:	9b05      	ldr	r3, [sp, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1a8      	bne.n	8009a92 <_strtod_l+0x9f2>
 8009b40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b46:	0d1b      	lsrs	r3, r3, #20
 8009b48:	051b      	lsls	r3, r3, #20
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d1a1      	bne.n	8009a92 <_strtod_l+0x9f2>
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 ff7b 	bl	8000a4c <__aeabi_d2lz>
 8009b56:	f7f6 fc91 	bl	800047c <__aeabi_l2d>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 fb01 	bl	8000168 <__aeabi_dsub>
 8009b66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b6c:	ea43 0308 	orr.w	r3, r3, r8
 8009b70:	4313      	orrs	r3, r2
 8009b72:	4604      	mov	r4, r0
 8009b74:	460d      	mov	r5, r1
 8009b76:	d066      	beq.n	8009c46 <_strtod_l+0xba6>
 8009b78:	a309      	add	r3, pc, #36	; (adr r3, 8009ba0 <_strtod_l+0xb00>)
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f7f6 ff1d 	bl	80009bc <__aeabi_dcmplt>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	f47f acda 	bne.w	800953c <_strtod_l+0x49c>
 8009b88:	a307      	add	r3, pc, #28	; (adr r3, 8009ba8 <_strtod_l+0xb08>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	4620      	mov	r0, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	f7f6 ff31 	bl	80009f8 <__aeabi_dcmpgt>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f43f af7b 	beq.w	8009a92 <_strtod_l+0x9f2>
 8009b9c:	e4ce      	b.n	800953c <_strtod_l+0x49c>
 8009b9e:	bf00      	nop
 8009ba0:	94a03595 	.word	0x94a03595
 8009ba4:	3fdfffff 	.word	0x3fdfffff
 8009ba8:	35afe535 	.word	0x35afe535
 8009bac:	3fe00000 	.word	0x3fe00000
 8009bb0:	000fffff 	.word	0x000fffff
 8009bb4:	7ff00000 	.word	0x7ff00000
 8009bb8:	7fefffff 	.word	0x7fefffff
 8009bbc:	3ff00000 	.word	0x3ff00000
 8009bc0:	7fe00000 	.word	0x7fe00000
 8009bc4:	7c9fffff 	.word	0x7c9fffff
 8009bc8:	3fe00000 	.word	0x3fe00000
 8009bcc:	bff00000 	.word	0xbff00000
 8009bd0:	9b05      	ldr	r3, [sp, #20]
 8009bd2:	b313      	cbz	r3, 8009c1a <_strtod_l+0xb7a>
 8009bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009bda:	d81e      	bhi.n	8009c1a <_strtod_l+0xb7a>
 8009bdc:	a326      	add	r3, pc, #152	; (adr r3, 8009c78 <_strtod_l+0xbd8>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	4620      	mov	r0, r4
 8009be4:	4629      	mov	r1, r5
 8009be6:	f7f6 fef3 	bl	80009d0 <__aeabi_dcmple>
 8009bea:	b190      	cbz	r0, 8009c12 <_strtod_l+0xb72>
 8009bec:	4629      	mov	r1, r5
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f7f6 ff0c 	bl	8000a0c <__aeabi_d2uiz>
 8009bf4:	2801      	cmp	r0, #1
 8009bf6:	bf38      	it	cc
 8009bf8:	2001      	movcc	r0, #1
 8009bfa:	f7f6 fbf3 	bl	80003e4 <__aeabi_ui2d>
 8009bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c00:	4604      	mov	r4, r0
 8009c02:	460d      	mov	r5, r1
 8009c04:	b9d3      	cbnz	r3, 8009c3c <_strtod_l+0xb9c>
 8009c06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c0a:	9012      	str	r0, [sp, #72]	; 0x48
 8009c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c0e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009c12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c14:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009c18:	1a9f      	subs	r7, r3, r2
 8009c1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c1e:	f001 f85b 	bl	800acd8 <__ulp>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	f7f6 fc55 	bl	80004d8 <__aeabi_dmul>
 8009c2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c32:	f7f6 fa9b 	bl	800016c <__adddf3>
 8009c36:	4680      	mov	r8, r0
 8009c38:	4689      	mov	r9, r1
 8009c3a:	e77e      	b.n	8009b3a <_strtod_l+0xa9a>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009c44:	e7e3      	b.n	8009c0e <_strtod_l+0xb6e>
 8009c46:	a30e      	add	r3, pc, #56	; (adr r3, 8009c80 <_strtod_l+0xbe0>)
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	f7f6 feb6 	bl	80009bc <__aeabi_dcmplt>
 8009c50:	e7a1      	b.n	8009b96 <_strtod_l+0xaf6>
 8009c52:	2300      	movs	r3, #0
 8009c54:	930c      	str	r3, [sp, #48]	; 0x30
 8009c56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	f7ff ba65 	b.w	800912a <_strtod_l+0x8a>
 8009c60:	2b65      	cmp	r3, #101	; 0x65
 8009c62:	f43f ab5c 	beq.w	800931e <_strtod_l+0x27e>
 8009c66:	2b45      	cmp	r3, #69	; 0x45
 8009c68:	f43f ab59 	beq.w	800931e <_strtod_l+0x27e>
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f7ff bb8d 	b.w	800938c <_strtod_l+0x2ec>
 8009c72:	bf00      	nop
 8009c74:	f3af 8000 	nop.w
 8009c78:	ffc00000 	.word	0xffc00000
 8009c7c:	41dfffff 	.word	0x41dfffff
 8009c80:	94a03595 	.word	0x94a03595
 8009c84:	3fcfffff 	.word	0x3fcfffff

08009c88 <strtod>:
 8009c88:	460a      	mov	r2, r1
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	4802      	ldr	r0, [pc, #8]	; (8009c98 <strtod+0x10>)
 8009c8e:	4b03      	ldr	r3, [pc, #12]	; (8009c9c <strtod+0x14>)
 8009c90:	6800      	ldr	r0, [r0, #0]
 8009c92:	f7ff ba05 	b.w	80090a0 <_strtod_l>
 8009c96:	bf00      	nop
 8009c98:	2000018c 	.word	0x2000018c
 8009c9c:	200001f4 	.word	0x200001f4

08009ca0 <_vsiprintf_r>:
 8009ca0:	b500      	push	{lr}
 8009ca2:	b09b      	sub	sp, #108	; 0x6c
 8009ca4:	9100      	str	r1, [sp, #0]
 8009ca6:	9104      	str	r1, [sp, #16]
 8009ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009cac:	9105      	str	r1, [sp, #20]
 8009cae:	9102      	str	r1, [sp, #8]
 8009cb0:	4905      	ldr	r1, [pc, #20]	; (8009cc8 <_vsiprintf_r+0x28>)
 8009cb2:	9103      	str	r1, [sp, #12]
 8009cb4:	4669      	mov	r1, sp
 8009cb6:	f001 f9c1 	bl	800b03c <_svfiprintf_r>
 8009cba:	2200      	movs	r2, #0
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	b01b      	add	sp, #108	; 0x6c
 8009cc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cc6:	bf00      	nop
 8009cc8:	ffff0208 	.word	0xffff0208

08009ccc <vsiprintf>:
 8009ccc:	4613      	mov	r3, r2
 8009cce:	460a      	mov	r2, r1
 8009cd0:	4601      	mov	r1, r0
 8009cd2:	4802      	ldr	r0, [pc, #8]	; (8009cdc <vsiprintf+0x10>)
 8009cd4:	6800      	ldr	r0, [r0, #0]
 8009cd6:	f7ff bfe3 	b.w	8009ca0 <_vsiprintf_r>
 8009cda:	bf00      	nop
 8009cdc:	2000018c 	.word	0x2000018c

08009ce0 <std>:
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	b510      	push	{r4, lr}
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8009cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cee:	6083      	str	r3, [r0, #8]
 8009cf0:	8181      	strh	r1, [r0, #12]
 8009cf2:	6643      	str	r3, [r0, #100]	; 0x64
 8009cf4:	81c2      	strh	r2, [r0, #14]
 8009cf6:	6183      	str	r3, [r0, #24]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	2208      	movs	r2, #8
 8009cfc:	305c      	adds	r0, #92	; 0x5c
 8009cfe:	f7ff f8cb 	bl	8008e98 <memset>
 8009d02:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <std+0x38>)
 8009d04:	6224      	str	r4, [r4, #32]
 8009d06:	6263      	str	r3, [r4, #36]	; 0x24
 8009d08:	4b04      	ldr	r3, [pc, #16]	; (8009d1c <std+0x3c>)
 8009d0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d0c:	4b04      	ldr	r3, [pc, #16]	; (8009d20 <std+0x40>)
 8009d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d10:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <std+0x44>)
 8009d12:	6323      	str	r3, [r4, #48]	; 0x30
 8009d14:	bd10      	pop	{r4, pc}
 8009d16:	bf00      	nop
 8009d18:	0800b825 	.word	0x0800b825
 8009d1c:	0800b847 	.word	0x0800b847
 8009d20:	0800b87f 	.word	0x0800b87f
 8009d24:	0800b8a3 	.word	0x0800b8a3

08009d28 <_cleanup_r>:
 8009d28:	4901      	ldr	r1, [pc, #4]	; (8009d30 <_cleanup_r+0x8>)
 8009d2a:	f000 b8af 	b.w	8009e8c <_fwalk_reent>
 8009d2e:	bf00      	nop
 8009d30:	0800bbd5 	.word	0x0800bbd5

08009d34 <__sfmoreglue>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	2568      	movs	r5, #104	; 0x68
 8009d38:	1e4a      	subs	r2, r1, #1
 8009d3a:	4355      	muls	r5, r2
 8009d3c:	460e      	mov	r6, r1
 8009d3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d42:	f7ff f8fd 	bl	8008f40 <_malloc_r>
 8009d46:	4604      	mov	r4, r0
 8009d48:	b140      	cbz	r0, 8009d5c <__sfmoreglue+0x28>
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	e9c0 1600 	strd	r1, r6, [r0]
 8009d50:	300c      	adds	r0, #12
 8009d52:	60a0      	str	r0, [r4, #8]
 8009d54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d58:	f7ff f89e 	bl	8008e98 <memset>
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}

08009d60 <__sfp_lock_acquire>:
 8009d60:	4801      	ldr	r0, [pc, #4]	; (8009d68 <__sfp_lock_acquire+0x8>)
 8009d62:	f000 bc1a 	b.w	800a59a <__retarget_lock_acquire_recursive>
 8009d66:	bf00      	nop
 8009d68:	2000104c 	.word	0x2000104c

08009d6c <__sfp_lock_release>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	; (8009d74 <__sfp_lock_release+0x8>)
 8009d6e:	f000 bc15 	b.w	800a59c <__retarget_lock_release_recursive>
 8009d72:	bf00      	nop
 8009d74:	2000104c 	.word	0x2000104c

08009d78 <__sinit_lock_acquire>:
 8009d78:	4801      	ldr	r0, [pc, #4]	; (8009d80 <__sinit_lock_acquire+0x8>)
 8009d7a:	f000 bc0e 	b.w	800a59a <__retarget_lock_acquire_recursive>
 8009d7e:	bf00      	nop
 8009d80:	20001047 	.word	0x20001047

08009d84 <__sinit_lock_release>:
 8009d84:	4801      	ldr	r0, [pc, #4]	; (8009d8c <__sinit_lock_release+0x8>)
 8009d86:	f000 bc09 	b.w	800a59c <__retarget_lock_release_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	20001047 	.word	0x20001047

08009d90 <__sinit>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	4604      	mov	r4, r0
 8009d94:	f7ff fff0 	bl	8009d78 <__sinit_lock_acquire>
 8009d98:	69a3      	ldr	r3, [r4, #24]
 8009d9a:	b11b      	cbz	r3, 8009da4 <__sinit+0x14>
 8009d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009da0:	f7ff bff0 	b.w	8009d84 <__sinit_lock_release>
 8009da4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009da8:	6523      	str	r3, [r4, #80]	; 0x50
 8009daa:	4b13      	ldr	r3, [pc, #76]	; (8009df8 <__sinit+0x68>)
 8009dac:	4a13      	ldr	r2, [pc, #76]	; (8009dfc <__sinit+0x6c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009db2:	42a3      	cmp	r3, r4
 8009db4:	bf08      	it	eq
 8009db6:	2301      	moveq	r3, #1
 8009db8:	4620      	mov	r0, r4
 8009dba:	bf08      	it	eq
 8009dbc:	61a3      	streq	r3, [r4, #24]
 8009dbe:	f000 f81f 	bl	8009e00 <__sfp>
 8009dc2:	6060      	str	r0, [r4, #4]
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 f81b 	bl	8009e00 <__sfp>
 8009dca:	60a0      	str	r0, [r4, #8]
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 f817 	bl	8009e00 <__sfp>
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	2104      	movs	r1, #4
 8009dd6:	60e0      	str	r0, [r4, #12]
 8009dd8:	6860      	ldr	r0, [r4, #4]
 8009dda:	f7ff ff81 	bl	8009ce0 <std>
 8009dde:	2201      	movs	r2, #1
 8009de0:	2109      	movs	r1, #9
 8009de2:	68a0      	ldr	r0, [r4, #8]
 8009de4:	f7ff ff7c 	bl	8009ce0 <std>
 8009de8:	2202      	movs	r2, #2
 8009dea:	2112      	movs	r1, #18
 8009dec:	68e0      	ldr	r0, [r4, #12]
 8009dee:	f7ff ff77 	bl	8009ce0 <std>
 8009df2:	2301      	movs	r3, #1
 8009df4:	61a3      	str	r3, [r4, #24]
 8009df6:	e7d1      	b.n	8009d9c <__sinit+0xc>
 8009df8:	0800bfc8 	.word	0x0800bfc8
 8009dfc:	08009d29 	.word	0x08009d29

08009e00 <__sfp>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	4607      	mov	r7, r0
 8009e04:	f7ff ffac 	bl	8009d60 <__sfp_lock_acquire>
 8009e08:	4b1e      	ldr	r3, [pc, #120]	; (8009e84 <__sfp+0x84>)
 8009e0a:	681e      	ldr	r6, [r3, #0]
 8009e0c:	69b3      	ldr	r3, [r6, #24]
 8009e0e:	b913      	cbnz	r3, 8009e16 <__sfp+0x16>
 8009e10:	4630      	mov	r0, r6
 8009e12:	f7ff ffbd 	bl	8009d90 <__sinit>
 8009e16:	3648      	adds	r6, #72	; 0x48
 8009e18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	d503      	bpl.n	8009e28 <__sfp+0x28>
 8009e20:	6833      	ldr	r3, [r6, #0]
 8009e22:	b30b      	cbz	r3, 8009e68 <__sfp+0x68>
 8009e24:	6836      	ldr	r6, [r6, #0]
 8009e26:	e7f7      	b.n	8009e18 <__sfp+0x18>
 8009e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e2c:	b9d5      	cbnz	r5, 8009e64 <__sfp+0x64>
 8009e2e:	4b16      	ldr	r3, [pc, #88]	; (8009e88 <__sfp+0x88>)
 8009e30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e34:	60e3      	str	r3, [r4, #12]
 8009e36:	6665      	str	r5, [r4, #100]	; 0x64
 8009e38:	f000 fbae 	bl	800a598 <__retarget_lock_init_recursive>
 8009e3c:	f7ff ff96 	bl	8009d6c <__sfp_lock_release>
 8009e40:	2208      	movs	r2, #8
 8009e42:	4629      	mov	r1, r5
 8009e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e4c:	6025      	str	r5, [r4, #0]
 8009e4e:	61a5      	str	r5, [r4, #24]
 8009e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e54:	f7ff f820 	bl	8008e98 <memset>
 8009e58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e60:	4620      	mov	r0, r4
 8009e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e64:	3468      	adds	r4, #104	; 0x68
 8009e66:	e7d9      	b.n	8009e1c <__sfp+0x1c>
 8009e68:	2104      	movs	r1, #4
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	f7ff ff62 	bl	8009d34 <__sfmoreglue>
 8009e70:	4604      	mov	r4, r0
 8009e72:	6030      	str	r0, [r6, #0]
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d1d5      	bne.n	8009e24 <__sfp+0x24>
 8009e78:	f7ff ff78 	bl	8009d6c <__sfp_lock_release>
 8009e7c:	230c      	movs	r3, #12
 8009e7e:	603b      	str	r3, [r7, #0]
 8009e80:	e7ee      	b.n	8009e60 <__sfp+0x60>
 8009e82:	bf00      	nop
 8009e84:	0800bfc8 	.word	0x0800bfc8
 8009e88:	ffff0001 	.word	0xffff0001

08009e8c <_fwalk_reent>:
 8009e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e90:	4606      	mov	r6, r0
 8009e92:	4688      	mov	r8, r1
 8009e94:	2700      	movs	r7, #0
 8009e96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e9e:	f1b9 0901 	subs.w	r9, r9, #1
 8009ea2:	d505      	bpl.n	8009eb0 <_fwalk_reent+0x24>
 8009ea4:	6824      	ldr	r4, [r4, #0]
 8009ea6:	2c00      	cmp	r4, #0
 8009ea8:	d1f7      	bne.n	8009e9a <_fwalk_reent+0xe>
 8009eaa:	4638      	mov	r0, r7
 8009eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb0:	89ab      	ldrh	r3, [r5, #12]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d907      	bls.n	8009ec6 <_fwalk_reent+0x3a>
 8009eb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	d003      	beq.n	8009ec6 <_fwalk_reent+0x3a>
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	47c0      	blx	r8
 8009ec4:	4307      	orrs	r7, r0
 8009ec6:	3568      	adds	r5, #104	; 0x68
 8009ec8:	e7e9      	b.n	8009e9e <_fwalk_reent+0x12>

08009eca <rshift>:
 8009eca:	6903      	ldr	r3, [r0, #16]
 8009ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ed0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ed4:	f100 0414 	add.w	r4, r0, #20
 8009ed8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009edc:	dd46      	ble.n	8009f6c <rshift+0xa2>
 8009ede:	f011 011f 	ands.w	r1, r1, #31
 8009ee2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ee6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009eea:	d10c      	bne.n	8009f06 <rshift+0x3c>
 8009eec:	4629      	mov	r1, r5
 8009eee:	f100 0710 	add.w	r7, r0, #16
 8009ef2:	42b1      	cmp	r1, r6
 8009ef4:	d335      	bcc.n	8009f62 <rshift+0x98>
 8009ef6:	1a9b      	subs	r3, r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	1eea      	subs	r2, r5, #3
 8009efc:	4296      	cmp	r6, r2
 8009efe:	bf38      	it	cc
 8009f00:	2300      	movcc	r3, #0
 8009f02:	4423      	add	r3, r4
 8009f04:	e015      	b.n	8009f32 <rshift+0x68>
 8009f06:	46a1      	mov	r9, r4
 8009f08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f0c:	f1c1 0820 	rsb	r8, r1, #32
 8009f10:	40cf      	lsrs	r7, r1
 8009f12:	f105 0e04 	add.w	lr, r5, #4
 8009f16:	4576      	cmp	r6, lr
 8009f18:	46f4      	mov	ip, lr
 8009f1a:	d816      	bhi.n	8009f4a <rshift+0x80>
 8009f1c:	1a9b      	subs	r3, r3, r2
 8009f1e:	009a      	lsls	r2, r3, #2
 8009f20:	3a04      	subs	r2, #4
 8009f22:	3501      	adds	r5, #1
 8009f24:	42ae      	cmp	r6, r5
 8009f26:	bf38      	it	cc
 8009f28:	2200      	movcc	r2, #0
 8009f2a:	18a3      	adds	r3, r4, r2
 8009f2c:	50a7      	str	r7, [r4, r2]
 8009f2e:	b107      	cbz	r7, 8009f32 <rshift+0x68>
 8009f30:	3304      	adds	r3, #4
 8009f32:	42a3      	cmp	r3, r4
 8009f34:	eba3 0204 	sub.w	r2, r3, r4
 8009f38:	bf08      	it	eq
 8009f3a:	2300      	moveq	r3, #0
 8009f3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f40:	6102      	str	r2, [r0, #16]
 8009f42:	bf08      	it	eq
 8009f44:	6143      	streq	r3, [r0, #20]
 8009f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f4a:	f8dc c000 	ldr.w	ip, [ip]
 8009f4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f52:	ea4c 0707 	orr.w	r7, ip, r7
 8009f56:	f849 7b04 	str.w	r7, [r9], #4
 8009f5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f5e:	40cf      	lsrs	r7, r1
 8009f60:	e7d9      	b.n	8009f16 <rshift+0x4c>
 8009f62:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f66:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f6a:	e7c2      	b.n	8009ef2 <rshift+0x28>
 8009f6c:	4623      	mov	r3, r4
 8009f6e:	e7e0      	b.n	8009f32 <rshift+0x68>

08009f70 <__hexdig_fun>:
 8009f70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	d802      	bhi.n	8009f7e <__hexdig_fun+0xe>
 8009f78:	3820      	subs	r0, #32
 8009f7a:	b2c0      	uxtb	r0, r0
 8009f7c:	4770      	bx	lr
 8009f7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f82:	2b05      	cmp	r3, #5
 8009f84:	d801      	bhi.n	8009f8a <__hexdig_fun+0x1a>
 8009f86:	3847      	subs	r0, #71	; 0x47
 8009f88:	e7f7      	b.n	8009f7a <__hexdig_fun+0xa>
 8009f8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f8e:	2b05      	cmp	r3, #5
 8009f90:	d801      	bhi.n	8009f96 <__hexdig_fun+0x26>
 8009f92:	3827      	subs	r0, #39	; 0x27
 8009f94:	e7f1      	b.n	8009f7a <__hexdig_fun+0xa>
 8009f96:	2000      	movs	r0, #0
 8009f98:	4770      	bx	lr
	...

08009f9c <__gethex>:
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	b08b      	sub	sp, #44	; 0x2c
 8009fa2:	9306      	str	r3, [sp, #24]
 8009fa4:	4bb9      	ldr	r3, [pc, #740]	; (800a28c <__gethex+0x2f0>)
 8009fa6:	9002      	str	r0, [sp, #8]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	468b      	mov	fp, r1
 8009fac:	4618      	mov	r0, r3
 8009fae:	4690      	mov	r8, r2
 8009fb0:	9303      	str	r3, [sp, #12]
 8009fb2:	f7f6 f8cd 	bl	8000150 <strlen>
 8009fb6:	4682      	mov	sl, r0
 8009fb8:	9b03      	ldr	r3, [sp, #12]
 8009fba:	f8db 2000 	ldr.w	r2, [fp]
 8009fbe:	4403      	add	r3, r0
 8009fc0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009fc4:	9307      	str	r3, [sp, #28]
 8009fc6:	1c93      	adds	r3, r2, #2
 8009fc8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009fcc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009fd0:	32fe      	adds	r2, #254	; 0xfe
 8009fd2:	18d1      	adds	r1, r2, r3
 8009fd4:	461f      	mov	r7, r3
 8009fd6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009fda:	9101      	str	r1, [sp, #4]
 8009fdc:	2830      	cmp	r0, #48	; 0x30
 8009fde:	d0f8      	beq.n	8009fd2 <__gethex+0x36>
 8009fe0:	f7ff ffc6 	bl	8009f70 <__hexdig_fun>
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d13a      	bne.n	800a060 <__gethex+0xc4>
 8009fea:	4652      	mov	r2, sl
 8009fec:	4638      	mov	r0, r7
 8009fee:	9903      	ldr	r1, [sp, #12]
 8009ff0:	f7ff f810 	bl	8009014 <strncmp>
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d166      	bne.n	800a0c8 <__gethex+0x12c>
 8009ffa:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009ffe:	eb07 060a 	add.w	r6, r7, sl
 800a002:	f7ff ffb5 	bl	8009f70 <__hexdig_fun>
 800a006:	2800      	cmp	r0, #0
 800a008:	d060      	beq.n	800a0cc <__gethex+0x130>
 800a00a:	4633      	mov	r3, r6
 800a00c:	7818      	ldrb	r0, [r3, #0]
 800a00e:	461f      	mov	r7, r3
 800a010:	2830      	cmp	r0, #48	; 0x30
 800a012:	f103 0301 	add.w	r3, r3, #1
 800a016:	d0f9      	beq.n	800a00c <__gethex+0x70>
 800a018:	f7ff ffaa 	bl	8009f70 <__hexdig_fun>
 800a01c:	2301      	movs	r3, #1
 800a01e:	fab0 f480 	clz	r4, r0
 800a022:	4635      	mov	r5, r6
 800a024:	0964      	lsrs	r4, r4, #5
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	463a      	mov	r2, r7
 800a02a:	4616      	mov	r6, r2
 800a02c:	7830      	ldrb	r0, [r6, #0]
 800a02e:	3201      	adds	r2, #1
 800a030:	f7ff ff9e 	bl	8009f70 <__hexdig_fun>
 800a034:	2800      	cmp	r0, #0
 800a036:	d1f8      	bne.n	800a02a <__gethex+0x8e>
 800a038:	4652      	mov	r2, sl
 800a03a:	4630      	mov	r0, r6
 800a03c:	9903      	ldr	r1, [sp, #12]
 800a03e:	f7fe ffe9 	bl	8009014 <strncmp>
 800a042:	b980      	cbnz	r0, 800a066 <__gethex+0xca>
 800a044:	b94d      	cbnz	r5, 800a05a <__gethex+0xbe>
 800a046:	eb06 050a 	add.w	r5, r6, sl
 800a04a:	462a      	mov	r2, r5
 800a04c:	4616      	mov	r6, r2
 800a04e:	7830      	ldrb	r0, [r6, #0]
 800a050:	3201      	adds	r2, #1
 800a052:	f7ff ff8d 	bl	8009f70 <__hexdig_fun>
 800a056:	2800      	cmp	r0, #0
 800a058:	d1f8      	bne.n	800a04c <__gethex+0xb0>
 800a05a:	1bad      	subs	r5, r5, r6
 800a05c:	00ad      	lsls	r5, r5, #2
 800a05e:	e004      	b.n	800a06a <__gethex+0xce>
 800a060:	2400      	movs	r4, #0
 800a062:	4625      	mov	r5, r4
 800a064:	e7e0      	b.n	800a028 <__gethex+0x8c>
 800a066:	2d00      	cmp	r5, #0
 800a068:	d1f7      	bne.n	800a05a <__gethex+0xbe>
 800a06a:	7833      	ldrb	r3, [r6, #0]
 800a06c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a070:	2b50      	cmp	r3, #80	; 0x50
 800a072:	d139      	bne.n	800a0e8 <__gethex+0x14c>
 800a074:	7873      	ldrb	r3, [r6, #1]
 800a076:	2b2b      	cmp	r3, #43	; 0x2b
 800a078:	d02a      	beq.n	800a0d0 <__gethex+0x134>
 800a07a:	2b2d      	cmp	r3, #45	; 0x2d
 800a07c:	d02c      	beq.n	800a0d8 <__gethex+0x13c>
 800a07e:	f04f 0900 	mov.w	r9, #0
 800a082:	1c71      	adds	r1, r6, #1
 800a084:	7808      	ldrb	r0, [r1, #0]
 800a086:	f7ff ff73 	bl	8009f70 <__hexdig_fun>
 800a08a:	1e43      	subs	r3, r0, #1
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b18      	cmp	r3, #24
 800a090:	d82a      	bhi.n	800a0e8 <__gethex+0x14c>
 800a092:	f1a0 0210 	sub.w	r2, r0, #16
 800a096:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a09a:	f7ff ff69 	bl	8009f70 <__hexdig_fun>
 800a09e:	1e43      	subs	r3, r0, #1
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b18      	cmp	r3, #24
 800a0a4:	d91b      	bls.n	800a0de <__gethex+0x142>
 800a0a6:	f1b9 0f00 	cmp.w	r9, #0
 800a0aa:	d000      	beq.n	800a0ae <__gethex+0x112>
 800a0ac:	4252      	negs	r2, r2
 800a0ae:	4415      	add	r5, r2
 800a0b0:	f8cb 1000 	str.w	r1, [fp]
 800a0b4:	b1d4      	cbz	r4, 800a0ec <__gethex+0x150>
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	bf14      	ite	ne
 800a0bc:	2700      	movne	r7, #0
 800a0be:	2706      	moveq	r7, #6
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	b00b      	add	sp, #44	; 0x2c
 800a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c8:	463e      	mov	r6, r7
 800a0ca:	4625      	mov	r5, r4
 800a0cc:	2401      	movs	r4, #1
 800a0ce:	e7cc      	b.n	800a06a <__gethex+0xce>
 800a0d0:	f04f 0900 	mov.w	r9, #0
 800a0d4:	1cb1      	adds	r1, r6, #2
 800a0d6:	e7d5      	b.n	800a084 <__gethex+0xe8>
 800a0d8:	f04f 0901 	mov.w	r9, #1
 800a0dc:	e7fa      	b.n	800a0d4 <__gethex+0x138>
 800a0de:	230a      	movs	r3, #10
 800a0e0:	fb03 0202 	mla	r2, r3, r2, r0
 800a0e4:	3a10      	subs	r2, #16
 800a0e6:	e7d6      	b.n	800a096 <__gethex+0xfa>
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	e7e1      	b.n	800a0b0 <__gethex+0x114>
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	1bf3      	subs	r3, r6, r7
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	2b07      	cmp	r3, #7
 800a0f4:	dc0a      	bgt.n	800a10c <__gethex+0x170>
 800a0f6:	9802      	ldr	r0, [sp, #8]
 800a0f8:	f000 fa7e 	bl	800a5f8 <_Balloc>
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	b940      	cbnz	r0, 800a112 <__gethex+0x176>
 800a100:	4602      	mov	r2, r0
 800a102:	21de      	movs	r1, #222	; 0xde
 800a104:	4b62      	ldr	r3, [pc, #392]	; (800a290 <__gethex+0x2f4>)
 800a106:	4863      	ldr	r0, [pc, #396]	; (800a294 <__gethex+0x2f8>)
 800a108:	f001 fcb0 	bl	800ba6c <__assert_func>
 800a10c:	3101      	adds	r1, #1
 800a10e:	105b      	asrs	r3, r3, #1
 800a110:	e7ef      	b.n	800a0f2 <__gethex+0x156>
 800a112:	f04f 0b00 	mov.w	fp, #0
 800a116:	f100 0914 	add.w	r9, r0, #20
 800a11a:	f1ca 0301 	rsb	r3, sl, #1
 800a11e:	f8cd 9010 	str.w	r9, [sp, #16]
 800a122:	f8cd b004 	str.w	fp, [sp, #4]
 800a126:	9308      	str	r3, [sp, #32]
 800a128:	42b7      	cmp	r7, r6
 800a12a:	d33f      	bcc.n	800a1ac <__gethex+0x210>
 800a12c:	9f04      	ldr	r7, [sp, #16]
 800a12e:	9b01      	ldr	r3, [sp, #4]
 800a130:	f847 3b04 	str.w	r3, [r7], #4
 800a134:	eba7 0709 	sub.w	r7, r7, r9
 800a138:	10bf      	asrs	r7, r7, #2
 800a13a:	6127      	str	r7, [r4, #16]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fb51 	bl	800a7e4 <__hi0bits>
 800a142:	017f      	lsls	r7, r7, #5
 800a144:	f8d8 6000 	ldr.w	r6, [r8]
 800a148:	1a3f      	subs	r7, r7, r0
 800a14a:	42b7      	cmp	r7, r6
 800a14c:	dd62      	ble.n	800a214 <__gethex+0x278>
 800a14e:	1bbf      	subs	r7, r7, r6
 800a150:	4639      	mov	r1, r7
 800a152:	4620      	mov	r0, r4
 800a154:	f000 fee7 	bl	800af26 <__any_on>
 800a158:	4682      	mov	sl, r0
 800a15a:	b1a8      	cbz	r0, 800a188 <__gethex+0x1ec>
 800a15c:	f04f 0a01 	mov.w	sl, #1
 800a160:	1e7b      	subs	r3, r7, #1
 800a162:	1159      	asrs	r1, r3, #5
 800a164:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a168:	f003 021f 	and.w	r2, r3, #31
 800a16c:	fa0a f202 	lsl.w	r2, sl, r2
 800a170:	420a      	tst	r2, r1
 800a172:	d009      	beq.n	800a188 <__gethex+0x1ec>
 800a174:	4553      	cmp	r3, sl
 800a176:	dd05      	ble.n	800a184 <__gethex+0x1e8>
 800a178:	4620      	mov	r0, r4
 800a17a:	1eb9      	subs	r1, r7, #2
 800a17c:	f000 fed3 	bl	800af26 <__any_on>
 800a180:	2800      	cmp	r0, #0
 800a182:	d144      	bne.n	800a20e <__gethex+0x272>
 800a184:	f04f 0a02 	mov.w	sl, #2
 800a188:	4639      	mov	r1, r7
 800a18a:	4620      	mov	r0, r4
 800a18c:	f7ff fe9d 	bl	8009eca <rshift>
 800a190:	443d      	add	r5, r7
 800a192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a196:	42ab      	cmp	r3, r5
 800a198:	da4a      	bge.n	800a230 <__gethex+0x294>
 800a19a:	4621      	mov	r1, r4
 800a19c:	9802      	ldr	r0, [sp, #8]
 800a19e:	f000 fa6b 	bl	800a678 <_Bfree>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1a6:	27a3      	movs	r7, #163	; 0xa3
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	e789      	b.n	800a0c0 <__gethex+0x124>
 800a1ac:	1e73      	subs	r3, r6, #1
 800a1ae:	9a07      	ldr	r2, [sp, #28]
 800a1b0:	9305      	str	r3, [sp, #20]
 800a1b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d019      	beq.n	800a1ee <__gethex+0x252>
 800a1ba:	f1bb 0f20 	cmp.w	fp, #32
 800a1be:	d107      	bne.n	800a1d0 <__gethex+0x234>
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	9a01      	ldr	r2, [sp, #4]
 800a1c4:	f843 2b04 	str.w	r2, [r3], #4
 800a1c8:	9304      	str	r3, [sp, #16]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	469b      	mov	fp, r3
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a1d4:	f7ff fecc 	bl	8009f70 <__hexdig_fun>
 800a1d8:	9b01      	ldr	r3, [sp, #4]
 800a1da:	f000 000f 	and.w	r0, r0, #15
 800a1de:	fa00 f00b 	lsl.w	r0, r0, fp
 800a1e2:	4303      	orrs	r3, r0
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	f10b 0b04 	add.w	fp, fp, #4
 800a1ea:	9b05      	ldr	r3, [sp, #20]
 800a1ec:	e00d      	b.n	800a20a <__gethex+0x26e>
 800a1ee:	9b05      	ldr	r3, [sp, #20]
 800a1f0:	9a08      	ldr	r2, [sp, #32]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	42bb      	cmp	r3, r7
 800a1f6:	d3e0      	bcc.n	800a1ba <__gethex+0x21e>
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	9903      	ldr	r1, [sp, #12]
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	f7fe ff08 	bl	8009014 <strncmp>
 800a204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a206:	2800      	cmp	r0, #0
 800a208:	d1d7      	bne.n	800a1ba <__gethex+0x21e>
 800a20a:	461e      	mov	r6, r3
 800a20c:	e78c      	b.n	800a128 <__gethex+0x18c>
 800a20e:	f04f 0a03 	mov.w	sl, #3
 800a212:	e7b9      	b.n	800a188 <__gethex+0x1ec>
 800a214:	da09      	bge.n	800a22a <__gethex+0x28e>
 800a216:	1bf7      	subs	r7, r6, r7
 800a218:	4621      	mov	r1, r4
 800a21a:	463a      	mov	r2, r7
 800a21c:	9802      	ldr	r0, [sp, #8]
 800a21e:	f000 fc43 	bl	800aaa8 <__lshift>
 800a222:	4604      	mov	r4, r0
 800a224:	1bed      	subs	r5, r5, r7
 800a226:	f100 0914 	add.w	r9, r0, #20
 800a22a:	f04f 0a00 	mov.w	sl, #0
 800a22e:	e7b0      	b.n	800a192 <__gethex+0x1f6>
 800a230:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a234:	42a8      	cmp	r0, r5
 800a236:	dd71      	ble.n	800a31c <__gethex+0x380>
 800a238:	1b45      	subs	r5, r0, r5
 800a23a:	42ae      	cmp	r6, r5
 800a23c:	dc34      	bgt.n	800a2a8 <__gethex+0x30c>
 800a23e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a242:	2b02      	cmp	r3, #2
 800a244:	d028      	beq.n	800a298 <__gethex+0x2fc>
 800a246:	2b03      	cmp	r3, #3
 800a248:	d02a      	beq.n	800a2a0 <__gethex+0x304>
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d115      	bne.n	800a27a <__gethex+0x2de>
 800a24e:	42ae      	cmp	r6, r5
 800a250:	d113      	bne.n	800a27a <__gethex+0x2de>
 800a252:	2e01      	cmp	r6, #1
 800a254:	d10b      	bne.n	800a26e <__gethex+0x2d2>
 800a256:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a25a:	9a06      	ldr	r2, [sp, #24]
 800a25c:	2762      	movs	r7, #98	; 0x62
 800a25e:	6013      	str	r3, [r2, #0]
 800a260:	2301      	movs	r3, #1
 800a262:	6123      	str	r3, [r4, #16]
 800a264:	f8c9 3000 	str.w	r3, [r9]
 800a268:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a26a:	601c      	str	r4, [r3, #0]
 800a26c:	e728      	b.n	800a0c0 <__gethex+0x124>
 800a26e:	4620      	mov	r0, r4
 800a270:	1e71      	subs	r1, r6, #1
 800a272:	f000 fe58 	bl	800af26 <__any_on>
 800a276:	2800      	cmp	r0, #0
 800a278:	d1ed      	bne.n	800a256 <__gethex+0x2ba>
 800a27a:	4621      	mov	r1, r4
 800a27c:	9802      	ldr	r0, [sp, #8]
 800a27e:	f000 f9fb 	bl	800a678 <_Bfree>
 800a282:	2300      	movs	r3, #0
 800a284:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a286:	2750      	movs	r7, #80	; 0x50
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	e719      	b.n	800a0c0 <__gethex+0x124>
 800a28c:	0800c104 	.word	0x0800c104
 800a290:	0800c088 	.word	0x0800c088
 800a294:	0800c099 	.word	0x0800c099
 800a298:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1ed      	bne.n	800a27a <__gethex+0x2de>
 800a29e:	e7da      	b.n	800a256 <__gethex+0x2ba>
 800a2a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1d7      	bne.n	800a256 <__gethex+0x2ba>
 800a2a6:	e7e8      	b.n	800a27a <__gethex+0x2de>
 800a2a8:	1e6f      	subs	r7, r5, #1
 800a2aa:	f1ba 0f00 	cmp.w	sl, #0
 800a2ae:	d132      	bne.n	800a316 <__gethex+0x37a>
 800a2b0:	b127      	cbz	r7, 800a2bc <__gethex+0x320>
 800a2b2:	4639      	mov	r1, r7
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f000 fe36 	bl	800af26 <__any_on>
 800a2ba:	4682      	mov	sl, r0
 800a2bc:	2101      	movs	r1, #1
 800a2be:	117b      	asrs	r3, r7, #5
 800a2c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a2c4:	f007 071f 	and.w	r7, r7, #31
 800a2c8:	fa01 f707 	lsl.w	r7, r1, r7
 800a2cc:	421f      	tst	r7, r3
 800a2ce:	f04f 0702 	mov.w	r7, #2
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	bf18      	it	ne
 800a2d8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a2dc:	1b76      	subs	r6, r6, r5
 800a2de:	f7ff fdf4 	bl	8009eca <rshift>
 800a2e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a2e6:	f1ba 0f00 	cmp.w	sl, #0
 800a2ea:	d048      	beq.n	800a37e <__gethex+0x3e2>
 800a2ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d015      	beq.n	800a320 <__gethex+0x384>
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d017      	beq.n	800a328 <__gethex+0x38c>
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d109      	bne.n	800a310 <__gethex+0x374>
 800a2fc:	f01a 0f02 	tst.w	sl, #2
 800a300:	d006      	beq.n	800a310 <__gethex+0x374>
 800a302:	f8d9 0000 	ldr.w	r0, [r9]
 800a306:	ea4a 0a00 	orr.w	sl, sl, r0
 800a30a:	f01a 0f01 	tst.w	sl, #1
 800a30e:	d10e      	bne.n	800a32e <__gethex+0x392>
 800a310:	f047 0710 	orr.w	r7, r7, #16
 800a314:	e033      	b.n	800a37e <__gethex+0x3e2>
 800a316:	f04f 0a01 	mov.w	sl, #1
 800a31a:	e7cf      	b.n	800a2bc <__gethex+0x320>
 800a31c:	2701      	movs	r7, #1
 800a31e:	e7e2      	b.n	800a2e6 <__gethex+0x34a>
 800a320:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a322:	f1c3 0301 	rsb	r3, r3, #1
 800a326:	9315      	str	r3, [sp, #84]	; 0x54
 800a328:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0f0      	beq.n	800a310 <__gethex+0x374>
 800a32e:	f04f 0c00 	mov.w	ip, #0
 800a332:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a336:	f104 0314 	add.w	r3, r4, #20
 800a33a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a33e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a342:	4618      	mov	r0, r3
 800a344:	f853 2b04 	ldr.w	r2, [r3], #4
 800a348:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a34c:	d01c      	beq.n	800a388 <__gethex+0x3ec>
 800a34e:	3201      	adds	r2, #1
 800a350:	6002      	str	r2, [r0, #0]
 800a352:	2f02      	cmp	r7, #2
 800a354:	f104 0314 	add.w	r3, r4, #20
 800a358:	d13d      	bne.n	800a3d6 <__gethex+0x43a>
 800a35a:	f8d8 2000 	ldr.w	r2, [r8]
 800a35e:	3a01      	subs	r2, #1
 800a360:	42b2      	cmp	r2, r6
 800a362:	d10a      	bne.n	800a37a <__gethex+0x3de>
 800a364:	2201      	movs	r2, #1
 800a366:	1171      	asrs	r1, r6, #5
 800a368:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a36c:	f006 061f 	and.w	r6, r6, #31
 800a370:	fa02 f606 	lsl.w	r6, r2, r6
 800a374:	421e      	tst	r6, r3
 800a376:	bf18      	it	ne
 800a378:	4617      	movne	r7, r2
 800a37a:	f047 0720 	orr.w	r7, r7, #32
 800a37e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a380:	601c      	str	r4, [r3, #0]
 800a382:	9b06      	ldr	r3, [sp, #24]
 800a384:	601d      	str	r5, [r3, #0]
 800a386:	e69b      	b.n	800a0c0 <__gethex+0x124>
 800a388:	4299      	cmp	r1, r3
 800a38a:	f843 cc04 	str.w	ip, [r3, #-4]
 800a38e:	d8d8      	bhi.n	800a342 <__gethex+0x3a6>
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	459b      	cmp	fp, r3
 800a394:	db17      	blt.n	800a3c6 <__gethex+0x42a>
 800a396:	6861      	ldr	r1, [r4, #4]
 800a398:	9802      	ldr	r0, [sp, #8]
 800a39a:	3101      	adds	r1, #1
 800a39c:	f000 f92c 	bl	800a5f8 <_Balloc>
 800a3a0:	4681      	mov	r9, r0
 800a3a2:	b918      	cbnz	r0, 800a3ac <__gethex+0x410>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	2184      	movs	r1, #132	; 0x84
 800a3a8:	4b19      	ldr	r3, [pc, #100]	; (800a410 <__gethex+0x474>)
 800a3aa:	e6ac      	b.n	800a106 <__gethex+0x16a>
 800a3ac:	6922      	ldr	r2, [r4, #16]
 800a3ae:	f104 010c 	add.w	r1, r4, #12
 800a3b2:	3202      	adds	r2, #2
 800a3b4:	0092      	lsls	r2, r2, #2
 800a3b6:	300c      	adds	r0, #12
 800a3b8:	f000 f903 	bl	800a5c2 <memcpy>
 800a3bc:	4621      	mov	r1, r4
 800a3be:	9802      	ldr	r0, [sp, #8]
 800a3c0:	f000 f95a 	bl	800a678 <_Bfree>
 800a3c4:	464c      	mov	r4, r9
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	1c5a      	adds	r2, r3, #1
 800a3ca:	6122      	str	r2, [r4, #16]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3d2:	615a      	str	r2, [r3, #20]
 800a3d4:	e7bd      	b.n	800a352 <__gethex+0x3b6>
 800a3d6:	6922      	ldr	r2, [r4, #16]
 800a3d8:	455a      	cmp	r2, fp
 800a3da:	dd0b      	ble.n	800a3f4 <__gethex+0x458>
 800a3dc:	2101      	movs	r1, #1
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f7ff fd73 	bl	8009eca <rshift>
 800a3e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3e8:	3501      	adds	r5, #1
 800a3ea:	42ab      	cmp	r3, r5
 800a3ec:	f6ff aed5 	blt.w	800a19a <__gethex+0x1fe>
 800a3f0:	2701      	movs	r7, #1
 800a3f2:	e7c2      	b.n	800a37a <__gethex+0x3de>
 800a3f4:	f016 061f 	ands.w	r6, r6, #31
 800a3f8:	d0fa      	beq.n	800a3f0 <__gethex+0x454>
 800a3fa:	449a      	add	sl, r3
 800a3fc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a400:	f000 f9f0 	bl	800a7e4 <__hi0bits>
 800a404:	f1c6 0620 	rsb	r6, r6, #32
 800a408:	42b0      	cmp	r0, r6
 800a40a:	dbe7      	blt.n	800a3dc <__gethex+0x440>
 800a40c:	e7f0      	b.n	800a3f0 <__gethex+0x454>
 800a40e:	bf00      	nop
 800a410:	0800c088 	.word	0x0800c088

0800a414 <L_shift>:
 800a414:	f1c2 0208 	rsb	r2, r2, #8
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	b570      	push	{r4, r5, r6, lr}
 800a41c:	f1c2 0620 	rsb	r6, r2, #32
 800a420:	6843      	ldr	r3, [r0, #4]
 800a422:	6804      	ldr	r4, [r0, #0]
 800a424:	fa03 f506 	lsl.w	r5, r3, r6
 800a428:	432c      	orrs	r4, r5
 800a42a:	40d3      	lsrs	r3, r2
 800a42c:	6004      	str	r4, [r0, #0]
 800a42e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a432:	4288      	cmp	r0, r1
 800a434:	d3f4      	bcc.n	800a420 <L_shift+0xc>
 800a436:	bd70      	pop	{r4, r5, r6, pc}

0800a438 <__match>:
 800a438:	b530      	push	{r4, r5, lr}
 800a43a:	6803      	ldr	r3, [r0, #0]
 800a43c:	3301      	adds	r3, #1
 800a43e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a442:	b914      	cbnz	r4, 800a44a <__match+0x12>
 800a444:	6003      	str	r3, [r0, #0]
 800a446:	2001      	movs	r0, #1
 800a448:	bd30      	pop	{r4, r5, pc}
 800a44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a44e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a452:	2d19      	cmp	r5, #25
 800a454:	bf98      	it	ls
 800a456:	3220      	addls	r2, #32
 800a458:	42a2      	cmp	r2, r4
 800a45a:	d0f0      	beq.n	800a43e <__match+0x6>
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7f3      	b.n	800a448 <__match+0x10>

0800a460 <__hexnan>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	2500      	movs	r5, #0
 800a466:	680b      	ldr	r3, [r1, #0]
 800a468:	4682      	mov	sl, r0
 800a46a:	115e      	asrs	r6, r3, #5
 800a46c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a470:	f013 031f 	ands.w	r3, r3, #31
 800a474:	bf18      	it	ne
 800a476:	3604      	addne	r6, #4
 800a478:	1f37      	subs	r7, r6, #4
 800a47a:	4690      	mov	r8, r2
 800a47c:	46b9      	mov	r9, r7
 800a47e:	463c      	mov	r4, r7
 800a480:	46ab      	mov	fp, r5
 800a482:	b087      	sub	sp, #28
 800a484:	6801      	ldr	r1, [r0, #0]
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	f846 5c04 	str.w	r5, [r6, #-4]
 800a48c:	9502      	str	r5, [sp, #8]
 800a48e:	784a      	ldrb	r2, [r1, #1]
 800a490:	1c4b      	adds	r3, r1, #1
 800a492:	9303      	str	r3, [sp, #12]
 800a494:	b342      	cbz	r2, 800a4e8 <__hexnan+0x88>
 800a496:	4610      	mov	r0, r2
 800a498:	9105      	str	r1, [sp, #20]
 800a49a:	9204      	str	r2, [sp, #16]
 800a49c:	f7ff fd68 	bl	8009f70 <__hexdig_fun>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d14f      	bne.n	800a544 <__hexnan+0xe4>
 800a4a4:	9a04      	ldr	r2, [sp, #16]
 800a4a6:	9905      	ldr	r1, [sp, #20]
 800a4a8:	2a20      	cmp	r2, #32
 800a4aa:	d818      	bhi.n	800a4de <__hexnan+0x7e>
 800a4ac:	9b02      	ldr	r3, [sp, #8]
 800a4ae:	459b      	cmp	fp, r3
 800a4b0:	dd13      	ble.n	800a4da <__hexnan+0x7a>
 800a4b2:	454c      	cmp	r4, r9
 800a4b4:	d206      	bcs.n	800a4c4 <__hexnan+0x64>
 800a4b6:	2d07      	cmp	r5, #7
 800a4b8:	dc04      	bgt.n	800a4c4 <__hexnan+0x64>
 800a4ba:	462a      	mov	r2, r5
 800a4bc:	4649      	mov	r1, r9
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f7ff ffa8 	bl	800a414 <L_shift>
 800a4c4:	4544      	cmp	r4, r8
 800a4c6:	d950      	bls.n	800a56a <__hexnan+0x10a>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f1a4 0904 	sub.w	r9, r4, #4
 800a4ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4d2:	461d      	mov	r5, r3
 800a4d4:	464c      	mov	r4, r9
 800a4d6:	f8cd b008 	str.w	fp, [sp, #8]
 800a4da:	9903      	ldr	r1, [sp, #12]
 800a4dc:	e7d7      	b.n	800a48e <__hexnan+0x2e>
 800a4de:	2a29      	cmp	r2, #41	; 0x29
 800a4e0:	d156      	bne.n	800a590 <__hexnan+0x130>
 800a4e2:	3102      	adds	r1, #2
 800a4e4:	f8ca 1000 	str.w	r1, [sl]
 800a4e8:	f1bb 0f00 	cmp.w	fp, #0
 800a4ec:	d050      	beq.n	800a590 <__hexnan+0x130>
 800a4ee:	454c      	cmp	r4, r9
 800a4f0:	d206      	bcs.n	800a500 <__hexnan+0xa0>
 800a4f2:	2d07      	cmp	r5, #7
 800a4f4:	dc04      	bgt.n	800a500 <__hexnan+0xa0>
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7ff ff8a 	bl	800a414 <L_shift>
 800a500:	4544      	cmp	r4, r8
 800a502:	d934      	bls.n	800a56e <__hexnan+0x10e>
 800a504:	4623      	mov	r3, r4
 800a506:	f1a8 0204 	sub.w	r2, r8, #4
 800a50a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a50e:	429f      	cmp	r7, r3
 800a510:	f842 1f04 	str.w	r1, [r2, #4]!
 800a514:	d2f9      	bcs.n	800a50a <__hexnan+0xaa>
 800a516:	1b3b      	subs	r3, r7, r4
 800a518:	f023 0303 	bic.w	r3, r3, #3
 800a51c:	3304      	adds	r3, #4
 800a51e:	3401      	adds	r4, #1
 800a520:	3e03      	subs	r6, #3
 800a522:	42b4      	cmp	r4, r6
 800a524:	bf88      	it	hi
 800a526:	2304      	movhi	r3, #4
 800a528:	2200      	movs	r2, #0
 800a52a:	4443      	add	r3, r8
 800a52c:	f843 2b04 	str.w	r2, [r3], #4
 800a530:	429f      	cmp	r7, r3
 800a532:	d2fb      	bcs.n	800a52c <__hexnan+0xcc>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	b91b      	cbnz	r3, 800a540 <__hexnan+0xe0>
 800a538:	4547      	cmp	r7, r8
 800a53a:	d127      	bne.n	800a58c <__hexnan+0x12c>
 800a53c:	2301      	movs	r3, #1
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	2005      	movs	r0, #5
 800a542:	e026      	b.n	800a592 <__hexnan+0x132>
 800a544:	3501      	adds	r5, #1
 800a546:	2d08      	cmp	r5, #8
 800a548:	f10b 0b01 	add.w	fp, fp, #1
 800a54c:	dd06      	ble.n	800a55c <__hexnan+0xfc>
 800a54e:	4544      	cmp	r4, r8
 800a550:	d9c3      	bls.n	800a4da <__hexnan+0x7a>
 800a552:	2300      	movs	r3, #0
 800a554:	2501      	movs	r5, #1
 800a556:	f844 3c04 	str.w	r3, [r4, #-4]
 800a55a:	3c04      	subs	r4, #4
 800a55c:	6822      	ldr	r2, [r4, #0]
 800a55e:	f000 000f 	and.w	r0, r0, #15
 800a562:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a566:	6022      	str	r2, [r4, #0]
 800a568:	e7b7      	b.n	800a4da <__hexnan+0x7a>
 800a56a:	2508      	movs	r5, #8
 800a56c:	e7b5      	b.n	800a4da <__hexnan+0x7a>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0df      	beq.n	800a534 <__hexnan+0xd4>
 800a574:	f04f 32ff 	mov.w	r2, #4294967295
 800a578:	f1c3 0320 	rsb	r3, r3, #32
 800a57c:	fa22 f303 	lsr.w	r3, r2, r3
 800a580:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a584:	401a      	ands	r2, r3
 800a586:	f846 2c04 	str.w	r2, [r6, #-4]
 800a58a:	e7d3      	b.n	800a534 <__hexnan+0xd4>
 800a58c:	3f04      	subs	r7, #4
 800a58e:	e7d1      	b.n	800a534 <__hexnan+0xd4>
 800a590:	2004      	movs	r0, #4
 800a592:	b007      	add	sp, #28
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a598 <__retarget_lock_init_recursive>:
 800a598:	4770      	bx	lr

0800a59a <__retarget_lock_acquire_recursive>:
 800a59a:	4770      	bx	lr

0800a59c <__retarget_lock_release_recursive>:
 800a59c:	4770      	bx	lr

0800a59e <__ascii_mbtowc>:
 800a59e:	b082      	sub	sp, #8
 800a5a0:	b901      	cbnz	r1, 800a5a4 <__ascii_mbtowc+0x6>
 800a5a2:	a901      	add	r1, sp, #4
 800a5a4:	b142      	cbz	r2, 800a5b8 <__ascii_mbtowc+0x1a>
 800a5a6:	b14b      	cbz	r3, 800a5bc <__ascii_mbtowc+0x1e>
 800a5a8:	7813      	ldrb	r3, [r2, #0]
 800a5aa:	600b      	str	r3, [r1, #0]
 800a5ac:	7812      	ldrb	r2, [r2, #0]
 800a5ae:	1e10      	subs	r0, r2, #0
 800a5b0:	bf18      	it	ne
 800a5b2:	2001      	movne	r0, #1
 800a5b4:	b002      	add	sp, #8
 800a5b6:	4770      	bx	lr
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	e7fb      	b.n	800a5b4 <__ascii_mbtowc+0x16>
 800a5bc:	f06f 0001 	mvn.w	r0, #1
 800a5c0:	e7f8      	b.n	800a5b4 <__ascii_mbtowc+0x16>

0800a5c2 <memcpy>:
 800a5c2:	440a      	add	r2, r1
 800a5c4:	4291      	cmp	r1, r2
 800a5c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5ca:	d100      	bne.n	800a5ce <memcpy+0xc>
 800a5cc:	4770      	bx	lr
 800a5ce:	b510      	push	{r4, lr}
 800a5d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d4:	4291      	cmp	r1, r2
 800a5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5da:	d1f9      	bne.n	800a5d0 <memcpy+0xe>
 800a5dc:	bd10      	pop	{r4, pc}
	...

0800a5e0 <__malloc_lock>:
 800a5e0:	4801      	ldr	r0, [pc, #4]	; (800a5e8 <__malloc_lock+0x8>)
 800a5e2:	f7ff bfda 	b.w	800a59a <__retarget_lock_acquire_recursive>
 800a5e6:	bf00      	nop
 800a5e8:	20001048 	.word	0x20001048

0800a5ec <__malloc_unlock>:
 800a5ec:	4801      	ldr	r0, [pc, #4]	; (800a5f4 <__malloc_unlock+0x8>)
 800a5ee:	f7ff bfd5 	b.w	800a59c <__retarget_lock_release_recursive>
 800a5f2:	bf00      	nop
 800a5f4:	20001048 	.word	0x20001048

0800a5f8 <_Balloc>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	460d      	mov	r5, r1
 800a600:	b976      	cbnz	r6, 800a620 <_Balloc+0x28>
 800a602:	2010      	movs	r0, #16
 800a604:	f7fe fc40 	bl	8008e88 <malloc>
 800a608:	4602      	mov	r2, r0
 800a60a:	6260      	str	r0, [r4, #36]	; 0x24
 800a60c:	b920      	cbnz	r0, 800a618 <_Balloc+0x20>
 800a60e:	2166      	movs	r1, #102	; 0x66
 800a610:	4b17      	ldr	r3, [pc, #92]	; (800a670 <_Balloc+0x78>)
 800a612:	4818      	ldr	r0, [pc, #96]	; (800a674 <_Balloc+0x7c>)
 800a614:	f001 fa2a 	bl	800ba6c <__assert_func>
 800a618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a61c:	6006      	str	r6, [r0, #0]
 800a61e:	60c6      	str	r6, [r0, #12]
 800a620:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a622:	68f3      	ldr	r3, [r6, #12]
 800a624:	b183      	cbz	r3, 800a648 <_Balloc+0x50>
 800a626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a62e:	b9b8      	cbnz	r0, 800a660 <_Balloc+0x68>
 800a630:	2101      	movs	r1, #1
 800a632:	fa01 f605 	lsl.w	r6, r1, r5
 800a636:	1d72      	adds	r2, r6, #5
 800a638:	4620      	mov	r0, r4
 800a63a:	0092      	lsls	r2, r2, #2
 800a63c:	f000 fc94 	bl	800af68 <_calloc_r>
 800a640:	b160      	cbz	r0, 800a65c <_Balloc+0x64>
 800a642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a646:	e00e      	b.n	800a666 <_Balloc+0x6e>
 800a648:	2221      	movs	r2, #33	; 0x21
 800a64a:	2104      	movs	r1, #4
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 fc8b 	bl	800af68 <_calloc_r>
 800a652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a654:	60f0      	str	r0, [r6, #12]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1e4      	bne.n	800a626 <_Balloc+0x2e>
 800a65c:	2000      	movs	r0, #0
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	6802      	ldr	r2, [r0, #0]
 800a662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a666:	2300      	movs	r3, #0
 800a668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a66c:	e7f7      	b.n	800a65e <_Balloc+0x66>
 800a66e:	bf00      	nop
 800a670:	0800c118 	.word	0x0800c118
 800a674:	0800c12f 	.word	0x0800c12f

0800a678 <_Bfree>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a67c:	4605      	mov	r5, r0
 800a67e:	460c      	mov	r4, r1
 800a680:	b976      	cbnz	r6, 800a6a0 <_Bfree+0x28>
 800a682:	2010      	movs	r0, #16
 800a684:	f7fe fc00 	bl	8008e88 <malloc>
 800a688:	4602      	mov	r2, r0
 800a68a:	6268      	str	r0, [r5, #36]	; 0x24
 800a68c:	b920      	cbnz	r0, 800a698 <_Bfree+0x20>
 800a68e:	218a      	movs	r1, #138	; 0x8a
 800a690:	4b08      	ldr	r3, [pc, #32]	; (800a6b4 <_Bfree+0x3c>)
 800a692:	4809      	ldr	r0, [pc, #36]	; (800a6b8 <_Bfree+0x40>)
 800a694:	f001 f9ea 	bl	800ba6c <__assert_func>
 800a698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a69c:	6006      	str	r6, [r0, #0]
 800a69e:	60c6      	str	r6, [r0, #12]
 800a6a0:	b13c      	cbz	r4, 800a6b2 <_Bfree+0x3a>
 800a6a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6a4:	6862      	ldr	r2, [r4, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6ac:	6021      	str	r1, [r4, #0]
 800a6ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	0800c118 	.word	0x0800c118
 800a6b8:	0800c12f 	.word	0x0800c12f

0800a6bc <__multadd>:
 800a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c0:	4698      	mov	r8, r3
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	690e      	ldr	r6, [r1, #16]
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	f101 0014 	add.w	r0, r1, #20
 800a6ce:	6805      	ldr	r5, [r0, #0]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	b2a9      	uxth	r1, r5
 800a6d4:	fb02 8101 	mla	r1, r2, r1, r8
 800a6d8:	0c2d      	lsrs	r5, r5, #16
 800a6da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a6de:	fb02 c505 	mla	r5, r2, r5, ip
 800a6e2:	b289      	uxth	r1, r1
 800a6e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a6e8:	429e      	cmp	r6, r3
 800a6ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a6ee:	f840 1b04 	str.w	r1, [r0], #4
 800a6f2:	dcec      	bgt.n	800a6ce <__multadd+0x12>
 800a6f4:	f1b8 0f00 	cmp.w	r8, #0
 800a6f8:	d022      	beq.n	800a740 <__multadd+0x84>
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	42b3      	cmp	r3, r6
 800a6fe:	dc19      	bgt.n	800a734 <__multadd+0x78>
 800a700:	6861      	ldr	r1, [r4, #4]
 800a702:	4638      	mov	r0, r7
 800a704:	3101      	adds	r1, #1
 800a706:	f7ff ff77 	bl	800a5f8 <_Balloc>
 800a70a:	4605      	mov	r5, r0
 800a70c:	b928      	cbnz	r0, 800a71a <__multadd+0x5e>
 800a70e:	4602      	mov	r2, r0
 800a710:	21b5      	movs	r1, #181	; 0xb5
 800a712:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <__multadd+0x8c>)
 800a714:	480d      	ldr	r0, [pc, #52]	; (800a74c <__multadd+0x90>)
 800a716:	f001 f9a9 	bl	800ba6c <__assert_func>
 800a71a:	6922      	ldr	r2, [r4, #16]
 800a71c:	f104 010c 	add.w	r1, r4, #12
 800a720:	3202      	adds	r2, #2
 800a722:	0092      	lsls	r2, r2, #2
 800a724:	300c      	adds	r0, #12
 800a726:	f7ff ff4c 	bl	800a5c2 <memcpy>
 800a72a:	4621      	mov	r1, r4
 800a72c:	4638      	mov	r0, r7
 800a72e:	f7ff ffa3 	bl	800a678 <_Bfree>
 800a732:	462c      	mov	r4, r5
 800a734:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a738:	3601      	adds	r6, #1
 800a73a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a73e:	6126      	str	r6, [r4, #16]
 800a740:	4620      	mov	r0, r4
 800a742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a746:	bf00      	nop
 800a748:	0800c088 	.word	0x0800c088
 800a74c:	0800c12f 	.word	0x0800c12f

0800a750 <__s2b>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	4615      	mov	r5, r2
 800a756:	2209      	movs	r2, #9
 800a758:	461f      	mov	r7, r3
 800a75a:	3308      	adds	r3, #8
 800a75c:	460c      	mov	r4, r1
 800a75e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a762:	4606      	mov	r6, r0
 800a764:	2201      	movs	r2, #1
 800a766:	2100      	movs	r1, #0
 800a768:	429a      	cmp	r2, r3
 800a76a:	db09      	blt.n	800a780 <__s2b+0x30>
 800a76c:	4630      	mov	r0, r6
 800a76e:	f7ff ff43 	bl	800a5f8 <_Balloc>
 800a772:	b940      	cbnz	r0, 800a786 <__s2b+0x36>
 800a774:	4602      	mov	r2, r0
 800a776:	21ce      	movs	r1, #206	; 0xce
 800a778:	4b18      	ldr	r3, [pc, #96]	; (800a7dc <__s2b+0x8c>)
 800a77a:	4819      	ldr	r0, [pc, #100]	; (800a7e0 <__s2b+0x90>)
 800a77c:	f001 f976 	bl	800ba6c <__assert_func>
 800a780:	0052      	lsls	r2, r2, #1
 800a782:	3101      	adds	r1, #1
 800a784:	e7f0      	b.n	800a768 <__s2b+0x18>
 800a786:	9b08      	ldr	r3, [sp, #32]
 800a788:	2d09      	cmp	r5, #9
 800a78a:	6143      	str	r3, [r0, #20]
 800a78c:	f04f 0301 	mov.w	r3, #1
 800a790:	6103      	str	r3, [r0, #16]
 800a792:	dd16      	ble.n	800a7c2 <__s2b+0x72>
 800a794:	f104 0909 	add.w	r9, r4, #9
 800a798:	46c8      	mov	r8, r9
 800a79a:	442c      	add	r4, r5
 800a79c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a7a0:	4601      	mov	r1, r0
 800a7a2:	220a      	movs	r2, #10
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	3b30      	subs	r3, #48	; 0x30
 800a7a8:	f7ff ff88 	bl	800a6bc <__multadd>
 800a7ac:	45a0      	cmp	r8, r4
 800a7ae:	d1f5      	bne.n	800a79c <__s2b+0x4c>
 800a7b0:	f1a5 0408 	sub.w	r4, r5, #8
 800a7b4:	444c      	add	r4, r9
 800a7b6:	1b2d      	subs	r5, r5, r4
 800a7b8:	1963      	adds	r3, r4, r5
 800a7ba:	42bb      	cmp	r3, r7
 800a7bc:	db04      	blt.n	800a7c8 <__s2b+0x78>
 800a7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c2:	2509      	movs	r5, #9
 800a7c4:	340a      	adds	r4, #10
 800a7c6:	e7f6      	b.n	800a7b6 <__s2b+0x66>
 800a7c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7cc:	4601      	mov	r1, r0
 800a7ce:	220a      	movs	r2, #10
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	3b30      	subs	r3, #48	; 0x30
 800a7d4:	f7ff ff72 	bl	800a6bc <__multadd>
 800a7d8:	e7ee      	b.n	800a7b8 <__s2b+0x68>
 800a7da:	bf00      	nop
 800a7dc:	0800c088 	.word	0x0800c088
 800a7e0:	0800c12f 	.word	0x0800c12f

0800a7e4 <__hi0bits>:
 800a7e4:	0c02      	lsrs	r2, r0, #16
 800a7e6:	0412      	lsls	r2, r2, #16
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	b9ca      	cbnz	r2, 800a820 <__hi0bits+0x3c>
 800a7ec:	0403      	lsls	r3, r0, #16
 800a7ee:	2010      	movs	r0, #16
 800a7f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a7f4:	bf04      	itt	eq
 800a7f6:	021b      	lsleq	r3, r3, #8
 800a7f8:	3008      	addeq	r0, #8
 800a7fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a7fe:	bf04      	itt	eq
 800a800:	011b      	lsleq	r3, r3, #4
 800a802:	3004      	addeq	r0, #4
 800a804:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a808:	bf04      	itt	eq
 800a80a:	009b      	lsleq	r3, r3, #2
 800a80c:	3002      	addeq	r0, #2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	db05      	blt.n	800a81e <__hi0bits+0x3a>
 800a812:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a816:	f100 0001 	add.w	r0, r0, #1
 800a81a:	bf08      	it	eq
 800a81c:	2020      	moveq	r0, #32
 800a81e:	4770      	bx	lr
 800a820:	2000      	movs	r0, #0
 800a822:	e7e5      	b.n	800a7f0 <__hi0bits+0xc>

0800a824 <__lo0bits>:
 800a824:	6803      	ldr	r3, [r0, #0]
 800a826:	4602      	mov	r2, r0
 800a828:	f013 0007 	ands.w	r0, r3, #7
 800a82c:	d00b      	beq.n	800a846 <__lo0bits+0x22>
 800a82e:	07d9      	lsls	r1, r3, #31
 800a830:	d422      	bmi.n	800a878 <__lo0bits+0x54>
 800a832:	0798      	lsls	r0, r3, #30
 800a834:	bf49      	itett	mi
 800a836:	085b      	lsrmi	r3, r3, #1
 800a838:	089b      	lsrpl	r3, r3, #2
 800a83a:	2001      	movmi	r0, #1
 800a83c:	6013      	strmi	r3, [r2, #0]
 800a83e:	bf5c      	itt	pl
 800a840:	2002      	movpl	r0, #2
 800a842:	6013      	strpl	r3, [r2, #0]
 800a844:	4770      	bx	lr
 800a846:	b299      	uxth	r1, r3
 800a848:	b909      	cbnz	r1, 800a84e <__lo0bits+0x2a>
 800a84a:	2010      	movs	r0, #16
 800a84c:	0c1b      	lsrs	r3, r3, #16
 800a84e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a852:	bf04      	itt	eq
 800a854:	0a1b      	lsreq	r3, r3, #8
 800a856:	3008      	addeq	r0, #8
 800a858:	0719      	lsls	r1, r3, #28
 800a85a:	bf04      	itt	eq
 800a85c:	091b      	lsreq	r3, r3, #4
 800a85e:	3004      	addeq	r0, #4
 800a860:	0799      	lsls	r1, r3, #30
 800a862:	bf04      	itt	eq
 800a864:	089b      	lsreq	r3, r3, #2
 800a866:	3002      	addeq	r0, #2
 800a868:	07d9      	lsls	r1, r3, #31
 800a86a:	d403      	bmi.n	800a874 <__lo0bits+0x50>
 800a86c:	085b      	lsrs	r3, r3, #1
 800a86e:	f100 0001 	add.w	r0, r0, #1
 800a872:	d003      	beq.n	800a87c <__lo0bits+0x58>
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	4770      	bx	lr
 800a878:	2000      	movs	r0, #0
 800a87a:	4770      	bx	lr
 800a87c:	2020      	movs	r0, #32
 800a87e:	4770      	bx	lr

0800a880 <__i2b>:
 800a880:	b510      	push	{r4, lr}
 800a882:	460c      	mov	r4, r1
 800a884:	2101      	movs	r1, #1
 800a886:	f7ff feb7 	bl	800a5f8 <_Balloc>
 800a88a:	4602      	mov	r2, r0
 800a88c:	b928      	cbnz	r0, 800a89a <__i2b+0x1a>
 800a88e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a892:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <__i2b+0x24>)
 800a894:	4804      	ldr	r0, [pc, #16]	; (800a8a8 <__i2b+0x28>)
 800a896:	f001 f8e9 	bl	800ba6c <__assert_func>
 800a89a:	2301      	movs	r3, #1
 800a89c:	6144      	str	r4, [r0, #20]
 800a89e:	6103      	str	r3, [r0, #16]
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	bf00      	nop
 800a8a4:	0800c088 	.word	0x0800c088
 800a8a8:	0800c12f 	.word	0x0800c12f

0800a8ac <__multiply>:
 800a8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b0:	4614      	mov	r4, r2
 800a8b2:	690a      	ldr	r2, [r1, #16]
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	460d      	mov	r5, r1
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	bfbe      	ittt	lt
 800a8bc:	460b      	movlt	r3, r1
 800a8be:	4625      	movlt	r5, r4
 800a8c0:	461c      	movlt	r4, r3
 800a8c2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a8c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a8ca:	68ab      	ldr	r3, [r5, #8]
 800a8cc:	6869      	ldr	r1, [r5, #4]
 800a8ce:	eb0a 0709 	add.w	r7, sl, r9
 800a8d2:	42bb      	cmp	r3, r7
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	bfb8      	it	lt
 800a8d8:	3101      	addlt	r1, #1
 800a8da:	f7ff fe8d 	bl	800a5f8 <_Balloc>
 800a8de:	b930      	cbnz	r0, 800a8ee <__multiply+0x42>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	f240 115d 	movw	r1, #349	; 0x15d
 800a8e6:	4b41      	ldr	r3, [pc, #260]	; (800a9ec <__multiply+0x140>)
 800a8e8:	4841      	ldr	r0, [pc, #260]	; (800a9f0 <__multiply+0x144>)
 800a8ea:	f001 f8bf 	bl	800ba6c <__assert_func>
 800a8ee:	f100 0614 	add.w	r6, r0, #20
 800a8f2:	4633      	mov	r3, r6
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a8fa:	4543      	cmp	r3, r8
 800a8fc:	d31e      	bcc.n	800a93c <__multiply+0x90>
 800a8fe:	f105 0c14 	add.w	ip, r5, #20
 800a902:	f104 0314 	add.w	r3, r4, #20
 800a906:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a90a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a90e:	9202      	str	r2, [sp, #8]
 800a910:	ebac 0205 	sub.w	r2, ip, r5
 800a914:	3a15      	subs	r2, #21
 800a916:	f022 0203 	bic.w	r2, r2, #3
 800a91a:	3204      	adds	r2, #4
 800a91c:	f105 0115 	add.w	r1, r5, #21
 800a920:	458c      	cmp	ip, r1
 800a922:	bf38      	it	cc
 800a924:	2204      	movcc	r2, #4
 800a926:	9201      	str	r2, [sp, #4]
 800a928:	9a02      	ldr	r2, [sp, #8]
 800a92a:	9303      	str	r3, [sp, #12]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d808      	bhi.n	800a942 <__multiply+0x96>
 800a930:	2f00      	cmp	r7, #0
 800a932:	dc55      	bgt.n	800a9e0 <__multiply+0x134>
 800a934:	6107      	str	r7, [r0, #16]
 800a936:	b005      	add	sp, #20
 800a938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93c:	f843 2b04 	str.w	r2, [r3], #4
 800a940:	e7db      	b.n	800a8fa <__multiply+0x4e>
 800a942:	f8b3 a000 	ldrh.w	sl, [r3]
 800a946:	f1ba 0f00 	cmp.w	sl, #0
 800a94a:	d020      	beq.n	800a98e <__multiply+0xe2>
 800a94c:	46b1      	mov	r9, r6
 800a94e:	2200      	movs	r2, #0
 800a950:	f105 0e14 	add.w	lr, r5, #20
 800a954:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a958:	f8d9 b000 	ldr.w	fp, [r9]
 800a95c:	b2a1      	uxth	r1, r4
 800a95e:	fa1f fb8b 	uxth.w	fp, fp
 800a962:	fb0a b101 	mla	r1, sl, r1, fp
 800a966:	4411      	add	r1, r2
 800a968:	f8d9 2000 	ldr.w	r2, [r9]
 800a96c:	0c24      	lsrs	r4, r4, #16
 800a96e:	0c12      	lsrs	r2, r2, #16
 800a970:	fb0a 2404 	mla	r4, sl, r4, r2
 800a974:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a978:	b289      	uxth	r1, r1
 800a97a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a97e:	45f4      	cmp	ip, lr
 800a980:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a984:	f849 1b04 	str.w	r1, [r9], #4
 800a988:	d8e4      	bhi.n	800a954 <__multiply+0xa8>
 800a98a:	9901      	ldr	r1, [sp, #4]
 800a98c:	5072      	str	r2, [r6, r1]
 800a98e:	9a03      	ldr	r2, [sp, #12]
 800a990:	3304      	adds	r3, #4
 800a992:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a996:	f1b9 0f00 	cmp.w	r9, #0
 800a99a:	d01f      	beq.n	800a9dc <__multiply+0x130>
 800a99c:	46b6      	mov	lr, r6
 800a99e:	f04f 0a00 	mov.w	sl, #0
 800a9a2:	6834      	ldr	r4, [r6, #0]
 800a9a4:	f105 0114 	add.w	r1, r5, #20
 800a9a8:	880a      	ldrh	r2, [r1, #0]
 800a9aa:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a9ae:	b2a4      	uxth	r4, r4
 800a9b0:	fb09 b202 	mla	r2, r9, r2, fp
 800a9b4:	4492      	add	sl, r2
 800a9b6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a9ba:	f84e 4b04 	str.w	r4, [lr], #4
 800a9be:	f851 4b04 	ldr.w	r4, [r1], #4
 800a9c2:	f8be 2000 	ldrh.w	r2, [lr]
 800a9c6:	0c24      	lsrs	r4, r4, #16
 800a9c8:	fb09 2404 	mla	r4, r9, r4, r2
 800a9cc:	458c      	cmp	ip, r1
 800a9ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a9d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a9d6:	d8e7      	bhi.n	800a9a8 <__multiply+0xfc>
 800a9d8:	9a01      	ldr	r2, [sp, #4]
 800a9da:	50b4      	str	r4, [r6, r2]
 800a9dc:	3604      	adds	r6, #4
 800a9de:	e7a3      	b.n	800a928 <__multiply+0x7c>
 800a9e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1a5      	bne.n	800a934 <__multiply+0x88>
 800a9e8:	3f01      	subs	r7, #1
 800a9ea:	e7a1      	b.n	800a930 <__multiply+0x84>
 800a9ec:	0800c088 	.word	0x0800c088
 800a9f0:	0800c12f 	.word	0x0800c12f

0800a9f4 <__pow5mult>:
 800a9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f8:	4615      	mov	r5, r2
 800a9fa:	f012 0203 	ands.w	r2, r2, #3
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460f      	mov	r7, r1
 800aa02:	d007      	beq.n	800aa14 <__pow5mult+0x20>
 800aa04:	4c25      	ldr	r4, [pc, #148]	; (800aa9c <__pow5mult+0xa8>)
 800aa06:	3a01      	subs	r2, #1
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa0e:	f7ff fe55 	bl	800a6bc <__multadd>
 800aa12:	4607      	mov	r7, r0
 800aa14:	10ad      	asrs	r5, r5, #2
 800aa16:	d03d      	beq.n	800aa94 <__pow5mult+0xa0>
 800aa18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa1a:	b97c      	cbnz	r4, 800aa3c <__pow5mult+0x48>
 800aa1c:	2010      	movs	r0, #16
 800aa1e:	f7fe fa33 	bl	8008e88 <malloc>
 800aa22:	4602      	mov	r2, r0
 800aa24:	6270      	str	r0, [r6, #36]	; 0x24
 800aa26:	b928      	cbnz	r0, 800aa34 <__pow5mult+0x40>
 800aa28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aa2c:	4b1c      	ldr	r3, [pc, #112]	; (800aaa0 <__pow5mult+0xac>)
 800aa2e:	481d      	ldr	r0, [pc, #116]	; (800aaa4 <__pow5mult+0xb0>)
 800aa30:	f001 f81c 	bl	800ba6c <__assert_func>
 800aa34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa38:	6004      	str	r4, [r0, #0]
 800aa3a:	60c4      	str	r4, [r0, #12]
 800aa3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa44:	b94c      	cbnz	r4, 800aa5a <__pow5mult+0x66>
 800aa46:	f240 2171 	movw	r1, #625	; 0x271
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f7ff ff18 	bl	800a880 <__i2b>
 800aa50:	2300      	movs	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa58:	6003      	str	r3, [r0, #0]
 800aa5a:	f04f 0900 	mov.w	r9, #0
 800aa5e:	07eb      	lsls	r3, r5, #31
 800aa60:	d50a      	bpl.n	800aa78 <__pow5mult+0x84>
 800aa62:	4639      	mov	r1, r7
 800aa64:	4622      	mov	r2, r4
 800aa66:	4630      	mov	r0, r6
 800aa68:	f7ff ff20 	bl	800a8ac <__multiply>
 800aa6c:	4680      	mov	r8, r0
 800aa6e:	4639      	mov	r1, r7
 800aa70:	4630      	mov	r0, r6
 800aa72:	f7ff fe01 	bl	800a678 <_Bfree>
 800aa76:	4647      	mov	r7, r8
 800aa78:	106d      	asrs	r5, r5, #1
 800aa7a:	d00b      	beq.n	800aa94 <__pow5mult+0xa0>
 800aa7c:	6820      	ldr	r0, [r4, #0]
 800aa7e:	b938      	cbnz	r0, 800aa90 <__pow5mult+0x9c>
 800aa80:	4622      	mov	r2, r4
 800aa82:	4621      	mov	r1, r4
 800aa84:	4630      	mov	r0, r6
 800aa86:	f7ff ff11 	bl	800a8ac <__multiply>
 800aa8a:	6020      	str	r0, [r4, #0]
 800aa8c:	f8c0 9000 	str.w	r9, [r0]
 800aa90:	4604      	mov	r4, r0
 800aa92:	e7e4      	b.n	800aa5e <__pow5mult+0x6a>
 800aa94:	4638      	mov	r0, r7
 800aa96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9a:	bf00      	nop
 800aa9c:	0800c280 	.word	0x0800c280
 800aaa0:	0800c118 	.word	0x0800c118
 800aaa4:	0800c12f 	.word	0x0800c12f

0800aaa8 <__lshift>:
 800aaa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaac:	460c      	mov	r4, r1
 800aaae:	4607      	mov	r7, r0
 800aab0:	4691      	mov	r9, r2
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	6849      	ldr	r1, [r1, #4]
 800aab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aac0:	f108 0601 	add.w	r6, r8, #1
 800aac4:	42b3      	cmp	r3, r6
 800aac6:	db0b      	blt.n	800aae0 <__lshift+0x38>
 800aac8:	4638      	mov	r0, r7
 800aaca:	f7ff fd95 	bl	800a5f8 <_Balloc>
 800aace:	4605      	mov	r5, r0
 800aad0:	b948      	cbnz	r0, 800aae6 <__lshift+0x3e>
 800aad2:	4602      	mov	r2, r0
 800aad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aad8:	4b27      	ldr	r3, [pc, #156]	; (800ab78 <__lshift+0xd0>)
 800aada:	4828      	ldr	r0, [pc, #160]	; (800ab7c <__lshift+0xd4>)
 800aadc:	f000 ffc6 	bl	800ba6c <__assert_func>
 800aae0:	3101      	adds	r1, #1
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	e7ee      	b.n	800aac4 <__lshift+0x1c>
 800aae6:	2300      	movs	r3, #0
 800aae8:	f100 0114 	add.w	r1, r0, #20
 800aaec:	f100 0210 	add.w	r2, r0, #16
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	4553      	cmp	r3, sl
 800aaf4:	db33      	blt.n	800ab5e <__lshift+0xb6>
 800aaf6:	6920      	ldr	r0, [r4, #16]
 800aaf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aafc:	f104 0314 	add.w	r3, r4, #20
 800ab00:	f019 091f 	ands.w	r9, r9, #31
 800ab04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab0c:	d02b      	beq.n	800ab66 <__lshift+0xbe>
 800ab0e:	468a      	mov	sl, r1
 800ab10:	2200      	movs	r2, #0
 800ab12:	f1c9 0e20 	rsb	lr, r9, #32
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	fa00 f009 	lsl.w	r0, r0, r9
 800ab1c:	4302      	orrs	r2, r0
 800ab1e:	f84a 2b04 	str.w	r2, [sl], #4
 800ab22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab26:	459c      	cmp	ip, r3
 800ab28:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab2c:	d8f3      	bhi.n	800ab16 <__lshift+0x6e>
 800ab2e:	ebac 0304 	sub.w	r3, ip, r4
 800ab32:	3b15      	subs	r3, #21
 800ab34:	f023 0303 	bic.w	r3, r3, #3
 800ab38:	3304      	adds	r3, #4
 800ab3a:	f104 0015 	add.w	r0, r4, #21
 800ab3e:	4584      	cmp	ip, r0
 800ab40:	bf38      	it	cc
 800ab42:	2304      	movcc	r3, #4
 800ab44:	50ca      	str	r2, [r1, r3]
 800ab46:	b10a      	cbz	r2, 800ab4c <__lshift+0xa4>
 800ab48:	f108 0602 	add.w	r6, r8, #2
 800ab4c:	3e01      	subs	r6, #1
 800ab4e:	4638      	mov	r0, r7
 800ab50:	4621      	mov	r1, r4
 800ab52:	612e      	str	r6, [r5, #16]
 800ab54:	f7ff fd90 	bl	800a678 <_Bfree>
 800ab58:	4628      	mov	r0, r5
 800ab5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab62:	3301      	adds	r3, #1
 800ab64:	e7c5      	b.n	800aaf2 <__lshift+0x4a>
 800ab66:	3904      	subs	r1, #4
 800ab68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab6c:	459c      	cmp	ip, r3
 800ab6e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab72:	d8f9      	bhi.n	800ab68 <__lshift+0xc0>
 800ab74:	e7ea      	b.n	800ab4c <__lshift+0xa4>
 800ab76:	bf00      	nop
 800ab78:	0800c088 	.word	0x0800c088
 800ab7c:	0800c12f 	.word	0x0800c12f

0800ab80 <__mcmp>:
 800ab80:	4603      	mov	r3, r0
 800ab82:	690a      	ldr	r2, [r1, #16]
 800ab84:	6900      	ldr	r0, [r0, #16]
 800ab86:	b530      	push	{r4, r5, lr}
 800ab88:	1a80      	subs	r0, r0, r2
 800ab8a:	d10d      	bne.n	800aba8 <__mcmp+0x28>
 800ab8c:	3314      	adds	r3, #20
 800ab8e:	3114      	adds	r1, #20
 800ab90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aba0:	4295      	cmp	r5, r2
 800aba2:	d002      	beq.n	800abaa <__mcmp+0x2a>
 800aba4:	d304      	bcc.n	800abb0 <__mcmp+0x30>
 800aba6:	2001      	movs	r0, #1
 800aba8:	bd30      	pop	{r4, r5, pc}
 800abaa:	42a3      	cmp	r3, r4
 800abac:	d3f4      	bcc.n	800ab98 <__mcmp+0x18>
 800abae:	e7fb      	b.n	800aba8 <__mcmp+0x28>
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295
 800abb4:	e7f8      	b.n	800aba8 <__mcmp+0x28>
	...

0800abb8 <__mdiff>:
 800abb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	460c      	mov	r4, r1
 800abbe:	4606      	mov	r6, r0
 800abc0:	4611      	mov	r1, r2
 800abc2:	4620      	mov	r0, r4
 800abc4:	4692      	mov	sl, r2
 800abc6:	f7ff ffdb 	bl	800ab80 <__mcmp>
 800abca:	1e05      	subs	r5, r0, #0
 800abcc:	d111      	bne.n	800abf2 <__mdiff+0x3a>
 800abce:	4629      	mov	r1, r5
 800abd0:	4630      	mov	r0, r6
 800abd2:	f7ff fd11 	bl	800a5f8 <_Balloc>
 800abd6:	4602      	mov	r2, r0
 800abd8:	b928      	cbnz	r0, 800abe6 <__mdiff+0x2e>
 800abda:	f240 2132 	movw	r1, #562	; 0x232
 800abde:	4b3c      	ldr	r3, [pc, #240]	; (800acd0 <__mdiff+0x118>)
 800abe0:	483c      	ldr	r0, [pc, #240]	; (800acd4 <__mdiff+0x11c>)
 800abe2:	f000 ff43 	bl	800ba6c <__assert_func>
 800abe6:	2301      	movs	r3, #1
 800abe8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abec:	4610      	mov	r0, r2
 800abee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf2:	bfa4      	itt	ge
 800abf4:	4653      	movge	r3, sl
 800abf6:	46a2      	movge	sl, r4
 800abf8:	4630      	mov	r0, r6
 800abfa:	f8da 1004 	ldr.w	r1, [sl, #4]
 800abfe:	bfa6      	itte	ge
 800ac00:	461c      	movge	r4, r3
 800ac02:	2500      	movge	r5, #0
 800ac04:	2501      	movlt	r5, #1
 800ac06:	f7ff fcf7 	bl	800a5f8 <_Balloc>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	b918      	cbnz	r0, 800ac16 <__mdiff+0x5e>
 800ac0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ac12:	4b2f      	ldr	r3, [pc, #188]	; (800acd0 <__mdiff+0x118>)
 800ac14:	e7e4      	b.n	800abe0 <__mdiff+0x28>
 800ac16:	f100 0814 	add.w	r8, r0, #20
 800ac1a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ac1e:	60c5      	str	r5, [r0, #12]
 800ac20:	f04f 0c00 	mov.w	ip, #0
 800ac24:	f10a 0514 	add.w	r5, sl, #20
 800ac28:	f10a 0010 	add.w	r0, sl, #16
 800ac2c:	46c2      	mov	sl, r8
 800ac2e:	6926      	ldr	r6, [r4, #16]
 800ac30:	f104 0914 	add.w	r9, r4, #20
 800ac34:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ac38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac3c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800ac40:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac44:	fa1f f18b 	uxth.w	r1, fp
 800ac48:	4461      	add	r1, ip
 800ac4a:	fa1f fc83 	uxth.w	ip, r3
 800ac4e:	0c1b      	lsrs	r3, r3, #16
 800ac50:	eba1 010c 	sub.w	r1, r1, ip
 800ac54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ac5c:	b289      	uxth	r1, r1
 800ac5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ac62:	454e      	cmp	r6, r9
 800ac64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ac68:	f84a 3b04 	str.w	r3, [sl], #4
 800ac6c:	d8e6      	bhi.n	800ac3c <__mdiff+0x84>
 800ac6e:	1b33      	subs	r3, r6, r4
 800ac70:	3b15      	subs	r3, #21
 800ac72:	f023 0303 	bic.w	r3, r3, #3
 800ac76:	3415      	adds	r4, #21
 800ac78:	3304      	adds	r3, #4
 800ac7a:	42a6      	cmp	r6, r4
 800ac7c:	bf38      	it	cc
 800ac7e:	2304      	movcc	r3, #4
 800ac80:	441d      	add	r5, r3
 800ac82:	4443      	add	r3, r8
 800ac84:	461e      	mov	r6, r3
 800ac86:	462c      	mov	r4, r5
 800ac88:	4574      	cmp	r4, lr
 800ac8a:	d30e      	bcc.n	800acaa <__mdiff+0xf2>
 800ac8c:	f10e 0103 	add.w	r1, lr, #3
 800ac90:	1b49      	subs	r1, r1, r5
 800ac92:	f021 0103 	bic.w	r1, r1, #3
 800ac96:	3d03      	subs	r5, #3
 800ac98:	45ae      	cmp	lr, r5
 800ac9a:	bf38      	it	cc
 800ac9c:	2100      	movcc	r1, #0
 800ac9e:	4419      	add	r1, r3
 800aca0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800aca4:	b18b      	cbz	r3, 800acca <__mdiff+0x112>
 800aca6:	6117      	str	r7, [r2, #16]
 800aca8:	e7a0      	b.n	800abec <__mdiff+0x34>
 800acaa:	f854 8b04 	ldr.w	r8, [r4], #4
 800acae:	fa1f f188 	uxth.w	r1, r8
 800acb2:	4461      	add	r1, ip
 800acb4:	1408      	asrs	r0, r1, #16
 800acb6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800acba:	b289      	uxth	r1, r1
 800acbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800acc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acc4:	f846 1b04 	str.w	r1, [r6], #4
 800acc8:	e7de      	b.n	800ac88 <__mdiff+0xd0>
 800acca:	3f01      	subs	r7, #1
 800accc:	e7e8      	b.n	800aca0 <__mdiff+0xe8>
 800acce:	bf00      	nop
 800acd0:	0800c088 	.word	0x0800c088
 800acd4:	0800c12f 	.word	0x0800c12f

0800acd8 <__ulp>:
 800acd8:	4b11      	ldr	r3, [pc, #68]	; (800ad20 <__ulp+0x48>)
 800acda:	400b      	ands	r3, r1
 800acdc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	dd02      	ble.n	800acea <__ulp+0x12>
 800ace4:	2000      	movs	r0, #0
 800ace6:	4619      	mov	r1, r3
 800ace8:	4770      	bx	lr
 800acea:	425b      	negs	r3, r3
 800acec:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800acf0:	f04f 0000 	mov.w	r0, #0
 800acf4:	f04f 0100 	mov.w	r1, #0
 800acf8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800acfc:	da04      	bge.n	800ad08 <__ulp+0x30>
 800acfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad02:	fa43 f102 	asr.w	r1, r3, r2
 800ad06:	4770      	bx	lr
 800ad08:	f1a2 0314 	sub.w	r3, r2, #20
 800ad0c:	2b1e      	cmp	r3, #30
 800ad0e:	bfd6      	itet	le
 800ad10:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ad14:	2301      	movgt	r3, #1
 800ad16:	fa22 f303 	lsrle.w	r3, r2, r3
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	7ff00000 	.word	0x7ff00000

0800ad24 <__b2d>:
 800ad24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad28:	6907      	ldr	r7, [r0, #16]
 800ad2a:	f100 0914 	add.w	r9, r0, #20
 800ad2e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ad32:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ad36:	f1a7 0804 	sub.w	r8, r7, #4
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff fd52 	bl	800a7e4 <__hi0bits>
 800ad40:	f1c0 0320 	rsb	r3, r0, #32
 800ad44:	280a      	cmp	r0, #10
 800ad46:	600b      	str	r3, [r1, #0]
 800ad48:	491f      	ldr	r1, [pc, #124]	; (800adc8 <__b2d+0xa4>)
 800ad4a:	dc17      	bgt.n	800ad7c <__b2d+0x58>
 800ad4c:	45c1      	cmp	r9, r8
 800ad4e:	bf28      	it	cs
 800ad50:	2200      	movcs	r2, #0
 800ad52:	f1c0 0c0b 	rsb	ip, r0, #11
 800ad56:	fa26 f30c 	lsr.w	r3, r6, ip
 800ad5a:	bf38      	it	cc
 800ad5c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ad60:	ea43 0501 	orr.w	r5, r3, r1
 800ad64:	f100 0315 	add.w	r3, r0, #21
 800ad68:	fa06 f303 	lsl.w	r3, r6, r3
 800ad6c:	fa22 f20c 	lsr.w	r2, r2, ip
 800ad70:	ea43 0402 	orr.w	r4, r3, r2
 800ad74:	4620      	mov	r0, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad7c:	45c1      	cmp	r9, r8
 800ad7e:	bf2e      	itee	cs
 800ad80:	2200      	movcs	r2, #0
 800ad82:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ad86:	f1a7 0808 	subcc.w	r8, r7, #8
 800ad8a:	f1b0 030b 	subs.w	r3, r0, #11
 800ad8e:	d016      	beq.n	800adbe <__b2d+0x9a>
 800ad90:	f1c3 0720 	rsb	r7, r3, #32
 800ad94:	fa22 f107 	lsr.w	r1, r2, r7
 800ad98:	45c8      	cmp	r8, r9
 800ad9a:	fa06 f603 	lsl.w	r6, r6, r3
 800ad9e:	ea46 0601 	orr.w	r6, r6, r1
 800ada2:	bf94      	ite	ls
 800ada4:	2100      	movls	r1, #0
 800ada6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800adaa:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800adae:	fa02 f003 	lsl.w	r0, r2, r3
 800adb2:	40f9      	lsrs	r1, r7
 800adb4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800adb8:	ea40 0401 	orr.w	r4, r0, r1
 800adbc:	e7da      	b.n	800ad74 <__b2d+0x50>
 800adbe:	4614      	mov	r4, r2
 800adc0:	ea46 0501 	orr.w	r5, r6, r1
 800adc4:	e7d6      	b.n	800ad74 <__b2d+0x50>
 800adc6:	bf00      	nop
 800adc8:	3ff00000 	.word	0x3ff00000

0800adcc <__d2b>:
 800adcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800add0:	2101      	movs	r1, #1
 800add2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800add6:	4690      	mov	r8, r2
 800add8:	461d      	mov	r5, r3
 800adda:	f7ff fc0d 	bl	800a5f8 <_Balloc>
 800adde:	4604      	mov	r4, r0
 800ade0:	b930      	cbnz	r0, 800adf0 <__d2b+0x24>
 800ade2:	4602      	mov	r2, r0
 800ade4:	f240 310a 	movw	r1, #778	; 0x30a
 800ade8:	4b24      	ldr	r3, [pc, #144]	; (800ae7c <__d2b+0xb0>)
 800adea:	4825      	ldr	r0, [pc, #148]	; (800ae80 <__d2b+0xb4>)
 800adec:	f000 fe3e 	bl	800ba6c <__assert_func>
 800adf0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800adf4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800adf8:	bb2d      	cbnz	r5, 800ae46 <__d2b+0x7a>
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	f1b8 0300 	subs.w	r3, r8, #0
 800ae00:	d026      	beq.n	800ae50 <__d2b+0x84>
 800ae02:	4668      	mov	r0, sp
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	f7ff fd0d 	bl	800a824 <__lo0bits>
 800ae0a:	9900      	ldr	r1, [sp, #0]
 800ae0c:	b1f0      	cbz	r0, 800ae4c <__d2b+0x80>
 800ae0e:	9a01      	ldr	r2, [sp, #4]
 800ae10:	f1c0 0320 	rsb	r3, r0, #32
 800ae14:	fa02 f303 	lsl.w	r3, r2, r3
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	40c2      	lsrs	r2, r0
 800ae1c:	6163      	str	r3, [r4, #20]
 800ae1e:	9201      	str	r2, [sp, #4]
 800ae20:	9b01      	ldr	r3, [sp, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	bf14      	ite	ne
 800ae26:	2102      	movne	r1, #2
 800ae28:	2101      	moveq	r1, #1
 800ae2a:	61a3      	str	r3, [r4, #24]
 800ae2c:	6121      	str	r1, [r4, #16]
 800ae2e:	b1c5      	cbz	r5, 800ae62 <__d2b+0x96>
 800ae30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae34:	4405      	add	r5, r0
 800ae36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae3a:	603d      	str	r5, [r7, #0]
 800ae3c:	6030      	str	r0, [r6, #0]
 800ae3e:	4620      	mov	r0, r4
 800ae40:	b002      	add	sp, #8
 800ae42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae4a:	e7d6      	b.n	800adfa <__d2b+0x2e>
 800ae4c:	6161      	str	r1, [r4, #20]
 800ae4e:	e7e7      	b.n	800ae20 <__d2b+0x54>
 800ae50:	a801      	add	r0, sp, #4
 800ae52:	f7ff fce7 	bl	800a824 <__lo0bits>
 800ae56:	2101      	movs	r1, #1
 800ae58:	9b01      	ldr	r3, [sp, #4]
 800ae5a:	6121      	str	r1, [r4, #16]
 800ae5c:	6163      	str	r3, [r4, #20]
 800ae5e:	3020      	adds	r0, #32
 800ae60:	e7e5      	b.n	800ae2e <__d2b+0x62>
 800ae62:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ae66:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae6a:	6038      	str	r0, [r7, #0]
 800ae6c:	6918      	ldr	r0, [r3, #16]
 800ae6e:	f7ff fcb9 	bl	800a7e4 <__hi0bits>
 800ae72:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ae76:	6031      	str	r1, [r6, #0]
 800ae78:	e7e1      	b.n	800ae3e <__d2b+0x72>
 800ae7a:	bf00      	nop
 800ae7c:	0800c088 	.word	0x0800c088
 800ae80:	0800c12f 	.word	0x0800c12f

0800ae84 <__ratio>:
 800ae84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	4688      	mov	r8, r1
 800ae8a:	4669      	mov	r1, sp
 800ae8c:	4681      	mov	r9, r0
 800ae8e:	f7ff ff49 	bl	800ad24 <__b2d>
 800ae92:	460f      	mov	r7, r1
 800ae94:	4604      	mov	r4, r0
 800ae96:	460d      	mov	r5, r1
 800ae98:	4640      	mov	r0, r8
 800ae9a:	a901      	add	r1, sp, #4
 800ae9c:	f7ff ff42 	bl	800ad24 <__b2d>
 800aea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aea4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aea8:	468b      	mov	fp, r1
 800aeaa:	eba3 0c02 	sub.w	ip, r3, r2
 800aeae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aeb2:	1a9b      	subs	r3, r3, r2
 800aeb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	bfd5      	itete	le
 800aebc:	460a      	movle	r2, r1
 800aebe:	462a      	movgt	r2, r5
 800aec0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aec4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aec8:	bfd8      	it	le
 800aeca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aece:	465b      	mov	r3, fp
 800aed0:	4602      	mov	r2, r0
 800aed2:	4639      	mov	r1, r7
 800aed4:	4620      	mov	r0, r4
 800aed6:	f7f5 fc29 	bl	800072c <__aeabi_ddiv>
 800aeda:	b003      	add	sp, #12
 800aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aee0 <__copybits>:
 800aee0:	3901      	subs	r1, #1
 800aee2:	b570      	push	{r4, r5, r6, lr}
 800aee4:	1149      	asrs	r1, r1, #5
 800aee6:	6914      	ldr	r4, [r2, #16]
 800aee8:	3101      	adds	r1, #1
 800aeea:	f102 0314 	add.w	r3, r2, #20
 800aeee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aef2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aef6:	1f05      	subs	r5, r0, #4
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	d30c      	bcc.n	800af16 <__copybits+0x36>
 800aefc:	1aa3      	subs	r3, r4, r2
 800aefe:	3b11      	subs	r3, #17
 800af00:	f023 0303 	bic.w	r3, r3, #3
 800af04:	3211      	adds	r2, #17
 800af06:	42a2      	cmp	r2, r4
 800af08:	bf88      	it	hi
 800af0a:	2300      	movhi	r3, #0
 800af0c:	4418      	add	r0, r3
 800af0e:	2300      	movs	r3, #0
 800af10:	4288      	cmp	r0, r1
 800af12:	d305      	bcc.n	800af20 <__copybits+0x40>
 800af14:	bd70      	pop	{r4, r5, r6, pc}
 800af16:	f853 6b04 	ldr.w	r6, [r3], #4
 800af1a:	f845 6f04 	str.w	r6, [r5, #4]!
 800af1e:	e7eb      	b.n	800aef8 <__copybits+0x18>
 800af20:	f840 3b04 	str.w	r3, [r0], #4
 800af24:	e7f4      	b.n	800af10 <__copybits+0x30>

0800af26 <__any_on>:
 800af26:	f100 0214 	add.w	r2, r0, #20
 800af2a:	6900      	ldr	r0, [r0, #16]
 800af2c:	114b      	asrs	r3, r1, #5
 800af2e:	4298      	cmp	r0, r3
 800af30:	b510      	push	{r4, lr}
 800af32:	db11      	blt.n	800af58 <__any_on+0x32>
 800af34:	dd0a      	ble.n	800af4c <__any_on+0x26>
 800af36:	f011 011f 	ands.w	r1, r1, #31
 800af3a:	d007      	beq.n	800af4c <__any_on+0x26>
 800af3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af40:	fa24 f001 	lsr.w	r0, r4, r1
 800af44:	fa00 f101 	lsl.w	r1, r0, r1
 800af48:	428c      	cmp	r4, r1
 800af4a:	d10b      	bne.n	800af64 <__any_on+0x3e>
 800af4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af50:	4293      	cmp	r3, r2
 800af52:	d803      	bhi.n	800af5c <__any_on+0x36>
 800af54:	2000      	movs	r0, #0
 800af56:	bd10      	pop	{r4, pc}
 800af58:	4603      	mov	r3, r0
 800af5a:	e7f7      	b.n	800af4c <__any_on+0x26>
 800af5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af60:	2900      	cmp	r1, #0
 800af62:	d0f5      	beq.n	800af50 <__any_on+0x2a>
 800af64:	2001      	movs	r0, #1
 800af66:	e7f6      	b.n	800af56 <__any_on+0x30>

0800af68 <_calloc_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	fb02 f501 	mul.w	r5, r2, r1
 800af6e:	4629      	mov	r1, r5
 800af70:	f7fd ffe6 	bl	8008f40 <_malloc_r>
 800af74:	4604      	mov	r4, r0
 800af76:	b118      	cbz	r0, 800af80 <_calloc_r+0x18>
 800af78:	462a      	mov	r2, r5
 800af7a:	2100      	movs	r1, #0
 800af7c:	f7fd ff8c 	bl	8008e98 <memset>
 800af80:	4620      	mov	r0, r4
 800af82:	bd38      	pop	{r3, r4, r5, pc}

0800af84 <__ssputs_r>:
 800af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	688e      	ldr	r6, [r1, #8]
 800af8a:	4682      	mov	sl, r0
 800af8c:	429e      	cmp	r6, r3
 800af8e:	460c      	mov	r4, r1
 800af90:	4690      	mov	r8, r2
 800af92:	461f      	mov	r7, r3
 800af94:	d838      	bhi.n	800b008 <__ssputs_r+0x84>
 800af96:	898a      	ldrh	r2, [r1, #12]
 800af98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af9c:	d032      	beq.n	800b004 <__ssputs_r+0x80>
 800af9e:	6825      	ldr	r5, [r4, #0]
 800afa0:	6909      	ldr	r1, [r1, #16]
 800afa2:	3301      	adds	r3, #1
 800afa4:	eba5 0901 	sub.w	r9, r5, r1
 800afa8:	6965      	ldr	r5, [r4, #20]
 800afaa:	444b      	add	r3, r9
 800afac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afb4:	106d      	asrs	r5, r5, #1
 800afb6:	429d      	cmp	r5, r3
 800afb8:	bf38      	it	cc
 800afba:	461d      	movcc	r5, r3
 800afbc:	0553      	lsls	r3, r2, #21
 800afbe:	d531      	bpl.n	800b024 <__ssputs_r+0xa0>
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7fd ffbd 	bl	8008f40 <_malloc_r>
 800afc6:	4606      	mov	r6, r0
 800afc8:	b950      	cbnz	r0, 800afe0 <__ssputs_r+0x5c>
 800afca:	230c      	movs	r3, #12
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295
 800afd0:	f8ca 3000 	str.w	r3, [sl]
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe0:	464a      	mov	r2, r9
 800afe2:	6921      	ldr	r1, [r4, #16]
 800afe4:	f7ff faed 	bl	800a5c2 <memcpy>
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff2:	81a3      	strh	r3, [r4, #12]
 800aff4:	6126      	str	r6, [r4, #16]
 800aff6:	444e      	add	r6, r9
 800aff8:	6026      	str	r6, [r4, #0]
 800affa:	463e      	mov	r6, r7
 800affc:	6165      	str	r5, [r4, #20]
 800affe:	eba5 0509 	sub.w	r5, r5, r9
 800b002:	60a5      	str	r5, [r4, #8]
 800b004:	42be      	cmp	r6, r7
 800b006:	d900      	bls.n	800b00a <__ssputs_r+0x86>
 800b008:	463e      	mov	r6, r7
 800b00a:	4632      	mov	r2, r6
 800b00c:	4641      	mov	r1, r8
 800b00e:	6820      	ldr	r0, [r4, #0]
 800b010:	f000 feb2 	bl	800bd78 <memmove>
 800b014:	68a3      	ldr	r3, [r4, #8]
 800b016:	6822      	ldr	r2, [r4, #0]
 800b018:	1b9b      	subs	r3, r3, r6
 800b01a:	4432      	add	r2, r6
 800b01c:	2000      	movs	r0, #0
 800b01e:	60a3      	str	r3, [r4, #8]
 800b020:	6022      	str	r2, [r4, #0]
 800b022:	e7db      	b.n	800afdc <__ssputs_r+0x58>
 800b024:	462a      	mov	r2, r5
 800b026:	f000 fec1 	bl	800bdac <_realloc_r>
 800b02a:	4606      	mov	r6, r0
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d1e1      	bne.n	800aff4 <__ssputs_r+0x70>
 800b030:	4650      	mov	r0, sl
 800b032:	6921      	ldr	r1, [r4, #16]
 800b034:	f7fd ff38 	bl	8008ea8 <_free_r>
 800b038:	e7c7      	b.n	800afca <__ssputs_r+0x46>
	...

0800b03c <_svfiprintf_r>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	4698      	mov	r8, r3
 800b042:	898b      	ldrh	r3, [r1, #12]
 800b044:	4607      	mov	r7, r0
 800b046:	061b      	lsls	r3, r3, #24
 800b048:	460d      	mov	r5, r1
 800b04a:	4614      	mov	r4, r2
 800b04c:	b09d      	sub	sp, #116	; 0x74
 800b04e:	d50e      	bpl.n	800b06e <_svfiprintf_r+0x32>
 800b050:	690b      	ldr	r3, [r1, #16]
 800b052:	b963      	cbnz	r3, 800b06e <_svfiprintf_r+0x32>
 800b054:	2140      	movs	r1, #64	; 0x40
 800b056:	f7fd ff73 	bl	8008f40 <_malloc_r>
 800b05a:	6028      	str	r0, [r5, #0]
 800b05c:	6128      	str	r0, [r5, #16]
 800b05e:	b920      	cbnz	r0, 800b06a <_svfiprintf_r+0x2e>
 800b060:	230c      	movs	r3, #12
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	e0d1      	b.n	800b20e <_svfiprintf_r+0x1d2>
 800b06a:	2340      	movs	r3, #64	; 0x40
 800b06c:	616b      	str	r3, [r5, #20]
 800b06e:	2300      	movs	r3, #0
 800b070:	9309      	str	r3, [sp, #36]	; 0x24
 800b072:	2320      	movs	r3, #32
 800b074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b078:	2330      	movs	r3, #48	; 0x30
 800b07a:	f04f 0901 	mov.w	r9, #1
 800b07e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b082:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b228 <_svfiprintf_r+0x1ec>
 800b086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b08a:	4623      	mov	r3, r4
 800b08c:	469a      	mov	sl, r3
 800b08e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b092:	b10a      	cbz	r2, 800b098 <_svfiprintf_r+0x5c>
 800b094:	2a25      	cmp	r2, #37	; 0x25
 800b096:	d1f9      	bne.n	800b08c <_svfiprintf_r+0x50>
 800b098:	ebba 0b04 	subs.w	fp, sl, r4
 800b09c:	d00b      	beq.n	800b0b6 <_svfiprintf_r+0x7a>
 800b09e:	465b      	mov	r3, fp
 800b0a0:	4622      	mov	r2, r4
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	4638      	mov	r0, r7
 800b0a6:	f7ff ff6d 	bl	800af84 <__ssputs_r>
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f000 80aa 	beq.w	800b204 <_svfiprintf_r+0x1c8>
 800b0b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b2:	445a      	add	r2, fp
 800b0b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b0b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 80a2 	beq.w	800b204 <_svfiprintf_r+0x1c8>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0ca:	f10a 0a01 	add.w	sl, sl, #1
 800b0ce:	9304      	str	r3, [sp, #16]
 800b0d0:	9307      	str	r3, [sp, #28]
 800b0d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0d6:	931a      	str	r3, [sp, #104]	; 0x68
 800b0d8:	4654      	mov	r4, sl
 800b0da:	2205      	movs	r2, #5
 800b0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e0:	4851      	ldr	r0, [pc, #324]	; (800b228 <_svfiprintf_r+0x1ec>)
 800b0e2:	f000 fe3b 	bl	800bd5c <memchr>
 800b0e6:	9a04      	ldr	r2, [sp, #16]
 800b0e8:	b9d8      	cbnz	r0, 800b122 <_svfiprintf_r+0xe6>
 800b0ea:	06d0      	lsls	r0, r2, #27
 800b0ec:	bf44      	itt	mi
 800b0ee:	2320      	movmi	r3, #32
 800b0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0f4:	0711      	lsls	r1, r2, #28
 800b0f6:	bf44      	itt	mi
 800b0f8:	232b      	movmi	r3, #43	; 0x2b
 800b0fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b102:	2b2a      	cmp	r3, #42	; 0x2a
 800b104:	d015      	beq.n	800b132 <_svfiprintf_r+0xf6>
 800b106:	4654      	mov	r4, sl
 800b108:	2000      	movs	r0, #0
 800b10a:	f04f 0c0a 	mov.w	ip, #10
 800b10e:	9a07      	ldr	r2, [sp, #28]
 800b110:	4621      	mov	r1, r4
 800b112:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b116:	3b30      	subs	r3, #48	; 0x30
 800b118:	2b09      	cmp	r3, #9
 800b11a:	d94e      	bls.n	800b1ba <_svfiprintf_r+0x17e>
 800b11c:	b1b0      	cbz	r0, 800b14c <_svfiprintf_r+0x110>
 800b11e:	9207      	str	r2, [sp, #28]
 800b120:	e014      	b.n	800b14c <_svfiprintf_r+0x110>
 800b122:	eba0 0308 	sub.w	r3, r0, r8
 800b126:	fa09 f303 	lsl.w	r3, r9, r3
 800b12a:	4313      	orrs	r3, r2
 800b12c:	46a2      	mov	sl, r4
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	e7d2      	b.n	800b0d8 <_svfiprintf_r+0x9c>
 800b132:	9b03      	ldr	r3, [sp, #12]
 800b134:	1d19      	adds	r1, r3, #4
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	9103      	str	r1, [sp, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bfbb      	ittet	lt
 800b13e:	425b      	neglt	r3, r3
 800b140:	f042 0202 	orrlt.w	r2, r2, #2
 800b144:	9307      	strge	r3, [sp, #28]
 800b146:	9307      	strlt	r3, [sp, #28]
 800b148:	bfb8      	it	lt
 800b14a:	9204      	strlt	r2, [sp, #16]
 800b14c:	7823      	ldrb	r3, [r4, #0]
 800b14e:	2b2e      	cmp	r3, #46	; 0x2e
 800b150:	d10c      	bne.n	800b16c <_svfiprintf_r+0x130>
 800b152:	7863      	ldrb	r3, [r4, #1]
 800b154:	2b2a      	cmp	r3, #42	; 0x2a
 800b156:	d135      	bne.n	800b1c4 <_svfiprintf_r+0x188>
 800b158:	9b03      	ldr	r3, [sp, #12]
 800b15a:	3402      	adds	r4, #2
 800b15c:	1d1a      	adds	r2, r3, #4
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	9203      	str	r2, [sp, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	bfb8      	it	lt
 800b166:	f04f 33ff 	movlt.w	r3, #4294967295
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b238 <_svfiprintf_r+0x1fc>
 800b170:	2203      	movs	r2, #3
 800b172:	4650      	mov	r0, sl
 800b174:	7821      	ldrb	r1, [r4, #0]
 800b176:	f000 fdf1 	bl	800bd5c <memchr>
 800b17a:	b140      	cbz	r0, 800b18e <_svfiprintf_r+0x152>
 800b17c:	2340      	movs	r3, #64	; 0x40
 800b17e:	eba0 000a 	sub.w	r0, r0, sl
 800b182:	fa03 f000 	lsl.w	r0, r3, r0
 800b186:	9b04      	ldr	r3, [sp, #16]
 800b188:	3401      	adds	r4, #1
 800b18a:	4303      	orrs	r3, r0
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b192:	2206      	movs	r2, #6
 800b194:	4825      	ldr	r0, [pc, #148]	; (800b22c <_svfiprintf_r+0x1f0>)
 800b196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b19a:	f000 fddf 	bl	800bd5c <memchr>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d038      	beq.n	800b214 <_svfiprintf_r+0x1d8>
 800b1a2:	4b23      	ldr	r3, [pc, #140]	; (800b230 <_svfiprintf_r+0x1f4>)
 800b1a4:	bb1b      	cbnz	r3, 800b1ee <_svfiprintf_r+0x1b2>
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	3307      	adds	r3, #7
 800b1aa:	f023 0307 	bic.w	r3, r3, #7
 800b1ae:	3308      	adds	r3, #8
 800b1b0:	9303      	str	r3, [sp, #12]
 800b1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b4:	4433      	add	r3, r6
 800b1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b8:	e767      	b.n	800b08a <_svfiprintf_r+0x4e>
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	2001      	movs	r0, #1
 800b1be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1c2:	e7a5      	b.n	800b110 <_svfiprintf_r+0xd4>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f04f 0c0a 	mov.w	ip, #10
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	3401      	adds	r4, #1
 800b1ce:	9305      	str	r3, [sp, #20]
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1d6:	3a30      	subs	r2, #48	; 0x30
 800b1d8:	2a09      	cmp	r2, #9
 800b1da:	d903      	bls.n	800b1e4 <_svfiprintf_r+0x1a8>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0c5      	beq.n	800b16c <_svfiprintf_r+0x130>
 800b1e0:	9105      	str	r1, [sp, #20]
 800b1e2:	e7c3      	b.n	800b16c <_svfiprintf_r+0x130>
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ec:	e7f0      	b.n	800b1d0 <_svfiprintf_r+0x194>
 800b1ee:	ab03      	add	r3, sp, #12
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	462a      	mov	r2, r5
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	4b0f      	ldr	r3, [pc, #60]	; (800b234 <_svfiprintf_r+0x1f8>)
 800b1f8:	a904      	add	r1, sp, #16
 800b1fa:	f3af 8000 	nop.w
 800b1fe:	1c42      	adds	r2, r0, #1
 800b200:	4606      	mov	r6, r0
 800b202:	d1d6      	bne.n	800b1b2 <_svfiprintf_r+0x176>
 800b204:	89ab      	ldrh	r3, [r5, #12]
 800b206:	065b      	lsls	r3, r3, #25
 800b208:	f53f af2c 	bmi.w	800b064 <_svfiprintf_r+0x28>
 800b20c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b20e:	b01d      	add	sp, #116	; 0x74
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	ab03      	add	r3, sp, #12
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	462a      	mov	r2, r5
 800b21a:	4638      	mov	r0, r7
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <_svfiprintf_r+0x1f8>)
 800b21e:	a904      	add	r1, sp, #16
 800b220:	f000 f9d4 	bl	800b5cc <_printf_i>
 800b224:	e7eb      	b.n	800b1fe <_svfiprintf_r+0x1c2>
 800b226:	bf00      	nop
 800b228:	0800c28c 	.word	0x0800c28c
 800b22c:	0800c296 	.word	0x0800c296
 800b230:	00000000 	.word	0x00000000
 800b234:	0800af85 	.word	0x0800af85
 800b238:	0800c292 	.word	0x0800c292

0800b23c <__sfputc_r>:
 800b23c:	6893      	ldr	r3, [r2, #8]
 800b23e:	b410      	push	{r4}
 800b240:	3b01      	subs	r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	6093      	str	r3, [r2, #8]
 800b246:	da07      	bge.n	800b258 <__sfputc_r+0x1c>
 800b248:	6994      	ldr	r4, [r2, #24]
 800b24a:	42a3      	cmp	r3, r4
 800b24c:	db01      	blt.n	800b252 <__sfputc_r+0x16>
 800b24e:	290a      	cmp	r1, #10
 800b250:	d102      	bne.n	800b258 <__sfputc_r+0x1c>
 800b252:	bc10      	pop	{r4}
 800b254:	f000 bb2a 	b.w	800b8ac <__swbuf_r>
 800b258:	6813      	ldr	r3, [r2, #0]
 800b25a:	1c58      	adds	r0, r3, #1
 800b25c:	6010      	str	r0, [r2, #0]
 800b25e:	7019      	strb	r1, [r3, #0]
 800b260:	4608      	mov	r0, r1
 800b262:	bc10      	pop	{r4}
 800b264:	4770      	bx	lr

0800b266 <__sfputs_r>:
 800b266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b268:	4606      	mov	r6, r0
 800b26a:	460f      	mov	r7, r1
 800b26c:	4614      	mov	r4, r2
 800b26e:	18d5      	adds	r5, r2, r3
 800b270:	42ac      	cmp	r4, r5
 800b272:	d101      	bne.n	800b278 <__sfputs_r+0x12>
 800b274:	2000      	movs	r0, #0
 800b276:	e007      	b.n	800b288 <__sfputs_r+0x22>
 800b278:	463a      	mov	r2, r7
 800b27a:	4630      	mov	r0, r6
 800b27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b280:	f7ff ffdc 	bl	800b23c <__sfputc_r>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d1f3      	bne.n	800b270 <__sfputs_r+0xa>
 800b288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b28c <_vfiprintf_r>:
 800b28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b290:	460d      	mov	r5, r1
 800b292:	4614      	mov	r4, r2
 800b294:	4698      	mov	r8, r3
 800b296:	4606      	mov	r6, r0
 800b298:	b09d      	sub	sp, #116	; 0x74
 800b29a:	b118      	cbz	r0, 800b2a4 <_vfiprintf_r+0x18>
 800b29c:	6983      	ldr	r3, [r0, #24]
 800b29e:	b90b      	cbnz	r3, 800b2a4 <_vfiprintf_r+0x18>
 800b2a0:	f7fe fd76 	bl	8009d90 <__sinit>
 800b2a4:	4b89      	ldr	r3, [pc, #548]	; (800b4cc <_vfiprintf_r+0x240>)
 800b2a6:	429d      	cmp	r5, r3
 800b2a8:	d11b      	bne.n	800b2e2 <_vfiprintf_r+0x56>
 800b2aa:	6875      	ldr	r5, [r6, #4]
 800b2ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2ae:	07d9      	lsls	r1, r3, #31
 800b2b0:	d405      	bmi.n	800b2be <_vfiprintf_r+0x32>
 800b2b2:	89ab      	ldrh	r3, [r5, #12]
 800b2b4:	059a      	lsls	r2, r3, #22
 800b2b6:	d402      	bmi.n	800b2be <_vfiprintf_r+0x32>
 800b2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ba:	f7ff f96e 	bl	800a59a <__retarget_lock_acquire_recursive>
 800b2be:	89ab      	ldrh	r3, [r5, #12]
 800b2c0:	071b      	lsls	r3, r3, #28
 800b2c2:	d501      	bpl.n	800b2c8 <_vfiprintf_r+0x3c>
 800b2c4:	692b      	ldr	r3, [r5, #16]
 800b2c6:	b9eb      	cbnz	r3, 800b304 <_vfiprintf_r+0x78>
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f000 fb60 	bl	800b990 <__swsetup_r>
 800b2d0:	b1c0      	cbz	r0, 800b304 <_vfiprintf_r+0x78>
 800b2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2d4:	07dc      	lsls	r4, r3, #31
 800b2d6:	d50e      	bpl.n	800b2f6 <_vfiprintf_r+0x6a>
 800b2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2dc:	b01d      	add	sp, #116	; 0x74
 800b2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e2:	4b7b      	ldr	r3, [pc, #492]	; (800b4d0 <_vfiprintf_r+0x244>)
 800b2e4:	429d      	cmp	r5, r3
 800b2e6:	d101      	bne.n	800b2ec <_vfiprintf_r+0x60>
 800b2e8:	68b5      	ldr	r5, [r6, #8]
 800b2ea:	e7df      	b.n	800b2ac <_vfiprintf_r+0x20>
 800b2ec:	4b79      	ldr	r3, [pc, #484]	; (800b4d4 <_vfiprintf_r+0x248>)
 800b2ee:	429d      	cmp	r5, r3
 800b2f0:	bf08      	it	eq
 800b2f2:	68f5      	ldreq	r5, [r6, #12]
 800b2f4:	e7da      	b.n	800b2ac <_vfiprintf_r+0x20>
 800b2f6:	89ab      	ldrh	r3, [r5, #12]
 800b2f8:	0598      	lsls	r0, r3, #22
 800b2fa:	d4ed      	bmi.n	800b2d8 <_vfiprintf_r+0x4c>
 800b2fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2fe:	f7ff f94d 	bl	800a59c <__retarget_lock_release_recursive>
 800b302:	e7e9      	b.n	800b2d8 <_vfiprintf_r+0x4c>
 800b304:	2300      	movs	r3, #0
 800b306:	9309      	str	r3, [sp, #36]	; 0x24
 800b308:	2320      	movs	r3, #32
 800b30a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b30e:	2330      	movs	r3, #48	; 0x30
 800b310:	f04f 0901 	mov.w	r9, #1
 800b314:	f8cd 800c 	str.w	r8, [sp, #12]
 800b318:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b4d8 <_vfiprintf_r+0x24c>
 800b31c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b320:	4623      	mov	r3, r4
 800b322:	469a      	mov	sl, r3
 800b324:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b328:	b10a      	cbz	r2, 800b32e <_vfiprintf_r+0xa2>
 800b32a:	2a25      	cmp	r2, #37	; 0x25
 800b32c:	d1f9      	bne.n	800b322 <_vfiprintf_r+0x96>
 800b32e:	ebba 0b04 	subs.w	fp, sl, r4
 800b332:	d00b      	beq.n	800b34c <_vfiprintf_r+0xc0>
 800b334:	465b      	mov	r3, fp
 800b336:	4622      	mov	r2, r4
 800b338:	4629      	mov	r1, r5
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7ff ff93 	bl	800b266 <__sfputs_r>
 800b340:	3001      	adds	r0, #1
 800b342:	f000 80aa 	beq.w	800b49a <_vfiprintf_r+0x20e>
 800b346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b348:	445a      	add	r2, fp
 800b34a:	9209      	str	r2, [sp, #36]	; 0x24
 800b34c:	f89a 3000 	ldrb.w	r3, [sl]
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 80a2 	beq.w	800b49a <_vfiprintf_r+0x20e>
 800b356:	2300      	movs	r3, #0
 800b358:	f04f 32ff 	mov.w	r2, #4294967295
 800b35c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b360:	f10a 0a01 	add.w	sl, sl, #1
 800b364:	9304      	str	r3, [sp, #16]
 800b366:	9307      	str	r3, [sp, #28]
 800b368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b36c:	931a      	str	r3, [sp, #104]	; 0x68
 800b36e:	4654      	mov	r4, sl
 800b370:	2205      	movs	r2, #5
 800b372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b376:	4858      	ldr	r0, [pc, #352]	; (800b4d8 <_vfiprintf_r+0x24c>)
 800b378:	f000 fcf0 	bl	800bd5c <memchr>
 800b37c:	9a04      	ldr	r2, [sp, #16]
 800b37e:	b9d8      	cbnz	r0, 800b3b8 <_vfiprintf_r+0x12c>
 800b380:	06d1      	lsls	r1, r2, #27
 800b382:	bf44      	itt	mi
 800b384:	2320      	movmi	r3, #32
 800b386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b38a:	0713      	lsls	r3, r2, #28
 800b38c:	bf44      	itt	mi
 800b38e:	232b      	movmi	r3, #43	; 0x2b
 800b390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b394:	f89a 3000 	ldrb.w	r3, [sl]
 800b398:	2b2a      	cmp	r3, #42	; 0x2a
 800b39a:	d015      	beq.n	800b3c8 <_vfiprintf_r+0x13c>
 800b39c:	4654      	mov	r4, sl
 800b39e:	2000      	movs	r0, #0
 800b3a0:	f04f 0c0a 	mov.w	ip, #10
 800b3a4:	9a07      	ldr	r2, [sp, #28]
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3ac:	3b30      	subs	r3, #48	; 0x30
 800b3ae:	2b09      	cmp	r3, #9
 800b3b0:	d94e      	bls.n	800b450 <_vfiprintf_r+0x1c4>
 800b3b2:	b1b0      	cbz	r0, 800b3e2 <_vfiprintf_r+0x156>
 800b3b4:	9207      	str	r2, [sp, #28]
 800b3b6:	e014      	b.n	800b3e2 <_vfiprintf_r+0x156>
 800b3b8:	eba0 0308 	sub.w	r3, r0, r8
 800b3bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	46a2      	mov	sl, r4
 800b3c4:	9304      	str	r3, [sp, #16]
 800b3c6:	e7d2      	b.n	800b36e <_vfiprintf_r+0xe2>
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	1d19      	adds	r1, r3, #4
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	9103      	str	r1, [sp, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	bfbb      	ittet	lt
 800b3d4:	425b      	neglt	r3, r3
 800b3d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b3da:	9307      	strge	r3, [sp, #28]
 800b3dc:	9307      	strlt	r3, [sp, #28]
 800b3de:	bfb8      	it	lt
 800b3e0:	9204      	strlt	r2, [sp, #16]
 800b3e2:	7823      	ldrb	r3, [r4, #0]
 800b3e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b3e6:	d10c      	bne.n	800b402 <_vfiprintf_r+0x176>
 800b3e8:	7863      	ldrb	r3, [r4, #1]
 800b3ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ec:	d135      	bne.n	800b45a <_vfiprintf_r+0x1ce>
 800b3ee:	9b03      	ldr	r3, [sp, #12]
 800b3f0:	3402      	adds	r4, #2
 800b3f2:	1d1a      	adds	r2, r3, #4
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	9203      	str	r2, [sp, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bfb8      	it	lt
 800b3fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b400:	9305      	str	r3, [sp, #20]
 800b402:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4e8 <_vfiprintf_r+0x25c>
 800b406:	2203      	movs	r2, #3
 800b408:	4650      	mov	r0, sl
 800b40a:	7821      	ldrb	r1, [r4, #0]
 800b40c:	f000 fca6 	bl	800bd5c <memchr>
 800b410:	b140      	cbz	r0, 800b424 <_vfiprintf_r+0x198>
 800b412:	2340      	movs	r3, #64	; 0x40
 800b414:	eba0 000a 	sub.w	r0, r0, sl
 800b418:	fa03 f000 	lsl.w	r0, r3, r0
 800b41c:	9b04      	ldr	r3, [sp, #16]
 800b41e:	3401      	adds	r4, #1
 800b420:	4303      	orrs	r3, r0
 800b422:	9304      	str	r3, [sp, #16]
 800b424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b428:	2206      	movs	r2, #6
 800b42a:	482c      	ldr	r0, [pc, #176]	; (800b4dc <_vfiprintf_r+0x250>)
 800b42c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b430:	f000 fc94 	bl	800bd5c <memchr>
 800b434:	2800      	cmp	r0, #0
 800b436:	d03f      	beq.n	800b4b8 <_vfiprintf_r+0x22c>
 800b438:	4b29      	ldr	r3, [pc, #164]	; (800b4e0 <_vfiprintf_r+0x254>)
 800b43a:	bb1b      	cbnz	r3, 800b484 <_vfiprintf_r+0x1f8>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	3307      	adds	r3, #7
 800b440:	f023 0307 	bic.w	r3, r3, #7
 800b444:	3308      	adds	r3, #8
 800b446:	9303      	str	r3, [sp, #12]
 800b448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44a:	443b      	add	r3, r7
 800b44c:	9309      	str	r3, [sp, #36]	; 0x24
 800b44e:	e767      	b.n	800b320 <_vfiprintf_r+0x94>
 800b450:	460c      	mov	r4, r1
 800b452:	2001      	movs	r0, #1
 800b454:	fb0c 3202 	mla	r2, ip, r2, r3
 800b458:	e7a5      	b.n	800b3a6 <_vfiprintf_r+0x11a>
 800b45a:	2300      	movs	r3, #0
 800b45c:	f04f 0c0a 	mov.w	ip, #10
 800b460:	4619      	mov	r1, r3
 800b462:	3401      	adds	r4, #1
 800b464:	9305      	str	r3, [sp, #20]
 800b466:	4620      	mov	r0, r4
 800b468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b46c:	3a30      	subs	r2, #48	; 0x30
 800b46e:	2a09      	cmp	r2, #9
 800b470:	d903      	bls.n	800b47a <_vfiprintf_r+0x1ee>
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0c5      	beq.n	800b402 <_vfiprintf_r+0x176>
 800b476:	9105      	str	r1, [sp, #20]
 800b478:	e7c3      	b.n	800b402 <_vfiprintf_r+0x176>
 800b47a:	4604      	mov	r4, r0
 800b47c:	2301      	movs	r3, #1
 800b47e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b482:	e7f0      	b.n	800b466 <_vfiprintf_r+0x1da>
 800b484:	ab03      	add	r3, sp, #12
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	462a      	mov	r2, r5
 800b48a:	4630      	mov	r0, r6
 800b48c:	4b15      	ldr	r3, [pc, #84]	; (800b4e4 <_vfiprintf_r+0x258>)
 800b48e:	a904      	add	r1, sp, #16
 800b490:	f3af 8000 	nop.w
 800b494:	4607      	mov	r7, r0
 800b496:	1c78      	adds	r0, r7, #1
 800b498:	d1d6      	bne.n	800b448 <_vfiprintf_r+0x1bc>
 800b49a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b49c:	07d9      	lsls	r1, r3, #31
 800b49e:	d405      	bmi.n	800b4ac <_vfiprintf_r+0x220>
 800b4a0:	89ab      	ldrh	r3, [r5, #12]
 800b4a2:	059a      	lsls	r2, r3, #22
 800b4a4:	d402      	bmi.n	800b4ac <_vfiprintf_r+0x220>
 800b4a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4a8:	f7ff f878 	bl	800a59c <__retarget_lock_release_recursive>
 800b4ac:	89ab      	ldrh	r3, [r5, #12]
 800b4ae:	065b      	lsls	r3, r3, #25
 800b4b0:	f53f af12 	bmi.w	800b2d8 <_vfiprintf_r+0x4c>
 800b4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4b6:	e711      	b.n	800b2dc <_vfiprintf_r+0x50>
 800b4b8:	ab03      	add	r3, sp, #12
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	462a      	mov	r2, r5
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4b08      	ldr	r3, [pc, #32]	; (800b4e4 <_vfiprintf_r+0x258>)
 800b4c2:	a904      	add	r1, sp, #16
 800b4c4:	f000 f882 	bl	800b5cc <_printf_i>
 800b4c8:	e7e4      	b.n	800b494 <_vfiprintf_r+0x208>
 800b4ca:	bf00      	nop
 800b4cc:	0800c048 	.word	0x0800c048
 800b4d0:	0800c068 	.word	0x0800c068
 800b4d4:	0800c028 	.word	0x0800c028
 800b4d8:	0800c28c 	.word	0x0800c28c
 800b4dc:	0800c296 	.word	0x0800c296
 800b4e0:	00000000 	.word	0x00000000
 800b4e4:	0800b267 	.word	0x0800b267
 800b4e8:	0800c292 	.word	0x0800c292

0800b4ec <_printf_common>:
 800b4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f0:	4616      	mov	r6, r2
 800b4f2:	4699      	mov	r9, r3
 800b4f4:	688a      	ldr	r2, [r1, #8]
 800b4f6:	690b      	ldr	r3, [r1, #16]
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	bfb8      	it	lt
 800b4fe:	4613      	movlt	r3, r2
 800b500:	6033      	str	r3, [r6, #0]
 800b502:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b506:	460c      	mov	r4, r1
 800b508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b50c:	b10a      	cbz	r2, 800b512 <_printf_common+0x26>
 800b50e:	3301      	adds	r3, #1
 800b510:	6033      	str	r3, [r6, #0]
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	0699      	lsls	r1, r3, #26
 800b516:	bf42      	ittt	mi
 800b518:	6833      	ldrmi	r3, [r6, #0]
 800b51a:	3302      	addmi	r3, #2
 800b51c:	6033      	strmi	r3, [r6, #0]
 800b51e:	6825      	ldr	r5, [r4, #0]
 800b520:	f015 0506 	ands.w	r5, r5, #6
 800b524:	d106      	bne.n	800b534 <_printf_common+0x48>
 800b526:	f104 0a19 	add.w	sl, r4, #25
 800b52a:	68e3      	ldr	r3, [r4, #12]
 800b52c:	6832      	ldr	r2, [r6, #0]
 800b52e:	1a9b      	subs	r3, r3, r2
 800b530:	42ab      	cmp	r3, r5
 800b532:	dc28      	bgt.n	800b586 <_printf_common+0x9a>
 800b534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b538:	1e13      	subs	r3, r2, #0
 800b53a:	6822      	ldr	r2, [r4, #0]
 800b53c:	bf18      	it	ne
 800b53e:	2301      	movne	r3, #1
 800b540:	0692      	lsls	r2, r2, #26
 800b542:	d42d      	bmi.n	800b5a0 <_printf_common+0xb4>
 800b544:	4649      	mov	r1, r9
 800b546:	4638      	mov	r0, r7
 800b548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b54c:	47c0      	blx	r8
 800b54e:	3001      	adds	r0, #1
 800b550:	d020      	beq.n	800b594 <_printf_common+0xa8>
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	68e5      	ldr	r5, [r4, #12]
 800b556:	f003 0306 	and.w	r3, r3, #6
 800b55a:	2b04      	cmp	r3, #4
 800b55c:	bf18      	it	ne
 800b55e:	2500      	movne	r5, #0
 800b560:	6832      	ldr	r2, [r6, #0]
 800b562:	f04f 0600 	mov.w	r6, #0
 800b566:	68a3      	ldr	r3, [r4, #8]
 800b568:	bf08      	it	eq
 800b56a:	1aad      	subeq	r5, r5, r2
 800b56c:	6922      	ldr	r2, [r4, #16]
 800b56e:	bf08      	it	eq
 800b570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b574:	4293      	cmp	r3, r2
 800b576:	bfc4      	itt	gt
 800b578:	1a9b      	subgt	r3, r3, r2
 800b57a:	18ed      	addgt	r5, r5, r3
 800b57c:	341a      	adds	r4, #26
 800b57e:	42b5      	cmp	r5, r6
 800b580:	d11a      	bne.n	800b5b8 <_printf_common+0xcc>
 800b582:	2000      	movs	r0, #0
 800b584:	e008      	b.n	800b598 <_printf_common+0xac>
 800b586:	2301      	movs	r3, #1
 800b588:	4652      	mov	r2, sl
 800b58a:	4649      	mov	r1, r9
 800b58c:	4638      	mov	r0, r7
 800b58e:	47c0      	blx	r8
 800b590:	3001      	adds	r0, #1
 800b592:	d103      	bne.n	800b59c <_printf_common+0xb0>
 800b594:	f04f 30ff 	mov.w	r0, #4294967295
 800b598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59c:	3501      	adds	r5, #1
 800b59e:	e7c4      	b.n	800b52a <_printf_common+0x3e>
 800b5a0:	2030      	movs	r0, #48	; 0x30
 800b5a2:	18e1      	adds	r1, r4, r3
 800b5a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5ae:	4422      	add	r2, r4
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5b6:	e7c5      	b.n	800b544 <_printf_common+0x58>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	4622      	mov	r2, r4
 800b5bc:	4649      	mov	r1, r9
 800b5be:	4638      	mov	r0, r7
 800b5c0:	47c0      	blx	r8
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	d0e6      	beq.n	800b594 <_printf_common+0xa8>
 800b5c6:	3601      	adds	r6, #1
 800b5c8:	e7d9      	b.n	800b57e <_printf_common+0x92>
	...

0800b5cc <_printf_i>:
 800b5cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	7e27      	ldrb	r7, [r4, #24]
 800b5d4:	4691      	mov	r9, r2
 800b5d6:	2f78      	cmp	r7, #120	; 0x78
 800b5d8:	4680      	mov	r8, r0
 800b5da:	469a      	mov	sl, r3
 800b5dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b5de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5e2:	d807      	bhi.n	800b5f4 <_printf_i+0x28>
 800b5e4:	2f62      	cmp	r7, #98	; 0x62
 800b5e6:	d80a      	bhi.n	800b5fe <_printf_i+0x32>
 800b5e8:	2f00      	cmp	r7, #0
 800b5ea:	f000 80d9 	beq.w	800b7a0 <_printf_i+0x1d4>
 800b5ee:	2f58      	cmp	r7, #88	; 0x58
 800b5f0:	f000 80a4 	beq.w	800b73c <_printf_i+0x170>
 800b5f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5fc:	e03a      	b.n	800b674 <_printf_i+0xa8>
 800b5fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b602:	2b15      	cmp	r3, #21
 800b604:	d8f6      	bhi.n	800b5f4 <_printf_i+0x28>
 800b606:	a001      	add	r0, pc, #4	; (adr r0, 800b60c <_printf_i+0x40>)
 800b608:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b60c:	0800b665 	.word	0x0800b665
 800b610:	0800b679 	.word	0x0800b679
 800b614:	0800b5f5 	.word	0x0800b5f5
 800b618:	0800b5f5 	.word	0x0800b5f5
 800b61c:	0800b5f5 	.word	0x0800b5f5
 800b620:	0800b5f5 	.word	0x0800b5f5
 800b624:	0800b679 	.word	0x0800b679
 800b628:	0800b5f5 	.word	0x0800b5f5
 800b62c:	0800b5f5 	.word	0x0800b5f5
 800b630:	0800b5f5 	.word	0x0800b5f5
 800b634:	0800b5f5 	.word	0x0800b5f5
 800b638:	0800b787 	.word	0x0800b787
 800b63c:	0800b6a9 	.word	0x0800b6a9
 800b640:	0800b769 	.word	0x0800b769
 800b644:	0800b5f5 	.word	0x0800b5f5
 800b648:	0800b5f5 	.word	0x0800b5f5
 800b64c:	0800b7a9 	.word	0x0800b7a9
 800b650:	0800b5f5 	.word	0x0800b5f5
 800b654:	0800b6a9 	.word	0x0800b6a9
 800b658:	0800b5f5 	.word	0x0800b5f5
 800b65c:	0800b5f5 	.word	0x0800b5f5
 800b660:	0800b771 	.word	0x0800b771
 800b664:	680b      	ldr	r3, [r1, #0]
 800b666:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b66a:	1d1a      	adds	r2, r3, #4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	600a      	str	r2, [r1, #0]
 800b670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b674:	2301      	movs	r3, #1
 800b676:	e0a4      	b.n	800b7c2 <_printf_i+0x1f6>
 800b678:	6825      	ldr	r5, [r4, #0]
 800b67a:	6808      	ldr	r0, [r1, #0]
 800b67c:	062e      	lsls	r6, r5, #24
 800b67e:	f100 0304 	add.w	r3, r0, #4
 800b682:	d50a      	bpl.n	800b69a <_printf_i+0xce>
 800b684:	6805      	ldr	r5, [r0, #0]
 800b686:	600b      	str	r3, [r1, #0]
 800b688:	2d00      	cmp	r5, #0
 800b68a:	da03      	bge.n	800b694 <_printf_i+0xc8>
 800b68c:	232d      	movs	r3, #45	; 0x2d
 800b68e:	426d      	negs	r5, r5
 800b690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b694:	230a      	movs	r3, #10
 800b696:	485e      	ldr	r0, [pc, #376]	; (800b810 <_printf_i+0x244>)
 800b698:	e019      	b.n	800b6ce <_printf_i+0x102>
 800b69a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b69e:	6805      	ldr	r5, [r0, #0]
 800b6a0:	600b      	str	r3, [r1, #0]
 800b6a2:	bf18      	it	ne
 800b6a4:	b22d      	sxthne	r5, r5
 800b6a6:	e7ef      	b.n	800b688 <_printf_i+0xbc>
 800b6a8:	680b      	ldr	r3, [r1, #0]
 800b6aa:	6825      	ldr	r5, [r4, #0]
 800b6ac:	1d18      	adds	r0, r3, #4
 800b6ae:	6008      	str	r0, [r1, #0]
 800b6b0:	0628      	lsls	r0, r5, #24
 800b6b2:	d501      	bpl.n	800b6b8 <_printf_i+0xec>
 800b6b4:	681d      	ldr	r5, [r3, #0]
 800b6b6:	e002      	b.n	800b6be <_printf_i+0xf2>
 800b6b8:	0669      	lsls	r1, r5, #25
 800b6ba:	d5fb      	bpl.n	800b6b4 <_printf_i+0xe8>
 800b6bc:	881d      	ldrh	r5, [r3, #0]
 800b6be:	2f6f      	cmp	r7, #111	; 0x6f
 800b6c0:	bf0c      	ite	eq
 800b6c2:	2308      	moveq	r3, #8
 800b6c4:	230a      	movne	r3, #10
 800b6c6:	4852      	ldr	r0, [pc, #328]	; (800b810 <_printf_i+0x244>)
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6ce:	6866      	ldr	r6, [r4, #4]
 800b6d0:	2e00      	cmp	r6, #0
 800b6d2:	bfa8      	it	ge
 800b6d4:	6821      	ldrge	r1, [r4, #0]
 800b6d6:	60a6      	str	r6, [r4, #8]
 800b6d8:	bfa4      	itt	ge
 800b6da:	f021 0104 	bicge.w	r1, r1, #4
 800b6de:	6021      	strge	r1, [r4, #0]
 800b6e0:	b90d      	cbnz	r5, 800b6e6 <_printf_i+0x11a>
 800b6e2:	2e00      	cmp	r6, #0
 800b6e4:	d04d      	beq.n	800b782 <_printf_i+0x1b6>
 800b6e6:	4616      	mov	r6, r2
 800b6e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6ec:	fb03 5711 	mls	r7, r3, r1, r5
 800b6f0:	5dc7      	ldrb	r7, [r0, r7]
 800b6f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6f6:	462f      	mov	r7, r5
 800b6f8:	42bb      	cmp	r3, r7
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	d9f4      	bls.n	800b6e8 <_printf_i+0x11c>
 800b6fe:	2b08      	cmp	r3, #8
 800b700:	d10b      	bne.n	800b71a <_printf_i+0x14e>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	07df      	lsls	r7, r3, #31
 800b706:	d508      	bpl.n	800b71a <_printf_i+0x14e>
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	6861      	ldr	r1, [r4, #4]
 800b70c:	4299      	cmp	r1, r3
 800b70e:	bfde      	ittt	le
 800b710:	2330      	movle	r3, #48	; 0x30
 800b712:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b716:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b71a:	1b92      	subs	r2, r2, r6
 800b71c:	6122      	str	r2, [r4, #16]
 800b71e:	464b      	mov	r3, r9
 800b720:	4621      	mov	r1, r4
 800b722:	4640      	mov	r0, r8
 800b724:	f8cd a000 	str.w	sl, [sp]
 800b728:	aa03      	add	r2, sp, #12
 800b72a:	f7ff fedf 	bl	800b4ec <_printf_common>
 800b72e:	3001      	adds	r0, #1
 800b730:	d14c      	bne.n	800b7cc <_printf_i+0x200>
 800b732:	f04f 30ff 	mov.w	r0, #4294967295
 800b736:	b004      	add	sp, #16
 800b738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73c:	4834      	ldr	r0, [pc, #208]	; (800b810 <_printf_i+0x244>)
 800b73e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b742:	680e      	ldr	r6, [r1, #0]
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	f856 5b04 	ldr.w	r5, [r6], #4
 800b74a:	061f      	lsls	r7, r3, #24
 800b74c:	600e      	str	r6, [r1, #0]
 800b74e:	d514      	bpl.n	800b77a <_printf_i+0x1ae>
 800b750:	07d9      	lsls	r1, r3, #31
 800b752:	bf44      	itt	mi
 800b754:	f043 0320 	orrmi.w	r3, r3, #32
 800b758:	6023      	strmi	r3, [r4, #0]
 800b75a:	b91d      	cbnz	r5, 800b764 <_printf_i+0x198>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	f023 0320 	bic.w	r3, r3, #32
 800b762:	6023      	str	r3, [r4, #0]
 800b764:	2310      	movs	r3, #16
 800b766:	e7af      	b.n	800b6c8 <_printf_i+0xfc>
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	f043 0320 	orr.w	r3, r3, #32
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	2378      	movs	r3, #120	; 0x78
 800b772:	4828      	ldr	r0, [pc, #160]	; (800b814 <_printf_i+0x248>)
 800b774:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b778:	e7e3      	b.n	800b742 <_printf_i+0x176>
 800b77a:	065e      	lsls	r6, r3, #25
 800b77c:	bf48      	it	mi
 800b77e:	b2ad      	uxthmi	r5, r5
 800b780:	e7e6      	b.n	800b750 <_printf_i+0x184>
 800b782:	4616      	mov	r6, r2
 800b784:	e7bb      	b.n	800b6fe <_printf_i+0x132>
 800b786:	680b      	ldr	r3, [r1, #0]
 800b788:	6826      	ldr	r6, [r4, #0]
 800b78a:	1d1d      	adds	r5, r3, #4
 800b78c:	6960      	ldr	r0, [r4, #20]
 800b78e:	600d      	str	r5, [r1, #0]
 800b790:	0635      	lsls	r5, r6, #24
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	d501      	bpl.n	800b79a <_printf_i+0x1ce>
 800b796:	6018      	str	r0, [r3, #0]
 800b798:	e002      	b.n	800b7a0 <_printf_i+0x1d4>
 800b79a:	0671      	lsls	r1, r6, #25
 800b79c:	d5fb      	bpl.n	800b796 <_printf_i+0x1ca>
 800b79e:	8018      	strh	r0, [r3, #0]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4616      	mov	r6, r2
 800b7a4:	6123      	str	r3, [r4, #16]
 800b7a6:	e7ba      	b.n	800b71e <_printf_i+0x152>
 800b7a8:	680b      	ldr	r3, [r1, #0]
 800b7aa:	1d1a      	adds	r2, r3, #4
 800b7ac:	600a      	str	r2, [r1, #0]
 800b7ae:	681e      	ldr	r6, [r3, #0]
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	6862      	ldr	r2, [r4, #4]
 800b7b6:	f000 fad1 	bl	800bd5c <memchr>
 800b7ba:	b108      	cbz	r0, 800b7c0 <_printf_i+0x1f4>
 800b7bc:	1b80      	subs	r0, r0, r6
 800b7be:	6060      	str	r0, [r4, #4]
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	6123      	str	r3, [r4, #16]
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7ca:	e7a8      	b.n	800b71e <_printf_i+0x152>
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	4649      	mov	r1, r9
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	47d0      	blx	sl
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	d0ab      	beq.n	800b732 <_printf_i+0x166>
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	079b      	lsls	r3, r3, #30
 800b7de:	d413      	bmi.n	800b808 <_printf_i+0x23c>
 800b7e0:	68e0      	ldr	r0, [r4, #12]
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	4298      	cmp	r0, r3
 800b7e6:	bfb8      	it	lt
 800b7e8:	4618      	movlt	r0, r3
 800b7ea:	e7a4      	b.n	800b736 <_printf_i+0x16a>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	47d0      	blx	sl
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d09b      	beq.n	800b732 <_printf_i+0x166>
 800b7fa:	3501      	adds	r5, #1
 800b7fc:	68e3      	ldr	r3, [r4, #12]
 800b7fe:	9903      	ldr	r1, [sp, #12]
 800b800:	1a5b      	subs	r3, r3, r1
 800b802:	42ab      	cmp	r3, r5
 800b804:	dcf2      	bgt.n	800b7ec <_printf_i+0x220>
 800b806:	e7eb      	b.n	800b7e0 <_printf_i+0x214>
 800b808:	2500      	movs	r5, #0
 800b80a:	f104 0619 	add.w	r6, r4, #25
 800b80e:	e7f5      	b.n	800b7fc <_printf_i+0x230>
 800b810:	0800c29d 	.word	0x0800c29d
 800b814:	0800c2ae 	.word	0x0800c2ae

0800b818 <nan>:
 800b818:	2000      	movs	r0, #0
 800b81a:	4901      	ldr	r1, [pc, #4]	; (800b820 <nan+0x8>)
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	7ff80000 	.word	0x7ff80000

0800b824 <__sread>:
 800b824:	b510      	push	{r4, lr}
 800b826:	460c      	mov	r4, r1
 800b828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b82c:	f000 fae4 	bl	800bdf8 <_read_r>
 800b830:	2800      	cmp	r0, #0
 800b832:	bfab      	itete	ge
 800b834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b836:	89a3      	ldrhlt	r3, [r4, #12]
 800b838:	181b      	addge	r3, r3, r0
 800b83a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b83e:	bfac      	ite	ge
 800b840:	6563      	strge	r3, [r4, #84]	; 0x54
 800b842:	81a3      	strhlt	r3, [r4, #12]
 800b844:	bd10      	pop	{r4, pc}

0800b846 <__swrite>:
 800b846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84a:	461f      	mov	r7, r3
 800b84c:	898b      	ldrh	r3, [r1, #12]
 800b84e:	4605      	mov	r5, r0
 800b850:	05db      	lsls	r3, r3, #23
 800b852:	460c      	mov	r4, r1
 800b854:	4616      	mov	r6, r2
 800b856:	d505      	bpl.n	800b864 <__swrite+0x1e>
 800b858:	2302      	movs	r3, #2
 800b85a:	2200      	movs	r2, #0
 800b85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b860:	f000 fa06 	bl	800bc70 <_lseek_r>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	4632      	mov	r2, r6
 800b868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b86c:	81a3      	strh	r3, [r4, #12]
 800b86e:	4628      	mov	r0, r5
 800b870:	463b      	mov	r3, r7
 800b872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b87a:	f000 b877 	b.w	800b96c <_write_r>

0800b87e <__sseek>:
 800b87e:	b510      	push	{r4, lr}
 800b880:	460c      	mov	r4, r1
 800b882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b886:	f000 f9f3 	bl	800bc70 <_lseek_r>
 800b88a:	1c43      	adds	r3, r0, #1
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	bf15      	itete	ne
 800b890:	6560      	strne	r0, [r4, #84]	; 0x54
 800b892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b89a:	81a3      	strheq	r3, [r4, #12]
 800b89c:	bf18      	it	ne
 800b89e:	81a3      	strhne	r3, [r4, #12]
 800b8a0:	bd10      	pop	{r4, pc}

0800b8a2 <__sclose>:
 800b8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a6:	f000 b8ff 	b.w	800baa8 <_close_r>
	...

0800b8ac <__swbuf_r>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	460e      	mov	r6, r1
 800b8b0:	4614      	mov	r4, r2
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	b118      	cbz	r0, 800b8be <__swbuf_r+0x12>
 800b8b6:	6983      	ldr	r3, [r0, #24]
 800b8b8:	b90b      	cbnz	r3, 800b8be <__swbuf_r+0x12>
 800b8ba:	f7fe fa69 	bl	8009d90 <__sinit>
 800b8be:	4b21      	ldr	r3, [pc, #132]	; (800b944 <__swbuf_r+0x98>)
 800b8c0:	429c      	cmp	r4, r3
 800b8c2:	d12b      	bne.n	800b91c <__swbuf_r+0x70>
 800b8c4:	686c      	ldr	r4, [r5, #4]
 800b8c6:	69a3      	ldr	r3, [r4, #24]
 800b8c8:	60a3      	str	r3, [r4, #8]
 800b8ca:	89a3      	ldrh	r3, [r4, #12]
 800b8cc:	071a      	lsls	r2, r3, #28
 800b8ce:	d52f      	bpl.n	800b930 <__swbuf_r+0x84>
 800b8d0:	6923      	ldr	r3, [r4, #16]
 800b8d2:	b36b      	cbz	r3, 800b930 <__swbuf_r+0x84>
 800b8d4:	6923      	ldr	r3, [r4, #16]
 800b8d6:	6820      	ldr	r0, [r4, #0]
 800b8d8:	b2f6      	uxtb	r6, r6
 800b8da:	1ac0      	subs	r0, r0, r3
 800b8dc:	6963      	ldr	r3, [r4, #20]
 800b8de:	4637      	mov	r7, r6
 800b8e0:	4283      	cmp	r3, r0
 800b8e2:	dc04      	bgt.n	800b8ee <__swbuf_r+0x42>
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f000 f974 	bl	800bbd4 <_fflush_r>
 800b8ec:	bb30      	cbnz	r0, 800b93c <__swbuf_r+0x90>
 800b8ee:	68a3      	ldr	r3, [r4, #8]
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	60a3      	str	r3, [r4, #8]
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	6022      	str	r2, [r4, #0]
 800b8fc:	701e      	strb	r6, [r3, #0]
 800b8fe:	6963      	ldr	r3, [r4, #20]
 800b900:	4283      	cmp	r3, r0
 800b902:	d004      	beq.n	800b90e <__swbuf_r+0x62>
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	07db      	lsls	r3, r3, #31
 800b908:	d506      	bpl.n	800b918 <__swbuf_r+0x6c>
 800b90a:	2e0a      	cmp	r6, #10
 800b90c:	d104      	bne.n	800b918 <__swbuf_r+0x6c>
 800b90e:	4621      	mov	r1, r4
 800b910:	4628      	mov	r0, r5
 800b912:	f000 f95f 	bl	800bbd4 <_fflush_r>
 800b916:	b988      	cbnz	r0, 800b93c <__swbuf_r+0x90>
 800b918:	4638      	mov	r0, r7
 800b91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b91c:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <__swbuf_r+0x9c>)
 800b91e:	429c      	cmp	r4, r3
 800b920:	d101      	bne.n	800b926 <__swbuf_r+0x7a>
 800b922:	68ac      	ldr	r4, [r5, #8]
 800b924:	e7cf      	b.n	800b8c6 <__swbuf_r+0x1a>
 800b926:	4b09      	ldr	r3, [pc, #36]	; (800b94c <__swbuf_r+0xa0>)
 800b928:	429c      	cmp	r4, r3
 800b92a:	bf08      	it	eq
 800b92c:	68ec      	ldreq	r4, [r5, #12]
 800b92e:	e7ca      	b.n	800b8c6 <__swbuf_r+0x1a>
 800b930:	4621      	mov	r1, r4
 800b932:	4628      	mov	r0, r5
 800b934:	f000 f82c 	bl	800b990 <__swsetup_r>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d0cb      	beq.n	800b8d4 <__swbuf_r+0x28>
 800b93c:	f04f 37ff 	mov.w	r7, #4294967295
 800b940:	e7ea      	b.n	800b918 <__swbuf_r+0x6c>
 800b942:	bf00      	nop
 800b944:	0800c048 	.word	0x0800c048
 800b948:	0800c068 	.word	0x0800c068
 800b94c:	0800c028 	.word	0x0800c028

0800b950 <__ascii_wctomb>:
 800b950:	4603      	mov	r3, r0
 800b952:	4608      	mov	r0, r1
 800b954:	b141      	cbz	r1, 800b968 <__ascii_wctomb+0x18>
 800b956:	2aff      	cmp	r2, #255	; 0xff
 800b958:	d904      	bls.n	800b964 <__ascii_wctomb+0x14>
 800b95a:	228a      	movs	r2, #138	; 0x8a
 800b95c:	f04f 30ff 	mov.w	r0, #4294967295
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	4770      	bx	lr
 800b964:	2001      	movs	r0, #1
 800b966:	700a      	strb	r2, [r1, #0]
 800b968:	4770      	bx	lr
	...

0800b96c <_write_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4604      	mov	r4, r0
 800b970:	4608      	mov	r0, r1
 800b972:	4611      	mov	r1, r2
 800b974:	2200      	movs	r2, #0
 800b976:	4d05      	ldr	r5, [pc, #20]	; (800b98c <_write_r+0x20>)
 800b978:	602a      	str	r2, [r5, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	f7f6 f802 	bl	8001984 <_write>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_write_r+0x1e>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_write_r+0x1e>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	20001050 	.word	0x20001050

0800b990 <__swsetup_r>:
 800b990:	4b32      	ldr	r3, [pc, #200]	; (800ba5c <__swsetup_r+0xcc>)
 800b992:	b570      	push	{r4, r5, r6, lr}
 800b994:	681d      	ldr	r5, [r3, #0]
 800b996:	4606      	mov	r6, r0
 800b998:	460c      	mov	r4, r1
 800b99a:	b125      	cbz	r5, 800b9a6 <__swsetup_r+0x16>
 800b99c:	69ab      	ldr	r3, [r5, #24]
 800b99e:	b913      	cbnz	r3, 800b9a6 <__swsetup_r+0x16>
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f7fe f9f5 	bl	8009d90 <__sinit>
 800b9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ba60 <__swsetup_r+0xd0>)
 800b9a8:	429c      	cmp	r4, r3
 800b9aa:	d10f      	bne.n	800b9cc <__swsetup_r+0x3c>
 800b9ac:	686c      	ldr	r4, [r5, #4]
 800b9ae:	89a3      	ldrh	r3, [r4, #12]
 800b9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9b4:	0719      	lsls	r1, r3, #28
 800b9b6:	d42c      	bmi.n	800ba12 <__swsetup_r+0x82>
 800b9b8:	06dd      	lsls	r5, r3, #27
 800b9ba:	d411      	bmi.n	800b9e0 <__swsetup_r+0x50>
 800b9bc:	2309      	movs	r3, #9
 800b9be:	6033      	str	r3, [r6, #0]
 800b9c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	e03e      	b.n	800ba4a <__swsetup_r+0xba>
 800b9cc:	4b25      	ldr	r3, [pc, #148]	; (800ba64 <__swsetup_r+0xd4>)
 800b9ce:	429c      	cmp	r4, r3
 800b9d0:	d101      	bne.n	800b9d6 <__swsetup_r+0x46>
 800b9d2:	68ac      	ldr	r4, [r5, #8]
 800b9d4:	e7eb      	b.n	800b9ae <__swsetup_r+0x1e>
 800b9d6:	4b24      	ldr	r3, [pc, #144]	; (800ba68 <__swsetup_r+0xd8>)
 800b9d8:	429c      	cmp	r4, r3
 800b9da:	bf08      	it	eq
 800b9dc:	68ec      	ldreq	r4, [r5, #12]
 800b9de:	e7e6      	b.n	800b9ae <__swsetup_r+0x1e>
 800b9e0:	0758      	lsls	r0, r3, #29
 800b9e2:	d512      	bpl.n	800ba0a <__swsetup_r+0x7a>
 800b9e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9e6:	b141      	cbz	r1, 800b9fa <__swsetup_r+0x6a>
 800b9e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ec:	4299      	cmp	r1, r3
 800b9ee:	d002      	beq.n	800b9f6 <__swsetup_r+0x66>
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f7fd fa59 	bl	8008ea8 <_free_r>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	6363      	str	r3, [r4, #52]	; 0x34
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba00:	81a3      	strh	r3, [r4, #12]
 800ba02:	2300      	movs	r3, #0
 800ba04:	6063      	str	r3, [r4, #4]
 800ba06:	6923      	ldr	r3, [r4, #16]
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	f043 0308 	orr.w	r3, r3, #8
 800ba10:	81a3      	strh	r3, [r4, #12]
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	b94b      	cbnz	r3, 800ba2a <__swsetup_r+0x9a>
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba20:	d003      	beq.n	800ba2a <__swsetup_r+0x9a>
 800ba22:	4621      	mov	r1, r4
 800ba24:	4630      	mov	r0, r6
 800ba26:	f000 f959 	bl	800bcdc <__smakebuf_r>
 800ba2a:	89a0      	ldrh	r0, [r4, #12]
 800ba2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba30:	f010 0301 	ands.w	r3, r0, #1
 800ba34:	d00a      	beq.n	800ba4c <__swsetup_r+0xbc>
 800ba36:	2300      	movs	r3, #0
 800ba38:	60a3      	str	r3, [r4, #8]
 800ba3a:	6963      	ldr	r3, [r4, #20]
 800ba3c:	425b      	negs	r3, r3
 800ba3e:	61a3      	str	r3, [r4, #24]
 800ba40:	6923      	ldr	r3, [r4, #16]
 800ba42:	b943      	cbnz	r3, 800ba56 <__swsetup_r+0xc6>
 800ba44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba48:	d1ba      	bne.n	800b9c0 <__swsetup_r+0x30>
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	0781      	lsls	r1, r0, #30
 800ba4e:	bf58      	it	pl
 800ba50:	6963      	ldrpl	r3, [r4, #20]
 800ba52:	60a3      	str	r3, [r4, #8]
 800ba54:	e7f4      	b.n	800ba40 <__swsetup_r+0xb0>
 800ba56:	2000      	movs	r0, #0
 800ba58:	e7f7      	b.n	800ba4a <__swsetup_r+0xba>
 800ba5a:	bf00      	nop
 800ba5c:	2000018c 	.word	0x2000018c
 800ba60:	0800c048 	.word	0x0800c048
 800ba64:	0800c068 	.word	0x0800c068
 800ba68:	0800c028 	.word	0x0800c028

0800ba6c <__assert_func>:
 800ba6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba6e:	4614      	mov	r4, r2
 800ba70:	461a      	mov	r2, r3
 800ba72:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <__assert_func+0x2c>)
 800ba74:	4605      	mov	r5, r0
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68d8      	ldr	r0, [r3, #12]
 800ba7a:	b14c      	cbz	r4, 800ba90 <__assert_func+0x24>
 800ba7c:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <__assert_func+0x30>)
 800ba7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba82:	9100      	str	r1, [sp, #0]
 800ba84:	462b      	mov	r3, r5
 800ba86:	4906      	ldr	r1, [pc, #24]	; (800baa0 <__assert_func+0x34>)
 800ba88:	f000 f8e0 	bl	800bc4c <fiprintf>
 800ba8c:	f000 f9c6 	bl	800be1c <abort>
 800ba90:	4b04      	ldr	r3, [pc, #16]	; (800baa4 <__assert_func+0x38>)
 800ba92:	461c      	mov	r4, r3
 800ba94:	e7f3      	b.n	800ba7e <__assert_func+0x12>
 800ba96:	bf00      	nop
 800ba98:	2000018c 	.word	0x2000018c
 800ba9c:	0800c2bf 	.word	0x0800c2bf
 800baa0:	0800c2cc 	.word	0x0800c2cc
 800baa4:	0800c2fa 	.word	0x0800c2fa

0800baa8 <_close_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	2300      	movs	r3, #0
 800baac:	4d05      	ldr	r5, [pc, #20]	; (800bac4 <_close_r+0x1c>)
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	602b      	str	r3, [r5, #0]
 800bab4:	f7f5 ff82 	bl	80019bc <_close>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_close_r+0x1a>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_close_r+0x1a>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	20001050 	.word	0x20001050

0800bac8 <__sflush_r>:
 800bac8:	898a      	ldrh	r2, [r1, #12]
 800baca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bace:	4605      	mov	r5, r0
 800bad0:	0710      	lsls	r0, r2, #28
 800bad2:	460c      	mov	r4, r1
 800bad4:	d458      	bmi.n	800bb88 <__sflush_r+0xc0>
 800bad6:	684b      	ldr	r3, [r1, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	dc05      	bgt.n	800bae8 <__sflush_r+0x20>
 800badc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bade:	2b00      	cmp	r3, #0
 800bae0:	dc02      	bgt.n	800bae8 <__sflush_r+0x20>
 800bae2:	2000      	movs	r0, #0
 800bae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800baea:	2e00      	cmp	r6, #0
 800baec:	d0f9      	beq.n	800bae2 <__sflush_r+0x1a>
 800baee:	2300      	movs	r3, #0
 800baf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800baf4:	682f      	ldr	r7, [r5, #0]
 800baf6:	602b      	str	r3, [r5, #0]
 800baf8:	d032      	beq.n	800bb60 <__sflush_r+0x98>
 800bafa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bafc:	89a3      	ldrh	r3, [r4, #12]
 800bafe:	075a      	lsls	r2, r3, #29
 800bb00:	d505      	bpl.n	800bb0e <__sflush_r+0x46>
 800bb02:	6863      	ldr	r3, [r4, #4]
 800bb04:	1ac0      	subs	r0, r0, r3
 800bb06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb08:	b10b      	cbz	r3, 800bb0e <__sflush_r+0x46>
 800bb0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb0c:	1ac0      	subs	r0, r0, r3
 800bb0e:	2300      	movs	r3, #0
 800bb10:	4602      	mov	r2, r0
 800bb12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb14:	4628      	mov	r0, r5
 800bb16:	6a21      	ldr	r1, [r4, #32]
 800bb18:	47b0      	blx	r6
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	d106      	bne.n	800bb2e <__sflush_r+0x66>
 800bb20:	6829      	ldr	r1, [r5, #0]
 800bb22:	291d      	cmp	r1, #29
 800bb24:	d82c      	bhi.n	800bb80 <__sflush_r+0xb8>
 800bb26:	4a2a      	ldr	r2, [pc, #168]	; (800bbd0 <__sflush_r+0x108>)
 800bb28:	40ca      	lsrs	r2, r1
 800bb2a:	07d6      	lsls	r6, r2, #31
 800bb2c:	d528      	bpl.n	800bb80 <__sflush_r+0xb8>
 800bb2e:	2200      	movs	r2, #0
 800bb30:	6062      	str	r2, [r4, #4]
 800bb32:	6922      	ldr	r2, [r4, #16]
 800bb34:	04d9      	lsls	r1, r3, #19
 800bb36:	6022      	str	r2, [r4, #0]
 800bb38:	d504      	bpl.n	800bb44 <__sflush_r+0x7c>
 800bb3a:	1c42      	adds	r2, r0, #1
 800bb3c:	d101      	bne.n	800bb42 <__sflush_r+0x7a>
 800bb3e:	682b      	ldr	r3, [r5, #0]
 800bb40:	b903      	cbnz	r3, 800bb44 <__sflush_r+0x7c>
 800bb42:	6560      	str	r0, [r4, #84]	; 0x54
 800bb44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb46:	602f      	str	r7, [r5, #0]
 800bb48:	2900      	cmp	r1, #0
 800bb4a:	d0ca      	beq.n	800bae2 <__sflush_r+0x1a>
 800bb4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb50:	4299      	cmp	r1, r3
 800bb52:	d002      	beq.n	800bb5a <__sflush_r+0x92>
 800bb54:	4628      	mov	r0, r5
 800bb56:	f7fd f9a7 	bl	8008ea8 <_free_r>
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	6360      	str	r0, [r4, #52]	; 0x34
 800bb5e:	e7c1      	b.n	800bae4 <__sflush_r+0x1c>
 800bb60:	6a21      	ldr	r1, [r4, #32]
 800bb62:	2301      	movs	r3, #1
 800bb64:	4628      	mov	r0, r5
 800bb66:	47b0      	blx	r6
 800bb68:	1c41      	adds	r1, r0, #1
 800bb6a:	d1c7      	bne.n	800bafc <__sflush_r+0x34>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0c4      	beq.n	800bafc <__sflush_r+0x34>
 800bb72:	2b1d      	cmp	r3, #29
 800bb74:	d001      	beq.n	800bb7a <__sflush_r+0xb2>
 800bb76:	2b16      	cmp	r3, #22
 800bb78:	d101      	bne.n	800bb7e <__sflush_r+0xb6>
 800bb7a:	602f      	str	r7, [r5, #0]
 800bb7c:	e7b1      	b.n	800bae2 <__sflush_r+0x1a>
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb84:	81a3      	strh	r3, [r4, #12]
 800bb86:	e7ad      	b.n	800bae4 <__sflush_r+0x1c>
 800bb88:	690f      	ldr	r7, [r1, #16]
 800bb8a:	2f00      	cmp	r7, #0
 800bb8c:	d0a9      	beq.n	800bae2 <__sflush_r+0x1a>
 800bb8e:	0793      	lsls	r3, r2, #30
 800bb90:	bf18      	it	ne
 800bb92:	2300      	movne	r3, #0
 800bb94:	680e      	ldr	r6, [r1, #0]
 800bb96:	bf08      	it	eq
 800bb98:	694b      	ldreq	r3, [r1, #20]
 800bb9a:	eba6 0807 	sub.w	r8, r6, r7
 800bb9e:	600f      	str	r7, [r1, #0]
 800bba0:	608b      	str	r3, [r1, #8]
 800bba2:	f1b8 0f00 	cmp.w	r8, #0
 800bba6:	dd9c      	ble.n	800bae2 <__sflush_r+0x1a>
 800bba8:	4643      	mov	r3, r8
 800bbaa:	463a      	mov	r2, r7
 800bbac:	4628      	mov	r0, r5
 800bbae:	6a21      	ldr	r1, [r4, #32]
 800bbb0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbb2:	47b0      	blx	r6
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	dc06      	bgt.n	800bbc6 <__sflush_r+0xfe>
 800bbb8:	89a3      	ldrh	r3, [r4, #12]
 800bbba:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	e78e      	b.n	800bae4 <__sflush_r+0x1c>
 800bbc6:	4407      	add	r7, r0
 800bbc8:	eba8 0800 	sub.w	r8, r8, r0
 800bbcc:	e7e9      	b.n	800bba2 <__sflush_r+0xda>
 800bbce:	bf00      	nop
 800bbd0:	20400001 	.word	0x20400001

0800bbd4 <_fflush_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	690b      	ldr	r3, [r1, #16]
 800bbd8:	4605      	mov	r5, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	b913      	cbnz	r3, 800bbe4 <_fflush_r+0x10>
 800bbde:	2500      	movs	r5, #0
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	bd38      	pop	{r3, r4, r5, pc}
 800bbe4:	b118      	cbz	r0, 800bbee <_fflush_r+0x1a>
 800bbe6:	6983      	ldr	r3, [r0, #24]
 800bbe8:	b90b      	cbnz	r3, 800bbee <_fflush_r+0x1a>
 800bbea:	f7fe f8d1 	bl	8009d90 <__sinit>
 800bbee:	4b14      	ldr	r3, [pc, #80]	; (800bc40 <_fflush_r+0x6c>)
 800bbf0:	429c      	cmp	r4, r3
 800bbf2:	d11b      	bne.n	800bc2c <_fflush_r+0x58>
 800bbf4:	686c      	ldr	r4, [r5, #4]
 800bbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d0ef      	beq.n	800bbde <_fflush_r+0xa>
 800bbfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc00:	07d0      	lsls	r0, r2, #31
 800bc02:	d404      	bmi.n	800bc0e <_fflush_r+0x3a>
 800bc04:	0599      	lsls	r1, r3, #22
 800bc06:	d402      	bmi.n	800bc0e <_fflush_r+0x3a>
 800bc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc0a:	f7fe fcc6 	bl	800a59a <__retarget_lock_acquire_recursive>
 800bc0e:	4628      	mov	r0, r5
 800bc10:	4621      	mov	r1, r4
 800bc12:	f7ff ff59 	bl	800bac8 <__sflush_r>
 800bc16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc18:	4605      	mov	r5, r0
 800bc1a:	07da      	lsls	r2, r3, #31
 800bc1c:	d4e0      	bmi.n	800bbe0 <_fflush_r+0xc>
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	059b      	lsls	r3, r3, #22
 800bc22:	d4dd      	bmi.n	800bbe0 <_fflush_r+0xc>
 800bc24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc26:	f7fe fcb9 	bl	800a59c <__retarget_lock_release_recursive>
 800bc2a:	e7d9      	b.n	800bbe0 <_fflush_r+0xc>
 800bc2c:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <_fflush_r+0x70>)
 800bc2e:	429c      	cmp	r4, r3
 800bc30:	d101      	bne.n	800bc36 <_fflush_r+0x62>
 800bc32:	68ac      	ldr	r4, [r5, #8]
 800bc34:	e7df      	b.n	800bbf6 <_fflush_r+0x22>
 800bc36:	4b04      	ldr	r3, [pc, #16]	; (800bc48 <_fflush_r+0x74>)
 800bc38:	429c      	cmp	r4, r3
 800bc3a:	bf08      	it	eq
 800bc3c:	68ec      	ldreq	r4, [r5, #12]
 800bc3e:	e7da      	b.n	800bbf6 <_fflush_r+0x22>
 800bc40:	0800c048 	.word	0x0800c048
 800bc44:	0800c068 	.word	0x0800c068
 800bc48:	0800c028 	.word	0x0800c028

0800bc4c <fiprintf>:
 800bc4c:	b40e      	push	{r1, r2, r3}
 800bc4e:	b503      	push	{r0, r1, lr}
 800bc50:	4601      	mov	r1, r0
 800bc52:	ab03      	add	r3, sp, #12
 800bc54:	4805      	ldr	r0, [pc, #20]	; (800bc6c <fiprintf+0x20>)
 800bc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5a:	6800      	ldr	r0, [r0, #0]
 800bc5c:	9301      	str	r3, [sp, #4]
 800bc5e:	f7ff fb15 	bl	800b28c <_vfiprintf_r>
 800bc62:	b002      	add	sp, #8
 800bc64:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc68:	b003      	add	sp, #12
 800bc6a:	4770      	bx	lr
 800bc6c:	2000018c 	.word	0x2000018c

0800bc70 <_lseek_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	4611      	mov	r1, r2
 800bc78:	2200      	movs	r2, #0
 800bc7a:	4d05      	ldr	r5, [pc, #20]	; (800bc90 <_lseek_r+0x20>)
 800bc7c:	602a      	str	r2, [r5, #0]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	f7f5 fec0 	bl	8001a04 <_lseek>
 800bc84:	1c43      	adds	r3, r0, #1
 800bc86:	d102      	bne.n	800bc8e <_lseek_r+0x1e>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	b103      	cbz	r3, 800bc8e <_lseek_r+0x1e>
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	bd38      	pop	{r3, r4, r5, pc}
 800bc90:	20001050 	.word	0x20001050

0800bc94 <__swhatbuf_r>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	460e      	mov	r6, r1
 800bc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc9c:	4614      	mov	r4, r2
 800bc9e:	2900      	cmp	r1, #0
 800bca0:	461d      	mov	r5, r3
 800bca2:	b096      	sub	sp, #88	; 0x58
 800bca4:	da07      	bge.n	800bcb6 <__swhatbuf_r+0x22>
 800bca6:	2300      	movs	r3, #0
 800bca8:	602b      	str	r3, [r5, #0]
 800bcaa:	89b3      	ldrh	r3, [r6, #12]
 800bcac:	061a      	lsls	r2, r3, #24
 800bcae:	d410      	bmi.n	800bcd2 <__swhatbuf_r+0x3e>
 800bcb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcb4:	e00e      	b.n	800bcd4 <__swhatbuf_r+0x40>
 800bcb6:	466a      	mov	r2, sp
 800bcb8:	f000 f8b8 	bl	800be2c <_fstat_r>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	dbf2      	blt.n	800bca6 <__swhatbuf_r+0x12>
 800bcc0:	9a01      	ldr	r2, [sp, #4]
 800bcc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bcca:	425a      	negs	r2, r3
 800bccc:	415a      	adcs	r2, r3
 800bcce:	602a      	str	r2, [r5, #0]
 800bcd0:	e7ee      	b.n	800bcb0 <__swhatbuf_r+0x1c>
 800bcd2:	2340      	movs	r3, #64	; 0x40
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	6023      	str	r3, [r4, #0]
 800bcd8:	b016      	add	sp, #88	; 0x58
 800bcda:	bd70      	pop	{r4, r5, r6, pc}

0800bcdc <__smakebuf_r>:
 800bcdc:	898b      	ldrh	r3, [r1, #12]
 800bcde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bce0:	079d      	lsls	r5, r3, #30
 800bce2:	4606      	mov	r6, r0
 800bce4:	460c      	mov	r4, r1
 800bce6:	d507      	bpl.n	800bcf8 <__smakebuf_r+0x1c>
 800bce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	6123      	str	r3, [r4, #16]
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	6163      	str	r3, [r4, #20]
 800bcf4:	b002      	add	sp, #8
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}
 800bcf8:	466a      	mov	r2, sp
 800bcfa:	ab01      	add	r3, sp, #4
 800bcfc:	f7ff ffca 	bl	800bc94 <__swhatbuf_r>
 800bd00:	9900      	ldr	r1, [sp, #0]
 800bd02:	4605      	mov	r5, r0
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7fd f91b 	bl	8008f40 <_malloc_r>
 800bd0a:	b948      	cbnz	r0, 800bd20 <__smakebuf_r+0x44>
 800bd0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd10:	059a      	lsls	r2, r3, #22
 800bd12:	d4ef      	bmi.n	800bcf4 <__smakebuf_r+0x18>
 800bd14:	f023 0303 	bic.w	r3, r3, #3
 800bd18:	f043 0302 	orr.w	r3, r3, #2
 800bd1c:	81a3      	strh	r3, [r4, #12]
 800bd1e:	e7e3      	b.n	800bce8 <__smakebuf_r+0xc>
 800bd20:	4b0d      	ldr	r3, [pc, #52]	; (800bd58 <__smakebuf_r+0x7c>)
 800bd22:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	6020      	str	r0, [r4, #0]
 800bd28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd2c:	81a3      	strh	r3, [r4, #12]
 800bd2e:	9b00      	ldr	r3, [sp, #0]
 800bd30:	6120      	str	r0, [r4, #16]
 800bd32:	6163      	str	r3, [r4, #20]
 800bd34:	9b01      	ldr	r3, [sp, #4]
 800bd36:	b15b      	cbz	r3, 800bd50 <__smakebuf_r+0x74>
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd3e:	f000 f887 	bl	800be50 <_isatty_r>
 800bd42:	b128      	cbz	r0, 800bd50 <__smakebuf_r+0x74>
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	f023 0303 	bic.w	r3, r3, #3
 800bd4a:	f043 0301 	orr.w	r3, r3, #1
 800bd4e:	81a3      	strh	r3, [r4, #12]
 800bd50:	89a0      	ldrh	r0, [r4, #12]
 800bd52:	4305      	orrs	r5, r0
 800bd54:	81a5      	strh	r5, [r4, #12]
 800bd56:	e7cd      	b.n	800bcf4 <__smakebuf_r+0x18>
 800bd58:	08009d29 	.word	0x08009d29

0800bd5c <memchr>:
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	b510      	push	{r4, lr}
 800bd60:	b2c9      	uxtb	r1, r1
 800bd62:	4402      	add	r2, r0
 800bd64:	4293      	cmp	r3, r2
 800bd66:	4618      	mov	r0, r3
 800bd68:	d101      	bne.n	800bd6e <memchr+0x12>
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e003      	b.n	800bd76 <memchr+0x1a>
 800bd6e:	7804      	ldrb	r4, [r0, #0]
 800bd70:	3301      	adds	r3, #1
 800bd72:	428c      	cmp	r4, r1
 800bd74:	d1f6      	bne.n	800bd64 <memchr+0x8>
 800bd76:	bd10      	pop	{r4, pc}

0800bd78 <memmove>:
 800bd78:	4288      	cmp	r0, r1
 800bd7a:	b510      	push	{r4, lr}
 800bd7c:	eb01 0402 	add.w	r4, r1, r2
 800bd80:	d902      	bls.n	800bd88 <memmove+0x10>
 800bd82:	4284      	cmp	r4, r0
 800bd84:	4623      	mov	r3, r4
 800bd86:	d807      	bhi.n	800bd98 <memmove+0x20>
 800bd88:	1e43      	subs	r3, r0, #1
 800bd8a:	42a1      	cmp	r1, r4
 800bd8c:	d008      	beq.n	800bda0 <memmove+0x28>
 800bd8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd96:	e7f8      	b.n	800bd8a <memmove+0x12>
 800bd98:	4601      	mov	r1, r0
 800bd9a:	4402      	add	r2, r0
 800bd9c:	428a      	cmp	r2, r1
 800bd9e:	d100      	bne.n	800bda2 <memmove+0x2a>
 800bda0:	bd10      	pop	{r4, pc}
 800bda2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bda6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdaa:	e7f7      	b.n	800bd9c <memmove+0x24>

0800bdac <_realloc_r>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	4607      	mov	r7, r0
 800bdb0:	4614      	mov	r4, r2
 800bdb2:	460e      	mov	r6, r1
 800bdb4:	b921      	cbnz	r1, 800bdc0 <_realloc_r+0x14>
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bdbc:	f7fd b8c0 	b.w	8008f40 <_malloc_r>
 800bdc0:	b922      	cbnz	r2, 800bdcc <_realloc_r+0x20>
 800bdc2:	f7fd f871 	bl	8008ea8 <_free_r>
 800bdc6:	4625      	mov	r5, r4
 800bdc8:	4628      	mov	r0, r5
 800bdca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdcc:	f000 f850 	bl	800be70 <_malloc_usable_size_r>
 800bdd0:	42a0      	cmp	r0, r4
 800bdd2:	d20f      	bcs.n	800bdf4 <_realloc_r+0x48>
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	f7fd f8b2 	bl	8008f40 <_malloc_r>
 800bddc:	4605      	mov	r5, r0
 800bdde:	2800      	cmp	r0, #0
 800bde0:	d0f2      	beq.n	800bdc8 <_realloc_r+0x1c>
 800bde2:	4631      	mov	r1, r6
 800bde4:	4622      	mov	r2, r4
 800bde6:	f7fe fbec 	bl	800a5c2 <memcpy>
 800bdea:	4631      	mov	r1, r6
 800bdec:	4638      	mov	r0, r7
 800bdee:	f7fd f85b 	bl	8008ea8 <_free_r>
 800bdf2:	e7e9      	b.n	800bdc8 <_realloc_r+0x1c>
 800bdf4:	4635      	mov	r5, r6
 800bdf6:	e7e7      	b.n	800bdc8 <_realloc_r+0x1c>

0800bdf8 <_read_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	4611      	mov	r1, r2
 800be00:	2200      	movs	r2, #0
 800be02:	4d05      	ldr	r5, [pc, #20]	; (800be18 <_read_r+0x20>)
 800be04:	602a      	str	r2, [r5, #0]
 800be06:	461a      	mov	r2, r3
 800be08:	f7f5 fd9f 	bl	800194a <_read>
 800be0c:	1c43      	adds	r3, r0, #1
 800be0e:	d102      	bne.n	800be16 <_read_r+0x1e>
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	b103      	cbz	r3, 800be16 <_read_r+0x1e>
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	bd38      	pop	{r3, r4, r5, pc}
 800be18:	20001050 	.word	0x20001050

0800be1c <abort>:
 800be1c:	2006      	movs	r0, #6
 800be1e:	b508      	push	{r3, lr}
 800be20:	f000 f856 	bl	800bed0 <raise>
 800be24:	2001      	movs	r0, #1
 800be26:	f7f5 fd86 	bl	8001936 <_exit>
	...

0800be2c <_fstat_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	2300      	movs	r3, #0
 800be30:	4d06      	ldr	r5, [pc, #24]	; (800be4c <_fstat_r+0x20>)
 800be32:	4604      	mov	r4, r0
 800be34:	4608      	mov	r0, r1
 800be36:	4611      	mov	r1, r2
 800be38:	602b      	str	r3, [r5, #0]
 800be3a:	f7f5 fdca 	bl	80019d2 <_fstat>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	d102      	bne.n	800be48 <_fstat_r+0x1c>
 800be42:	682b      	ldr	r3, [r5, #0]
 800be44:	b103      	cbz	r3, 800be48 <_fstat_r+0x1c>
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	bd38      	pop	{r3, r4, r5, pc}
 800be4a:	bf00      	nop
 800be4c:	20001050 	.word	0x20001050

0800be50 <_isatty_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	2300      	movs	r3, #0
 800be54:	4d05      	ldr	r5, [pc, #20]	; (800be6c <_isatty_r+0x1c>)
 800be56:	4604      	mov	r4, r0
 800be58:	4608      	mov	r0, r1
 800be5a:	602b      	str	r3, [r5, #0]
 800be5c:	f7f5 fdc8 	bl	80019f0 <_isatty>
 800be60:	1c43      	adds	r3, r0, #1
 800be62:	d102      	bne.n	800be6a <_isatty_r+0x1a>
 800be64:	682b      	ldr	r3, [r5, #0]
 800be66:	b103      	cbz	r3, 800be6a <_isatty_r+0x1a>
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	bd38      	pop	{r3, r4, r5, pc}
 800be6c:	20001050 	.word	0x20001050

0800be70 <_malloc_usable_size_r>:
 800be70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be74:	1f18      	subs	r0, r3, #4
 800be76:	2b00      	cmp	r3, #0
 800be78:	bfbc      	itt	lt
 800be7a:	580b      	ldrlt	r3, [r1, r0]
 800be7c:	18c0      	addlt	r0, r0, r3
 800be7e:	4770      	bx	lr

0800be80 <_raise_r>:
 800be80:	291f      	cmp	r1, #31
 800be82:	b538      	push	{r3, r4, r5, lr}
 800be84:	4604      	mov	r4, r0
 800be86:	460d      	mov	r5, r1
 800be88:	d904      	bls.n	800be94 <_raise_r+0x14>
 800be8a:	2316      	movs	r3, #22
 800be8c:	6003      	str	r3, [r0, #0]
 800be8e:	f04f 30ff 	mov.w	r0, #4294967295
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be96:	b112      	cbz	r2, 800be9e <_raise_r+0x1e>
 800be98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be9c:	b94b      	cbnz	r3, 800beb2 <_raise_r+0x32>
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 f830 	bl	800bf04 <_getpid_r>
 800bea4:	462a      	mov	r2, r5
 800bea6:	4601      	mov	r1, r0
 800bea8:	4620      	mov	r0, r4
 800beaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beae:	f000 b817 	b.w	800bee0 <_kill_r>
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d00a      	beq.n	800becc <_raise_r+0x4c>
 800beb6:	1c59      	adds	r1, r3, #1
 800beb8:	d103      	bne.n	800bec2 <_raise_r+0x42>
 800beba:	2316      	movs	r3, #22
 800bebc:	6003      	str	r3, [r0, #0]
 800bebe:	2001      	movs	r0, #1
 800bec0:	e7e7      	b.n	800be92 <_raise_r+0x12>
 800bec2:	2400      	movs	r4, #0
 800bec4:	4628      	mov	r0, r5
 800bec6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800beca:	4798      	blx	r3
 800becc:	2000      	movs	r0, #0
 800bece:	e7e0      	b.n	800be92 <_raise_r+0x12>

0800bed0 <raise>:
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <raise+0xc>)
 800bed2:	4601      	mov	r1, r0
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	f7ff bfd3 	b.w	800be80 <_raise_r>
 800beda:	bf00      	nop
 800bedc:	2000018c 	.word	0x2000018c

0800bee0 <_kill_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	2300      	movs	r3, #0
 800bee4:	4d06      	ldr	r5, [pc, #24]	; (800bf00 <_kill_r+0x20>)
 800bee6:	4604      	mov	r4, r0
 800bee8:	4608      	mov	r0, r1
 800beea:	4611      	mov	r1, r2
 800beec:	602b      	str	r3, [r5, #0]
 800beee:	f7f5 fd12 	bl	8001916 <_kill>
 800bef2:	1c43      	adds	r3, r0, #1
 800bef4:	d102      	bne.n	800befc <_kill_r+0x1c>
 800bef6:	682b      	ldr	r3, [r5, #0]
 800bef8:	b103      	cbz	r3, 800befc <_kill_r+0x1c>
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	bd38      	pop	{r3, r4, r5, pc}
 800befe:	bf00      	nop
 800bf00:	20001050 	.word	0x20001050

0800bf04 <_getpid_r>:
 800bf04:	f7f5 bd00 	b.w	8001908 <_getpid>

0800bf08 <_init>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	bf00      	nop
 800bf0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0e:	bc08      	pop	{r3}
 800bf10:	469e      	mov	lr, r3
 800bf12:	4770      	bx	lr

0800bf14 <_fini>:
 800bf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf16:	bf00      	nop
 800bf18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1a:	bc08      	pop	{r3}
 800bf1c:	469e      	mov	lr, r3
 800bf1e:	4770      	bx	lr
