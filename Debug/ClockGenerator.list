
ClockGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c008  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800c118  0800c118  0001c118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c664  0800c664  00020360  2**0
                  CONTENTS
  4 .ARM          00000000  0800c664  0800c664  00020360  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c664  0800c664  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c664  0800c664  0001c664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c668  0800c668  0001c668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800c66c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dbc  20000360  0800c9cc  00020360  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000111c  0800c9cc  0002111c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017769  00000000  00000000  00020389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000395d  00000000  00000000  00037af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0003b450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  0003c250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8c8  00000000  00000000  0003ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c33  00000000  00000000  00058780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895a1  00000000  00000000  0006a3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3954  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  000f39a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000360 	.word	0x20000360
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c100 	.word	0x0800c100

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000364 	.word	0x20000364
 800014c:	0800c100 	.word	0x0800c100

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2lz>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	460c      	mov	r4, r1
 8000a50:	4605      	mov	r5, r0
 8000a52:	4621      	mov	r1, r4
 8000a54:	4628      	mov	r0, r5
 8000a56:	2200      	movs	r2, #0
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f7ff ffaf 	bl	80009bc <__aeabi_dcmplt>
 8000a5e:	b928      	cbnz	r0, 8000a6c <__aeabi_d2lz+0x20>
 8000a60:	4628      	mov	r0, r5
 8000a62:	4621      	mov	r1, r4
 8000a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a68:	f000 b80a 	b.w	8000a80 <__aeabi_d2ulz>
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000a72:	f000 f805 	bl	8000a80 <__aeabi_d2ulz>
 8000a76:	4240      	negs	r0, r0
 8000a78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a7c:	bd38      	pop	{r3, r4, r5, pc}
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2ulz>:
 8000a80:	b5d0      	push	{r4, r6, r7, lr}
 8000a82:	2200      	movs	r2, #0
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <__aeabi_d2ulz+0x34>)
 8000a86:	4606      	mov	r6, r0
 8000a88:	460f      	mov	r7, r1
 8000a8a:	f7ff fd25 	bl	80004d8 <__aeabi_dmul>
 8000a8e:	f7ff ffbd 	bl	8000a0c <__aeabi_d2uiz>
 8000a92:	4604      	mov	r4, r0
 8000a94:	f7ff fca6 	bl	80003e4 <__aeabi_ui2d>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <__aeabi_d2ulz+0x38>)
 8000a9c:	f7ff fd1c 	bl	80004d8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	f7ff fb5e 	bl	8000168 <__aeabi_dsub>
 8000aac:	f7ff ffae 	bl	8000a0c <__aeabi_d2uiz>
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ab4:	3df00000 	.word	0x3df00000
 8000ab8:	41f00000 	.word	0x41f00000

08000abc <adf435x_init>:

uint8_t adf435x_init(adf435xSettings *obj, TypeIcTypeDef type,
		uint32_t reference_clock, void (*cs_low_t)(void),
		void (*cs_high_t)(void), void (*SPI_send)(uint8_t*, uint8_t),
		void (*delay_t)(uint32_t))
{
 8000abc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	460b      	mov	r3, r1
 8000acc:	72fb      	strb	r3, [r7, #11]
	if (obj == NULL)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <adf435x_init+0x1c>
		return 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e0f9      	b.n	8000ccc <adf435x_init+0x210>
	if (reference_clock > 50000000)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a7f      	ldr	r2, [pc, #508]	; (8000cd8 <adf435x_init+0x21c>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d901      	bls.n	8000ae4 <adf435x_init+0x28>
		return 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e0f3      	b.n	8000ccc <adf435x_init+0x210>
	if (reference_clock < 10000000)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a7d      	ldr	r2, [pc, #500]	; (8000cdc <adf435x_init+0x220>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d201      	bcs.n	8000af0 <adf435x_init+0x34>
		return 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	e0ed      	b.n	8000ccc <adf435x_init+0x210>
	if (cs_low_t == NULL)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <adf435x_init+0x3e>
		return 3;
 8000af6:	2303      	movs	r3, #3
 8000af8:	e0e8      	b.n	8000ccc <adf435x_init+0x210>
	if (cs_high_t == NULL)
 8000afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <adf435x_init+0x48>
		return 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	e0e3      	b.n	8000ccc <adf435x_init+0x210>
	if (SPI_send == NULL)
 8000b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <adf435x_init+0x52>
		return 5;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	e0de      	b.n	8000ccc <adf435x_init+0x210>
	if (delay_t == NULL)
 8000b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <adf435x_init+0x5c>
		return 6;
 8000b14:	2306      	movs	r3, #6
 8000b16:	e0d9      	b.n	8000ccc <adf435x_init+0x210>

	obj->Type_ic = type;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	7afa      	ldrb	r2, [r7, #11]
 8000b1c:	701a      	strb	r2, [r3, #0]

	// Register 0:
	obj->INT = 0;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2200      	movs	r2, #0
 8000b22:	811a      	strh	r2, [r3, #8]
	obj->FRAC = 0;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2200      	movs	r2, #0
 8000b28:	815a      	strh	r2, [r3, #10]

	// Register 1:
	obj->phase_adj = 0;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	731a      	strb	r2, [r3, #12]
	obj->prescaler = 0;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2200      	movs	r2, #0
 8000b34:	735a      	strb	r2, [r3, #13]
	obj->phase = 1;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	81da      	strh	r2, [r3, #14]
	obj->MOD = 4095;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b42:	821a      	strh	r2, [r3, #16]
	// Register 2:
	obj->low_noise_spur = 0;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2200      	movs	r2, #0
 8000b48:	749a      	strb	r2, [r3, #18]
	obj->muxout = 0;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	74da      	strb	r2, [r3, #19]

	if (reference_clock < 30000000)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a63      	ldr	r2, [pc, #396]	; (8000ce0 <adf435x_init+0x224>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d803      	bhi.n	8000b60 <adf435x_init+0xa4>
		obj->ref_doubler = 1;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	751a      	strb	r2, [r3, #20]
 8000b5e:	e002      	b.n	8000b66 <adf435x_init+0xaa>
	else
		obj->ref_doubler = 0;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2200      	movs	r2, #0
 8000b64:	751a      	strb	r2, [r3, #20]

	obj->rdiv2 = 1;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	755a      	strb	r2, [r3, #21]
	obj->r_counter = 10;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	220a      	movs	r2, #10
 8000b70:	82da      	strh	r2, [r3, #22]
	obj->dbl_buf = 0;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2200      	movs	r2, #0
 8000b76:	761a      	strb	r2, [r3, #24]
	obj->charge_pump_current = 0b111;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	765a      	strb	r2, [r3, #25]
	obj->ldf = 1;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2201      	movs	r2, #1
 8000b82:	769a      	strb	r2, [r3, #26]
	obj->ldp = 0;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2200      	movs	r2, #0
 8000b88:	76da      	strb	r2, [r3, #27]
	obj->pd_polarity = 1;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	771a      	strb	r2, [r3, #28]
	obj->powerdown = 0;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2200      	movs	r2, #0
 8000b94:	775a      	strb	r2, [r3, #29]
	obj->cp_three_state = 0;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	779a      	strb	r2, [r3, #30]
	obj->counter_reset = 0;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	77da      	strb	r2, [r3, #31]
	// Register 3:
	obj->band_mode_clksel = 0;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2020 	strb.w	r2, [r3, #32]
	obj->abp = 0;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	obj->chg_cancel = 0;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	obj->csr = 0;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	obj->clkdiv_mode = 0;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	obj->clock_divider = 150;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2296      	movs	r2, #150	; 0x96
 8000bce:	84da      	strh	r2, [r3, #38]	; 0x26
	// Register 4:
	obj->feedback_sel = 1;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	obj->rf_div_sel = 2;   // 0 = /1, 1=/2, 2=/4 ...
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2202      	movs	r2, #2
 8000bdc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	obj->band_select_clkdiv = 4;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2204      	movs	r2, #4
 8000be4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	obj->vco_pwrdown = 0;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	obj->mtld = 1;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	obj->aux_outsel = 0;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	obj->aux_outena = 0;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	obj->aux_pwr = 0;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	obj->rf_ena = 1; // 0 - output disabled
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2201      	movs	r2, #1
 8000c14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	obj->out_pwr = 3; // 0 - min, 3 - max
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	obj->ld_pinmode = 1;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	obj->pfd_freq = 0;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	64da      	str	r2, [r3, #76]	; 0x4c

	obj->pfd_freq = (reference_clock * (1.0 + obj->ref_doubler))
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fbd8 	bl	80003e4 <__aeabi_ui2d>
 8000c34:	4604      	mov	r4, r0
 8000c36:	460d      	mov	r5, r1
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	7d1b      	ldrb	r3, [r3, #20]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fbe1 	bl	8000404 <__aeabi_i2d>
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <adf435x_init+0x228>)
 8000c48:	f7ff fa90 	bl	800016c <__adddf3>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4620      	mov	r0, r4
 8000c52:	4629      	mov	r1, r5
 8000c54:	f7ff fc40 	bl	80004d8 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4690      	mov	r8, r2
 8000c5e:	4699      	mov	r9, r3
			/ (obj->r_counter * ((1.0 + obj->rdiv2)));
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	8adb      	ldrh	r3, [r3, #22]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fbcd 	bl	8000404 <__aeabi_i2d>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	460d      	mov	r5, r1
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	7d5b      	ldrb	r3, [r3, #21]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fbc6 	bl	8000404 <__aeabi_i2d>
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <adf435x_init+0x228>)
 8000c7e:	f7ff fa75 	bl	800016c <__adddf3>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	4620      	mov	r0, r4
 8000c88:	4629      	mov	r1, r5
 8000c8a:	f7ff fc25 	bl	80004d8 <__aeabi_dmul>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4640      	mov	r0, r8
 8000c94:	4649      	mov	r1, r9
 8000c96:	f7ff fd49 	bl	800072c <__aeabi_ddiv>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
	obj->pfd_freq = (reference_clock * (1.0 + obj->ref_doubler))
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f7ff feb3 	bl	8000a0c <__aeabi_d2uiz>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	64da      	str	r2, [r3, #76]	; 0x4c

	obj->ref_clk = reference_clock;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	605a      	str	r2, [r3, #4]

	obj->low_CS = cs_low_t;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	655a      	str	r2, [r3, #84]	; 0x54
	obj->high_CS = cs_high_t;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cbc:	659a      	str	r2, [r3, #88]	; 0x58
	obj->send_message = SPI_send;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cc2:	65da      	str	r2, [r3, #92]	; 0x5c
	obj->delay = delay_t;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cc8:	661a      	str	r2, [r3, #96]	; 0x60

	return 0;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000cd6:	bf00      	nop
 8000cd8:	02faf080 	.word	0x02faf080
 8000cdc:	00989680 	.word	0x00989680
 8000ce0:	01c9c37f 	.word	0x01c9c37f
 8000ce4:	3ff00000 	.word	0x3ff00000

08000ce8 <prepare_registers>:

uint8_t prepare_registers(adf435xSettings *obj, uint32_t freq)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	if(obj->Type_ic == ADF4351_TYPE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d13d      	bne.n	8000d76 <prepare_registers+0x8e>
	{
		if (freq >= 4400000000)
			return 1;
		if (freq >= 2200000000)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	4aa5      	ldr	r2, [pc, #660]	; (8000f94 <prepare_registers+0x2ac>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d903      	bls.n	8000d0a <prepare_registers+0x22>
			obj->rf_div_sel = 0;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 2200000000)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	4aa1      	ldr	r2, [pc, #644]	; (8000f94 <prepare_registers+0x2ac>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d803      	bhi.n	8000d1a <prepare_registers+0x32>
			obj->rf_div_sel = 1;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 1100000000)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	4a9e      	ldr	r2, [pc, #632]	; (8000f98 <prepare_registers+0x2b0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d803      	bhi.n	8000d2a <prepare_registers+0x42>
			obj->rf_div_sel = 2;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2202      	movs	r2, #2
 8000d26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 550000000)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	4a9b      	ldr	r2, [pc, #620]	; (8000f9c <prepare_registers+0x2b4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d803      	bhi.n	8000d3a <prepare_registers+0x52>
			obj->rf_div_sel = 3;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2203      	movs	r2, #3
 8000d36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 275000000)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	4a98      	ldr	r2, [pc, #608]	; (8000fa0 <prepare_registers+0x2b8>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d803      	bhi.n	8000d4a <prepare_registers+0x62>
			obj->rf_div_sel = 4;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2204      	movs	r2, #4
 8000d46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 137500000)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	4a95      	ldr	r2, [pc, #596]	; (8000fa4 <prepare_registers+0x2bc>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d803      	bhi.n	8000d5a <prepare_registers+0x72>
			obj->rf_div_sel = 5;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2205      	movs	r2, #5
 8000d56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 68750000)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4a92      	ldr	r2, [pc, #584]	; (8000fa8 <prepare_registers+0x2c0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d803      	bhi.n	8000d6a <prepare_registers+0x82>
			obj->rf_div_sel = 6;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2206      	movs	r2, #6
 8000d66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq <= 35000000)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	4a8f      	ldr	r2, [pc, #572]	; (8000fac <prepare_registers+0x2c4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d82f      	bhi.n	8000dd2 <prepare_registers+0xea>
			return 2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	e108      	b.n	8000f88 <prepare_registers+0x2a0>
	}
	else
	{
		if (freq >= 4400000000)
			return 1;
		if (freq >= 2200000000)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	4a86      	ldr	r2, [pc, #536]	; (8000f94 <prepare_registers+0x2ac>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d903      	bls.n	8000d86 <prepare_registers+0x9e>
			obj->rf_div_sel = 0;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 2200000000)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4a82      	ldr	r2, [pc, #520]	; (8000f94 <prepare_registers+0x2ac>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d803      	bhi.n	8000d96 <prepare_registers+0xae>
			obj->rf_div_sel = 1;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 1100000000)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	4a7f      	ldr	r2, [pc, #508]	; (8000f98 <prepare_registers+0x2b0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d803      	bhi.n	8000da6 <prepare_registers+0xbe>
			obj->rf_div_sel = 2;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2202      	movs	r2, #2
 8000da2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 550000000)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	4a7c      	ldr	r2, [pc, #496]	; (8000f9c <prepare_registers+0x2b4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d803      	bhi.n	8000db6 <prepare_registers+0xce>
			obj->rf_div_sel = 3;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq < 275000000)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	4a79      	ldr	r2, [pc, #484]	; (8000fa0 <prepare_registers+0x2b8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d803      	bhi.n	8000dc6 <prepare_registers+0xde>
			obj->rf_div_sel = 4;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (freq <= 137500000)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	4a79      	ldr	r2, [pc, #484]	; (8000fb0 <prepare_registers+0x2c8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d801      	bhi.n	8000dd2 <prepare_registers+0xea>
			return 2;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e0da      	b.n	8000f88 <prepare_registers+0x2a0>
	}

	obj->INT = (freq * (1 << obj->rf_div_sel)) / obj->pfd_freq;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000dd8:	461a      	mov	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	fa03 f202 	lsl.w	r2, r3, r2
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	811a      	strh	r2, [r3, #8]
	obj->FRAC = (((freq * (1 << obj->rf_div_sel)) % obj->pfd_freq) * 4095)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000df4:	461a      	mov	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000dfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e02:	fb02 f201 	mul.w	r2, r2, r1
 8000e06:	1a9a      	subs	r2, r3, r2
 8000e08:	4613      	mov	r3, r2
 8000e0a:	031b      	lsls	r3, r3, #12
 8000e0c:	1a9a      	subs	r2, r3, r2
			/ obj->pfd_freq;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
	obj->FRAC = (((freq * (1 << obj->rf_div_sel)) % obj->pfd_freq) * 4095)
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	815a      	strh	r2, [r3, #10]

	obj->reg[0] = SHL(obj->INT, 15) | SHL(obj->FRAC, 3);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	891b      	ldrh	r3, [r3, #8]
 8000e20:	03da      	lsls	r2, r3, #15
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	895b      	ldrh	r3, [r3, #10]
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
	obj->reg[1] = SHL(obj->phase_adj, 28) | SHL(obj->prescaler, 27)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7b1b      	ldrb	r3, [r3, #12]
 8000e32:	071a      	lsls	r2, r3, #28
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7b5b      	ldrb	r3, [r3, #13]
 8000e38:	06db      	lsls	r3, r3, #27
 8000e3a:	431a      	orrs	r2, r3
			| SHL(obj->phase, 15) | SHL(obj->MOD, 3) | 0b001;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	89db      	ldrh	r3, [r3, #14]
 8000e40:	03db      	lsls	r3, r3, #15
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	8a1b      	ldrh	r3, [r3, #16]
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	f043 0201 	orr.w	r2, r3, #1
	obj->reg[1] = SHL(obj->phase_adj, 28) | SHL(obj->prescaler, 27)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38
	obj->reg[2] = SHL(obj->low_noise_spur, 29) | SHL(obj->muxout, 26)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7c9b      	ldrb	r3, [r3, #18]
 8000e58:	075a      	lsls	r2, r3, #29
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7cdb      	ldrb	r3, [r3, #19]
 8000e5e:	069b      	lsls	r3, r3, #26
 8000e60:	431a      	orrs	r2, r3
			| SHL(obj->ref_doubler, 25) | SHL(obj->rdiv2, 24)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7d1b      	ldrb	r3, [r3, #20]
 8000e66:	065b      	lsls	r3, r3, #25
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7d5b      	ldrb	r3, [r3, #21]
 8000e6e:	061b      	lsls	r3, r3, #24
 8000e70:	431a      	orrs	r2, r3
			| SHL(obj->r_counter, 14) | SHL(obj->dbl_buf, 13)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	8adb      	ldrh	r3, [r3, #22]
 8000e76:	039b      	lsls	r3, r3, #14
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7e1b      	ldrb	r3, [r3, #24]
 8000e7e:	035b      	lsls	r3, r3, #13
 8000e80:	431a      	orrs	r2, r3
			| SHL(obj->charge_pump_current, 9) | SHL(obj->ldf, 8)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7e5b      	ldrb	r3, [r3, #25]
 8000e86:	025b      	lsls	r3, r3, #9
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7e9b      	ldrb	r3, [r3, #26]
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	431a      	orrs	r2, r3
			| SHL(obj->ldp, 7) | SHL(obj->pd_polarity, 6)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7edb      	ldrb	r3, [r3, #27]
 8000e96:	01db      	lsls	r3, r3, #7
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7f1b      	ldrb	r3, [r3, #28]
 8000e9e:	019b      	lsls	r3, r3, #6
 8000ea0:	431a      	orrs	r2, r3
			| SHL(obj->powerdown, 5) | SHL(obj->cp_three_state, 4)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7f5b      	ldrb	r3, [r3, #29]
 8000ea6:	015b      	lsls	r3, r3, #5
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7f9b      	ldrb	r3, [r3, #30]
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	431a      	orrs	r2, r3
			| SHL(obj->counter_reset, 3) | 0b010;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7fdb      	ldrb	r3, [r3, #31]
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	f043 0202 	orr.w	r2, r3, #2
	obj->reg[2] = SHL(obj->low_noise_spur, 29) | SHL(obj->muxout, 26)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	63da      	str	r2, [r3, #60]	; 0x3c
	obj->reg[3] = SHL(obj->band_mode_clksel, 23) | SHL(obj->abp, 22)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec8:	05da      	lsls	r2, r3, #23
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed0:	059b      	lsls	r3, r3, #22
 8000ed2:	431a      	orrs	r2, r3
			| SHL(obj->chg_cancel, 21) | SHL(obj->csr, 18)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000eda:	055b      	lsls	r3, r3, #21
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000ee4:	049b      	lsls	r3, r3, #18
 8000ee6:	431a      	orrs	r2, r3
			| SHL(obj->clkdiv_mode, 15) | SHL(obj->clock_divider, 3) | 0b011;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eee:	03db      	lsls	r3, r3, #15
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	f043 0203 	orr.w	r2, r3, #3
	obj->reg[3] = SHL(obj->band_mode_clksel, 23) | SHL(obj->abp, 22)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40
	obj->reg[4] = SHL(obj->feedback_sel, 23) | SHL(obj->rf_div_sel, 20)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f08:	05da      	lsls	r2, r3, #23
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000f10:	051b      	lsls	r3, r3, #20
 8000f12:	431a      	orrs	r2, r3
			| SHL(obj->band_select_clkdiv, 12) | SHL(obj->vco_pwrdown, 9)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000f1a:	031b      	lsls	r3, r3, #12
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000f24:	025b      	lsls	r3, r3, #9
 8000f26:	431a      	orrs	r2, r3
			| SHL(obj->mtld, 10) | SHL(obj->aux_outsel, 9)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	431a      	orrs	r2, r3
			| SHL(obj->aux_outena, 8) | SHL(obj->aux_pwr, 6)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f4c:	019b      	lsls	r3, r3, #6
 8000f4e:	431a      	orrs	r2, r3
			| SHL(obj->rf_ena, 5) | SHL(obj->out_pwr, 3) | 0b100;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f56:	015b      	lsls	r3, r3, #5
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	f043 0204 	orr.w	r2, r3, #4
	obj->reg[4] = SHL(obj->feedback_sel, 23) | SHL(obj->rf_div_sel, 20)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	645a      	str	r2, [r3, #68]	; 0x44
	obj->reg[5] = SHL(obj->ld_pinmode, 22) | SHL(0b11, 19) | 0b101;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000f72:	059b      	lsls	r3, r3, #22
 8000f74:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8000f78:	f043 0305 	orr.w	r3, r3, #5
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6493      	str	r3, [r2, #72]	; 0x48

	obj->freqence = freq;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	651a      	str	r2, [r3, #80]	; 0x50
	return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	832155ff 	.word	0x832155ff
 8000f98:	4190aaff 	.word	0x4190aaff
 8000f9c:	20c8557f 	.word	0x20c8557f
 8000fa0:	10642abf 	.word	0x10642abf
 8000fa4:	0832155f 	.word	0x0832155f
 8000fa8:	04190aaf 	.word	0x04190aaf
 8000fac:	02160ec0 	.word	0x02160ec0
 8000fb0:	08321560 	.word	0x08321560

08000fb4 <sendRegisterToAdf>:

void sendRegisterToAdf(adf435xSettings *obj, uint16_t reg_id)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
	obj->low_CS();
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc4:	4798      	blx	r3
	obj->delay(20);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fca:	2014      	movs	r0, #20
 8000fcc:	4798      	blx	r3

	uint8_t data = (uint8_t) (obj->reg[reg_id] >> 24);
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	330c      	adds	r3, #12
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	0e1b      	lsrs	r3, r3, #24
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	73fb      	strb	r3, [r7, #15]
	obj->send_message(&data, 1);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe4:	f107 020f 	add.w	r2, r7, #15
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4798      	blx	r3
//#warning uncomment "&"
	data = (uint8_t) (obj->reg[reg_id] >> 16);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	330c      	adds	r3, #12
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	0c1b      	lsrs	r3, r3, #16
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
	obj->send_message(&data, 1);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001004:	f107 020f 	add.w	r2, r7, #15
 8001008:	2101      	movs	r1, #1
 800100a:	4610      	mov	r0, r2
 800100c:	4798      	blx	r3

	data = (uint8_t) (obj->reg[reg_id] >> 8);
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	330c      	adds	r3, #12
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b2db      	uxtb	r3, r3
 800101e:	73fb      	strb	r3, [r7, #15]
	obj->send_message(&data, 1);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001024:	f107 020f 	add.w	r2, r7, #15
 8001028:	2101      	movs	r1, #1
 800102a:	4610      	mov	r0, r2
 800102c:	4798      	blx	r3

	data = (uint8_t) (obj->reg[reg_id]);
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	330c      	adds	r3, #12
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	73fb      	strb	r3, [r7, #15]
	obj->send_message(&data, 1);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001042:	f107 020f 	add.w	r2, r7, #15
 8001046:	2101      	movs	r1, #1
 8001048:	4610      	mov	r0, r2
 800104a:	4798      	blx	r3

	obj->high_CS();
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	4798      	blx	r3
	obj->delay(20);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	2014      	movs	r0, #20
 8001058:	4798      	blx	r3
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <updateAllRegisters>:

void updateAllRegisters(adf435xSettings *obj)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	for (int i = 5; i >= 0; i--)
 800106a:	2305      	movs	r3, #5
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e008      	b.n	8001082 <updateAllRegisters+0x20>
	{
		sendRegisterToAdf(obj, i);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	b29b      	uxth	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff9c 	bl	8000fb4 <sendRegisterToAdf>
	for (int i = 5; i >= 0; i--)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3b01      	subs	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	daf3      	bge.n	8001070 <updateAllRegisters+0xe>
	}
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <set_clock>:
		updateAllRegisters(obj);
	}
}

uint8_t set_clock(adf435xSettings *obj, uint32_t freq)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
	uint8_t status = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]

	status = prepare_registers(obj, freq);
 80010a0:	6839      	ldr	r1, [r7, #0]
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fe20 	bl	8000ce8 <prepare_registers>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]
	if (status == 0)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d102      	bne.n	80010b8 <set_clock+0x26>
	{
		updateAllRegisters(obj);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffd5 	bl	8001062 <updateAllRegisters>
	}
	return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <scan_cmd>:

static CLI_Command_t *Command_List;


uint8_t scan_cmd(const char *argv, const char *fmt)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
	return !strncmp(argv, fmt, strlen(fmt));
 80010cc:	6838      	ldr	r0, [r7, #0]
 80010ce:	f7ff f83f 	bl	8000150 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f008 f897 	bl	800920c <strncmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <cli_init>:
	}
	count = 0;
}

void cli_init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	Command_List = malloc(sizeof(CLI_Command_t) * max_command);
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <cli_init+0x1c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f007 ffbe 	bl	8009080 <malloc>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <cli_init+0x20>)
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000380 	.word	0x20000380

08001118 <registration>:

uint8_t registration(const char *command, const char *declaration, void (*function)(uint8_t argc, const char *argv[]))
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	CLI_Command_t Definition =
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	2300      	movs	r3, #0
 800112e:	833b      	strh	r3, [r7, #24]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	61fb      	str	r3, [r7, #28]
		.CLI_Command = command,
		.CLI_Command_Description = declaration,
		.CLI_Command_Length = 0,
		.CLI_Callback = (void*) function };

	if (Command_Count < MAX_COMMANDS)
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <registration+0x60>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	2b27      	cmp	r3, #39	; 0x27
 800113a:	d817      	bhi.n	800116c <registration+0x54>
	{
		Definition.CLI_Command_Length = strlen(command);
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff f807 	bl	8000150 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b29b      	uxth	r3, r3
 8001146:	833b      	strh	r3, [r7, #24]
		Command_List[Command_Count] = Definition;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <registration+0x64>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <registration+0x60>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	461c      	mov	r4, r3
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Command_Count++;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <registration+0x60>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <registration+0x60>)
 800116a:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	bf00      	nop
 8001178:	2000037c 	.word	0x2000037c
 800117c:	20000380 	.word	0x20000380

08001180 <CLI_Process_Command>:

	return 0;
}

uint8_t CLI_Process_Command(const char *cli_in_buffer)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8001186:	af00      	add	r7, sp, #0
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	6018      	str	r0, [r3, #0]
	uint8_t is_command_valid = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	const char *argv[MAX_ARGS_IN_CMD];
	uint8_t argc = CLI_Get_Argument_Length(argv);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f8a7 	bl	80012ea <CLI_Get_Argument_Length>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	f107 030f 	add.w	r3, r7, #15
 80011a4:	701a      	strb	r2, [r3, #0]

	CLI_Command_t *command_list_ptr = NULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

	/* Search for the command string in the list of registered commands. */
	for (uint16_t i = 0; i < Command_Count; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 80011b2:	e031      	b.n	8001218 <CLI_Process_Command+0x98>
	{
		command_list_ptr = &Command_List[i];
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <CLI_Process_Command+0xe8>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		uint16_t cmd_len = command_list_ptr->CLI_Command_Length;
 80011c4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80011c8:	891b      	ldrh	r3, [r3, #8]
 80011ca:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c

		if ((cli_in_buffer[cmd_len] == ' ') || (cli_in_buffer[cmd_len] == 0x00))
 80011ce:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 80011d2:	1d3a      	adds	r2, r7, #4
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b20      	cmp	r3, #32
 80011dc:	d007      	beq.n	80011ee <CLI_Process_Command+0x6e>
 80011de:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 80011e2:	1d3a      	adds	r2, r7, #4
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10f      	bne.n	800120e <CLI_Process_Command+0x8e>
		{
			if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command, cmd_len)
 80011ee:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80011f2:	6819      	ldr	r1, [r3, #0]
 80011f4:	f8b7 240c 	ldrh.w	r2, [r7, #1036]	; 0x40c
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	f008 f806 	bl	800920c <strncmp>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <CLI_Process_Command+0x8e>
					== 0)
			{
				is_command_valid = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
				/* command found break the loop */
				break;
 800120c:	e00a      	b.n	8001224 <CLI_Process_Command+0xa4>
	for (uint16_t i = 0; i < Command_Count; i++)
 800120e:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8001212:	3301      	adds	r3, #1
 8001214:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <CLI_Process_Command+0xec>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8001220:	429a      	cmp	r2, r3
 8001222:	d3c7      	bcc.n	80011b4 <CLI_Process_Command+0x34>
			}
		}
	}

	if (is_command_valid)
 8001224:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001228:	2b00      	cmp	r3, #0
 800122a:	d016      	beq.n	800125a <CLI_Process_Command+0xda>
	{
		if (command_list_ptr->CLI_Callback != NULL)
 800122c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d011      	beq.n	800125a <CLI_Process_Command+0xda>
		{
			CLI_Parse_Arguments(cli_in_buffer, &argc, argv);
 8001236:	f107 0210 	add.w	r2, r7, #16
 800123a:	f107 010f 	add.w	r1, r7, #15
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	f000 f815 	bl	8001270 <CLI_Parse_Arguments>

			command_list_ptr->CLI_Callback(argc, argv);
 8001246:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f107 020f 	add.w	r2, r7, #15
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	f107 0110 	add.w	r1, r7, #16
 8001256:	4610      	mov	r0, r2
 8001258:	4798      	blx	r3
		}
	}

	return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000380 	.word	0x20000380
 800126c:	2000037c 	.word	0x2000037c

08001270 <CLI_Parse_Arguments>:

void CLI_Parse_Arguments(const char *cli_in_buffer, uint8_t *argc,
		const char *argv[])
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
	uint8_t argc_temp = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]
	/* arg 0 is input command */
	argv[argc_temp++] = cli_in_buffer;
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	75fa      	strb	r2, [r7, #23]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	601a      	str	r2, [r3, #0]

	while (argc_temp < MAX_ARGS_IN_CMD)
 8001290:	e01e      	b.n	80012d0 <CLI_Parse_Arguments+0x60>
	{
		while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
		{
			cli_in_buffer++;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3301      	adds	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
		while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <CLI_Parse_Arguments+0x40>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b20      	cmp	r3, #32
 80012a6:	d1f4      	bne.n	8001292 <CLI_Parse_Arguments+0x22>
		}

		while ((*cli_in_buffer) == ' ')
 80012a8:	e002      	b.n	80012b0 <CLI_Parse_Arguments+0x40>
		{
			/* convert ' ' to NULL */
			//*cli_in_buffer = 0x00;
			cli_in_buffer++;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3301      	adds	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
		while ((*cli_in_buffer) == ' ')
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b20      	cmp	r3, #32
 80012b6:	d0f8      	beq.n	80012aa <CLI_Parse_Arguments+0x3a>
		}

		if (*cli_in_buffer != 0x00)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00b      	beq.n	80012d8 <CLI_Parse_Arguments+0x68>
		{
			argv[argc_temp++] = cli_in_buffer;
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	75fa      	strb	r2, [r7, #23]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	601a      	str	r2, [r3, #0]
	while (argc_temp < MAX_ARGS_IN_CMD)
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2bff      	cmp	r3, #255	; 0xff
 80012d4:	d1e0      	bne.n	8001298 <CLI_Parse_Arguments+0x28>
 80012d6:	e000      	b.n	80012da <CLI_Parse_Arguments+0x6a>
		}
		else
		{
			break;
 80012d8:	bf00      	nop
		}
	}

	*argc = argc_temp;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	7dfa      	ldrb	r2, [r7, #23]
 80012de:	701a      	strb	r2, [r3, #0]
}
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <CLI_Get_Argument_Length>:

uint8_t CLI_Get_Argument_Length(const char *arg)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
	uint8_t len = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
	while (((*arg) != 0x00) && ((*arg) != ' '))
 80012f6:	e005      	b.n	8001304 <CLI_Get_Argument_Length+0x1a>
	{
		arg++;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3301      	adds	r3, #1
 80012fc:	607b      	str	r3, [r7, #4]
		len++;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
	while (((*arg) != 0x00) && ((*arg) != ' '))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <CLI_Get_Argument_Length+0x2a>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b20      	cmp	r3, #32
 8001312:	d1f1      	bne.n	80012f8 <CLI_Get_Argument_Length+0xe>
	}
	return len;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <print>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

static void print(const char *fmt, ...)
{
 8001320:	b40f      	push	{r0, r1, r2, r3}
 8001322:	b580      	push	{r7, lr}
 8001324:	b0a0      	sub	sp, #128	; 0x80
 8001326:	af00      	add	r7, sp, #0
	va_list argp;
	va_start(argp, fmt);
 8001328:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800132c:	67fb      	str	r3, [r7, #124]	; 0x7c

	char string[120];
	bzero(string, sizeof(string));
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4618      	mov	r0, r3
 8001332:	2378      	movs	r3, #120	; 0x78
 8001334:	461a      	mov	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	f007 feaa 	bl	8009090 <memset>

	if (0 < vsprintf(string, fmt, argp))
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001340:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001344:	4618      	mov	r0, r3
 8001346:	f008 fdbd 	bl	8009ec4 <vsiprintf>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	dd0a      	ble.n	8001366 <print+0x46>
	{
		CDC_Transmit_FS((uint8_t*) string, strlen(string));
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe fefc 	bl	8000150 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	b29a      	uxth	r2, r3
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f007 fa81 	bl	8008868 <CDC_Transmit_FS>
	}
	va_end(argp);
}
 8001366:	bf00      	nop
 8001368:	3780      	adds	r7, #128	; 0x80
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001370:	b004      	add	sp, #16
 8001372:	4770      	bx	lr
 8001374:	0000      	movs	r0, r0
	...

08001378 <get_message_Callback>:

static void get_message_Callback(uint8_t argc, const char *argv[])
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
	flag_reciver = 1;
 8001384:	4b38      	ldr	r3, [pc, #224]	; (8001468 <get_message_Callback+0xf0>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]

	if (scan_cmd(argv[1], "Hz"))
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3304      	adds	r3, #4
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4936      	ldr	r1, [pc, #216]	; (800146c <get_message_Callback+0xf4>)
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe95 	bl	80010c2 <scan_cmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d011      	beq.n	80013c2 <get_message_Callback+0x4a>
	{
		frequency = atof(argv[2]);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3308      	adds	r3, #8
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f007 fe3d 	bl	8009024 <atof>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fb65 	bl	8000a80 <__aeabi_d2ulz>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	492d      	ldr	r1, [pc, #180]	; (8001470 <get_message_Callback+0xf8>)
 80013bc:	e9c1 2300 	strd	r2, r3, [r1]
 80013c0:	e040      	b.n	8001444 <get_message_Callback+0xcc>
	}

	else if (scan_cmd(argv[1], "MHz"))
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	3304      	adds	r3, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	492a      	ldr	r1, [pc, #168]	; (8001474 <get_message_Callback+0xfc>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fe79 	bl	80010c2 <scan_cmd>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d016      	beq.n	8001404 <get_message_Callback+0x8c>
	{
		frequency = atof(argv[2]) * 1000000;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3308      	adds	r3, #8
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f007 fe21 	bl	8009024 <atof>
 80013e2:	a31d      	add	r3, pc, #116	; (adr r3, 8001458 <get_message_Callback+0xe0>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff f876 	bl	80004d8 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb44 	bl	8000a80 <__aeabi_d2ulz>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	491c      	ldr	r1, [pc, #112]	; (8001470 <get_message_Callback+0xf8>)
 80013fe:	e9c1 2300 	strd	r2, r3, [r1]
 8001402:	e01f      	b.n	8001444 <get_message_Callback+0xcc>
	}

	else if (scan_cmd(argv[1], "GHz"))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	491b      	ldr	r1, [pc, #108]	; (8001478 <get_message_Callback+0x100>)
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fe58 	bl	80010c2 <scan_cmd>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d015      	beq.n	8001444 <get_message_Callback+0xcc>
	{
		frequency = atof(argv[2]) * 1000000000;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3308      	adds	r3, #8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f007 fe00 	bl	8009024 <atof>
 8001424:	a30e      	add	r3, pc, #56	; (adr r3, 8001460 <get_message_Callback+0xe8>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff f855 	bl	80004d8 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb23 	bl	8000a80 <__aeabi_d2ulz>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	490c      	ldr	r1, [pc, #48]	; (8001470 <get_message_Callback+0xf8>)
 8001440:	e9c1 2300 	strd	r2, r3, [r1]
	}
	print("clock set %d", frequency);
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <get_message_Callback+0xf8>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <get_message_Callback+0x104>)
 800144c:	f7ff ff68 	bl	8001320 <print>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	00000000 	.word	0x00000000
 800145c:	412e8480 	.word	0x412e8480
 8001460:	00000000 	.word	0x00000000
 8001464:	41cdcd65 	.word	0x41cdcd65
 8001468:	200005b8 	.word	0x200005b8
 800146c:	0800c118 	.word	0x0800c118
 8001470:	20000008 	.word	0x20000008
 8001474:	0800c11c 	.word	0x0800c11c
 8001478:	0800c120 	.word	0x0800c120
 800147c:	0800c124 	.word	0x0800c124

08001480 <range_spam_Callback>:

static void range_spam_Callback(uint8_t argc, const char *argv[])
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
	if (scan_cmd(argv[1], "1"))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	3304      	adds	r3, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	492a      	ldr	r1, [pc, #168]	; (800153c <range_spam_Callback+0xbc>)
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fe14 	bl	80010c2 <scan_cmd>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d03c      	beq.n	800151a <range_spam_Callback+0x9a>
	{
		flag_start_spam = 1;
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <range_spam_Callback+0xc0>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]

		startFrequence = atof(argv[2]);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3308      	adds	r3, #8
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f007 fdb9 	bl	8009024 <atof>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fae1 	bl	8000a80 <__aeabi_d2ulz>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4920      	ldr	r1, [pc, #128]	; (8001544 <range_spam_Callback+0xc4>)
 80014c4:	e9c1 2300 	strd	r2, r3, [r1]
		frequency = startFrequence;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <range_spam_Callback+0xc4>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	491e      	ldr	r1, [pc, #120]	; (8001548 <range_spam_Callback+0xc8>)
 80014d0:	e9c1 2300 	strd	r2, r3, [r1]

		step = atof(argv[3]);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	330c      	adds	r3, #12
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f007 fda2 	bl	8009024 <atof>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff faca 	bl	8000a80 <__aeabi_d2ulz>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <range_spam_Callback+0xcc>)
 80014f2:	e9c1 2300 	strd	r2, r3, [r1]

		end = atof(argv[4]);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	3310      	adds	r3, #16
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f007 fd91 	bl	8009024 <atof>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fab9 	bl	8000a80 <__aeabi_d2ulz>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	490f      	ldr	r1, [pc, #60]	; (8001550 <range_spam_Callback+0xd0>)
 8001514:	e9c1 2300 	strd	r2, r3, [r1]
	else if (scan_cmd(argv[1], "0"))
	{
		flag_start_spam = 0;
	}

}
 8001518:	e00c      	b.n	8001534 <range_spam_Callback+0xb4>
	else if (scan_cmd(argv[1], "0"))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	3304      	adds	r3, #4
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <range_spam_Callback+0xd4>)
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fdcd 	bl	80010c2 <scan_cmd>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <range_spam_Callback+0xb4>
		flag_start_spam = 0;
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <range_spam_Callback+0xc0>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	0800c134 	.word	0x0800c134
 8001540:	200005b9 	.word	0x200005b9
 8001544:	200005c0 	.word	0x200005c0
 8001548:	20000008 	.word	0x20000008
 800154c:	200006a0 	.word	0x200006a0
 8001550:	20000630 	.word	0x20000630
 8001554:	0800c138 	.word	0x0800c138

08001558 <set_low_cs>:

static inline void set_low_cs()
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BR4;
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <set_low_cs+0x18>)
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	4a03      	ldr	r2, [pc, #12]	; (8001570 <set_low_cs+0x18>)
 8001562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001566:	6113      	str	r3, [r2, #16]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40010800 	.word	0x40010800

08001574 <set_high_cs>:

static inline void set_high_cs()
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BS4;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <set_high_cs+0x18>)
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <set_high_cs+0x18>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6113      	str	r3, [r2, #16]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40010800 	.word	0x40010800

08001590 <send_message>:

static inline void send_message(uint8_t *data, uint8_t size)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <send_message+0x24>)
 80015a8:	f003 f8b0 	bl	800470c <HAL_SPI_Transmit>
//#warning uncomment "&"
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200006a8 	.word	0x200006a8

080015b8 <set_low_cs_4350>:

static inline void set_low_cs_4350()
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BR3;
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <set_low_cs_4350+0x18>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <set_low_cs_4350+0x18>)
 80015c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015c6:	6113      	str	r3, [r2, #16]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40010800 	.word	0x40010800

080015d4 <set_high_cs_4350>:

static inline void set_high_cs_4350()
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BS3;
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <set_high_cs_4350+0x18>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <set_high_cs_4350+0x18>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6113      	str	r3, [r2, #16]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	40010800 	.word	0x40010800

080015f0 <main>:

int main(void)
{
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af04      	add	r7, sp, #16
	flag_reciver = 0;
 80015f6:	4b58      	ldr	r3, [pc, #352]	; (8001758 <main+0x168>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
	flag_start_spam = 0;
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <main+0x16c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]

	uint8_t status = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	71fb      	strb	r3, [r7, #7]

	HAL_Init();
 8001606:	f000 fb67 	bl	8001cd8 <HAL_Init>
	SystemClock_Config();
 800160a:	f000 f8dd 	bl	80017c8 <SystemClock_Config>

	MX_GPIO_Init();
 800160e:	f000 f96f 	bl	80018f0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001612:	f000 f935 	bl	8001880 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8001616:	f007 f857 	bl	80086c8 <MX_USB_DEVICE_Init>

	cli_init();
 800161a:	f7ff fd6b 	bl	80010f4 <cli_init>
	registration("clock", "", (void*) get_message_Callback);
 800161e:	4a50      	ldr	r2, [pc, #320]	; (8001760 <main+0x170>)
 8001620:	4950      	ldr	r1, [pc, #320]	; (8001764 <main+0x174>)
 8001622:	4851      	ldr	r0, [pc, #324]	; (8001768 <main+0x178>)
 8001624:	f7ff fd78 	bl	8001118 <registration>
	registration("start_spam", "", (void*) range_spam_Callback);
 8001628:	4a50      	ldr	r2, [pc, #320]	; (800176c <main+0x17c>)
 800162a:	494e      	ldr	r1, [pc, #312]	; (8001764 <main+0x174>)
 800162c:	4850      	ldr	r0, [pc, #320]	; (8001770 <main+0x180>)
 800162e:	f7ff fd73 	bl	8001118 <registration>

//****************************************************************************
	status = adf435x_init(&adf4351, ADF4351_TYPE, 50000000,
 8001632:	4b50      	ldr	r3, [pc, #320]	; (8001774 <main+0x184>)
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	4b50      	ldr	r3, [pc, #320]	; (8001778 <main+0x188>)
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	4b50      	ldr	r3, [pc, #320]	; (800177c <main+0x18c>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	4b50      	ldr	r3, [pc, #320]	; (8001780 <main+0x190>)
 8001640:	4a50      	ldr	r2, [pc, #320]	; (8001784 <main+0x194>)
 8001642:	2101      	movs	r1, #1
 8001644:	4850      	ldr	r0, [pc, #320]	; (8001788 <main+0x198>)
 8001646:	f7ff fa39 	bl	8000abc <adf435x_init>
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
						(void*) set_low_cs, (void*) set_high_cs,
						(void*) send_message, (void*) HAL_Delay);
	if (status == 0)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d110      	bne.n	8001676 <main+0x86>
	{
		print("adf4351 Init Succes %d \r\n", 50000000);
 8001654:	494b      	ldr	r1, [pc, #300]	; (8001784 <main+0x194>)
 8001656:	484d      	ldr	r0, [pc, #308]	; (800178c <main+0x19c>)
 8001658:	f7ff fe62 	bl	8001320 <print>
		status = set_clock(&adf4351, 100000000);
 800165c:	494c      	ldr	r1, [pc, #304]	; (8001790 <main+0x1a0>)
 800165e:	484a      	ldr	r0, [pc, #296]	; (8001788 <main+0x198>)
 8001660:	f7ff fd17 	bl	8001092 <set_clock>
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
		if (status == 0)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <main+0x86>
			print("adf4351 set clock - %d \r\n", 100000000);
 800166e:	4948      	ldr	r1, [pc, #288]	; (8001790 <main+0x1a0>)
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <main+0x1a4>)
 8001672:	f7ff fe55 	bl	8001320 <print>
	}
//****************************************************************************
	status = adf435x_init(&adf4350, ADF4350_TYPE, 27000000,
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <main+0x184>)
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <main+0x188>)
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	4b46      	ldr	r3, [pc, #280]	; (8001798 <main+0x1a8>)
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <main+0x1ac>)
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <main+0x1b0>)
 8001686:	2100      	movs	r1, #0
 8001688:	4846      	ldr	r0, [pc, #280]	; (80017a4 <main+0x1b4>)
 800168a:	f7ff fa17 	bl	8000abc <adf435x_init>
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
						(void*) set_low_cs_4350, (void*) set_high_cs_4350,
						(void*) send_message, (void*) HAL_Delay);
	if (status == 0)
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d110      	bne.n	80016ba <main+0xca>
	{
		print("adf4350 Init Succes %d \r\n", 27000000);
 8001698:	4941      	ldr	r1, [pc, #260]	; (80017a0 <main+0x1b0>)
 800169a:	4843      	ldr	r0, [pc, #268]	; (80017a8 <main+0x1b8>)
 800169c:	f7ff fe40 	bl	8001320 <print>
		status = set_clock(&adf4350, 170000000);
 80016a0:	4942      	ldr	r1, [pc, #264]	; (80017ac <main+0x1bc>)
 80016a2:	4840      	ldr	r0, [pc, #256]	; (80017a4 <main+0x1b4>)
 80016a4:	f7ff fcf5 	bl	8001092 <set_clock>
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
		if (status == 0)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <main+0xca>
			print("adf4350 set clock - %d \r\n", 170000000);
 80016b2:	493e      	ldr	r1, [pc, #248]	; (80017ac <main+0x1bc>)
 80016b4:	483e      	ldr	r0, [pc, #248]	; (80017b0 <main+0x1c0>)
 80016b6:	f7ff fe33 	bl	8001320 <print>



	while (1)
	{
		if (flag_reciver)
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <main+0x168>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <main+0xe8>
		{
			flag_reciver = 0;
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <main+0x168>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
			set_clock(&adf4351, frequency);
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <main+0x1c4>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	4613      	mov	r3, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	482d      	ldr	r0, [pc, #180]	; (8001788 <main+0x198>)
 80016d4:	f7ff fcdd 	bl	8001092 <set_clock>
		}

		if (flag_start_spam)
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <main+0x16c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d027      	beq.n	8001730 <main+0x140>
		{
			frequency += step;
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <main+0x1c4>)
 80016e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e6:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <main+0x1c8>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	1884      	adds	r4, r0, r2
 80016ee:	eb41 0503 	adc.w	r5, r1, r3
 80016f2:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <main+0x1c4>)
 80016f4:	e9c3 4500 	strd	r4, r5, [r3]

			if (frequency >= end)
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <main+0x1c4>)
 80016fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <main+0x1cc>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	4299      	cmp	r1, r3
 8001706:	bf08      	it	eq
 8001708:	4290      	cmpeq	r0, r2
 800170a:	d305      	bcc.n	8001718 <main+0x128>
			{
				frequency = startFrequence;
 800170c:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <main+0x1d0>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	4928      	ldr	r1, [pc, #160]	; (80017b4 <main+0x1c4>)
 8001714:	e9c1 2300 	strd	r2, r3, [r1]
			}
			set_clock(&adf4351, frequency);
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <main+0x1c4>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	4613      	mov	r3, r2
 8001720:	4619      	mov	r1, r3
 8001722:	4819      	ldr	r0, [pc, #100]	; (8001788 <main+0x198>)
 8001724:	f7ff fcb5 	bl	8001092 <set_clock>
			HAL_Delay(200);
 8001728:	20c8      	movs	r0, #200	; 0xc8
 800172a:	f000 fb37 	bl	8001d9c <HAL_Delay>
 800172e:	e7c4      	b.n	80016ba <main+0xca>
		}
		else
		{
			GPIOC->BSRR |= GPIO_BSRR_BS13;
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <main+0x1d4>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <main+0x1d4>)
 8001736:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800173a:	6113      	str	r3, [r2, #16]
			HAL_Delay(100);
 800173c:	2064      	movs	r0, #100	; 0x64
 800173e:	f000 fb2d 	bl	8001d9c <HAL_Delay>
			GPIOC->BSRR |= GPIO_BSRR_BR13;
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <main+0x1d4>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <main+0x1d4>)
 8001748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800174c:	6113      	str	r3, [r2, #16]
			HAL_Delay(500);
 800174e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001752:	f000 fb23 	bl	8001d9c <HAL_Delay>
		if (flag_reciver)
 8001756:	e7b0      	b.n	80016ba <main+0xca>
 8001758:	200005b8 	.word	0x200005b8
 800175c:	200005b9 	.word	0x200005b9
 8001760:	08001379 	.word	0x08001379
 8001764:	0800c13c 	.word	0x0800c13c
 8001768:	0800c140 	.word	0x0800c140
 800176c:	08001481 	.word	0x08001481
 8001770:	0800c148 	.word	0x0800c148
 8001774:	08001d9d 	.word	0x08001d9d
 8001778:	08001591 	.word	0x08001591
 800177c:	08001575 	.word	0x08001575
 8001780:	08001559 	.word	0x08001559
 8001784:	02faf080 	.word	0x02faf080
 8001788:	200005c8 	.word	0x200005c8
 800178c:	0800c154 	.word	0x0800c154
 8001790:	05f5e100 	.word	0x05f5e100
 8001794:	0800c170 	.word	0x0800c170
 8001798:	080015d5 	.word	0x080015d5
 800179c:	080015b9 	.word	0x080015b9
 80017a0:	019bfcc0 	.word	0x019bfcc0
 80017a4:	20000638 	.word	0x20000638
 80017a8:	0800c18c 	.word	0x0800c18c
 80017ac:	0a21fe80 	.word	0x0a21fe80
 80017b0:	0800c1a8 	.word	0x0800c1a8
 80017b4:	20000008 	.word	0x20000008
 80017b8:	200006a0 	.word	0x200006a0
 80017bc:	20000630 	.word	0x20000630
 80017c0:	200005c0 	.word	0x200005c0
 80017c4:	40011000 	.word	0x40011000

080017c8 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b094      	sub	sp, #80	; 0x50
 80017cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80017ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d2:	2228      	movs	r2, #40	; 0x28
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f007 fc5a 	bl	8009090 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
	{ 0 };

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001806:	2301      	movs	r3, #1
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180a:	2302      	movs	r3, #2
 800180c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800180e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001812:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001814:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001818:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181e:	4618      	mov	r0, r3
 8001820:	f002 fa50 	bl	8003cc4 <HAL_RCC_OscConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800182a:	f000 f8c1 	bl	80019b0 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800182e:	230f      	movs	r3, #15
 8001830:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2101      	movs	r1, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fcba 	bl	80041c4 <HAL_RCC_ClockConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8001856:	f000 f8ab 	bl	80019b0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800185a:	2310      	movs	r3, #16
 800185c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800185e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001862:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fe16 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8001872:	f000 f89d 	bl	80019b0 <Error_Handler>
	}
}
 8001876:	bf00      	nop
 8001878:	3750      	adds	r7, #80	; 0x50
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_SPI1_Init+0x68>)
 8001886:	4a19      	ldr	r2, [pc, #100]	; (80018ec <MX_SPI1_Init+0x6c>)
 8001888:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_SPI1_Init+0x68>)
 800188c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001890:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_SPI1_Init+0x68>)
 8001894:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001898:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_SPI1_Init+0x68>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_SPI1_Init+0x68>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_SPI1_Init+0x68>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_SPI1_Init+0x68>)
 80018ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_SPI1_Init+0x68>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_SPI1_Init+0x68>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_SPI1_Init+0x68>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <MX_SPI1_Init+0x68>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_SPI1_Init+0x68>)
 80018ce:	220a      	movs	r2, #10
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_SPI1_Init+0x68>)
 80018d4:	f002 fe96 	bl	8004604 <HAL_SPI_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_SPI1_Init+0x62>
	{
		Error_Handler();
 80018de:	f000 f867 	bl	80019b0 <Error_Handler>
	}
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200006a8 	.word	0x200006a8
 80018ec:	40013000 	.word	0x40013000

080018f0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <MX_GPIO_Init+0xb4>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <MX_GPIO_Init+0xb4>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <MX_GPIO_Init+0xb4>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <MX_GPIO_Init+0xb4>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <MX_GPIO_Init+0xb4>)
 8001922:	f043 0320 	orr.w	r3, r3, #32
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <MX_GPIO_Init+0xb4>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_GPIO_Init+0xb4>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <MX_GPIO_Init+0xb4>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_GPIO_Init+0xb4>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001952:	4815      	ldr	r0, [pc, #84]	; (80019a8 <MX_GPIO_Init+0xb8>)
 8001954:	f000 fcd8 	bl	8002308 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2110      	movs	r1, #16
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <MX_GPIO_Init+0xbc>)
 800195e:	f000 fcd3 	bl	8002308 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001966:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2302      	movs	r3, #2
 8001972:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	4619      	mov	r1, r3
 800197a:	480b      	ldr	r0, [pc, #44]	; (80019a8 <MX_GPIO_Init+0xb8>)
 800197c:	f000 fb40 	bl	8002000 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001980:	2310      	movs	r3, #16
 8001982:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2302      	movs	r3, #2
 800198e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_GPIO_Init+0xbc>)
 8001998:	f000 fb32 	bl	8002000 <HAL_GPIO_Init>

}
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40010800 	.word	0x40010800

080019b0 <Error_Handler>:

void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019b8:	e7fe      	b.n	80019b8 <Error_Handler+0x8>
	...

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6193      	str	r3, [r2, #24]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_MspInit+0x5c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_MspInit+0x5c>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_MspInit+0x60>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_MspInit+0x60>)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000

08001a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_SPI_MspInit+0x70>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d123      	bne.n	8001a88 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_SPI_MspInit+0x74>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <HAL_SPI_MspInit+0x74>)
 8001a46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_SPI_MspInit+0x74>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_SPI_MspInit+0x74>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_SPI_MspInit+0x74>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_SPI_MspInit+0x74>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a70:	23a0      	movs	r3, #160	; 0xa0
 8001a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4619      	mov	r1, r3
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_SPI_MspInit+0x78>)
 8001a84:	f000 fabc 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a88:	bf00      	nop
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40013000 	.word	0x40013000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010800 	.word	0x40010800

08001a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <NMI_Handler+0x4>

08001aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <MemManage_Handler+0x4>

08001aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae2:	f000 f93f 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001af2:	f000 fd52 	bl	800259a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000e20 	.word	0x20000e20

08001b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	return 1;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <_kill>:

int _kill(int pid, int sig)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b18:	f007 fa88 	bl	800902c <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2216      	movs	r2, #22
 8001b20:	601a      	str	r2, [r3, #0]
	return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_exit>:

void _exit (int status)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b36:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffe7 	bl	8001b0e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b40:	e7fe      	b.n	8001b40 <_exit+0x12>

08001b42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e00a      	b.n	8001b6a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b54:	f3af 8000 	nop.w
 8001b58:	4601      	mov	r1, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbf0      	blt.n	8001b54 <_read+0x12>
	}

return len;
 8001b72:	687b      	ldr	r3, [r7, #4]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e009      	b.n	8001ba2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	60ba      	str	r2, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbf1      	blt.n	8001b8e <_write+0x12>
	}
	return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_close>:

int _close(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bda:	605a      	str	r2, [r3, #4]
	return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <_isatty>:

int _isatty(int file)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
	return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f007 f9f2 	bl	800902c <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20005000 	.word	0x20005000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	20000384 	.word	0x20000384
 8001c7c:	20001120 	.word	0x20001120

08001c80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8e:	490d      	ldr	r1, [pc, #52]	; (8001cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c94:	e002      	b.n	8001c9c <LoopCopyDataInit>

08001c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9a:	3304      	adds	r3, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca0:	d3f9      	bcc.n	8001c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca4:	4c0a      	ldr	r4, [pc, #40]	; (8001cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca8:	e001      	b.n	8001cae <LoopFillZerobss>

08001caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cac:	3204      	adds	r2, #4

08001cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb0:	d3fb      	bcc.n	8001caa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cb2:	f7ff ffe5 	bl	8001c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f007 f9bf 	bl	8009038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cba:	f7ff fc99 	bl	80015f0 <main>
  bx lr
 8001cbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8001cc8:	0800c66c 	.word	0x0800c66c
  ldr r2, =_sbss
 8001ccc:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8001cd0:	2000111c 	.word	0x2000111c

08001cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_2_IRQHandler>
	...

08001cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_Init+0x28>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <HAL_Init+0x28>)
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 f947 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff fe62 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f95f 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 f927 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000010 	.word	0x20000010
 8001d5c:	20000018 	.word	0x20000018
 8001d60:	20000014 	.word	0x20000014

08001d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_IncTick+0x1c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_IncTick+0x20>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a03      	ldr	r2, [pc, #12]	; (8001d84 <HAL_IncTick+0x20>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000018 	.word	0x20000018
 8001d84:	20000700 	.word	0x20000700

08001d88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <HAL_GetTick+0x10>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000700 	.word	0x20000700

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffe0 	bl	8001d88 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000018 	.word	0x20000018

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4906      	ldr	r1, [pc, #24]	; (8001e7c <__NVIC_EnableIRQ+0x34>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff90 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff2d 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff42 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff90 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5f 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff35 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffa2 	bl	8001f38 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b08b      	sub	sp, #44	; 0x2c
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	e169      	b.n	80022e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002014:	2201      	movs	r2, #1
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 8158 	bne.w	80022e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a9a      	ldr	r2, [pc, #616]	; (80022a0 <HAL_GPIO_Init+0x2a0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d05e      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 800203c:	4a98      	ldr	r2, [pc, #608]	; (80022a0 <HAL_GPIO_Init+0x2a0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d875      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 8002042:	4a98      	ldr	r2, [pc, #608]	; (80022a4 <HAL_GPIO_Init+0x2a4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d058      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 8002048:	4a96      	ldr	r2, [pc, #600]	; (80022a4 <HAL_GPIO_Init+0x2a4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d86f      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 800204e:	4a96      	ldr	r2, [pc, #600]	; (80022a8 <HAL_GPIO_Init+0x2a8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d052      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 8002054:	4a94      	ldr	r2, [pc, #592]	; (80022a8 <HAL_GPIO_Init+0x2a8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d869      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 800205a:	4a94      	ldr	r2, [pc, #592]	; (80022ac <HAL_GPIO_Init+0x2ac>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d04c      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 8002060:	4a92      	ldr	r2, [pc, #584]	; (80022ac <HAL_GPIO_Init+0x2ac>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d863      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 8002066:	4a92      	ldr	r2, [pc, #584]	; (80022b0 <HAL_GPIO_Init+0x2b0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d046      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 800206c:	4a90      	ldr	r2, [pc, #576]	; (80022b0 <HAL_GPIO_Init+0x2b0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d85d      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 8002072:	2b12      	cmp	r3, #18
 8002074:	d82a      	bhi.n	80020cc <HAL_GPIO_Init+0xcc>
 8002076:	2b12      	cmp	r3, #18
 8002078:	d859      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 800207a:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <HAL_GPIO_Init+0x80>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	080020fb 	.word	0x080020fb
 8002084:	080020d5 	.word	0x080020d5
 8002088:	080020e7 	.word	0x080020e7
 800208c:	08002129 	.word	0x08002129
 8002090:	0800212f 	.word	0x0800212f
 8002094:	0800212f 	.word	0x0800212f
 8002098:	0800212f 	.word	0x0800212f
 800209c:	0800212f 	.word	0x0800212f
 80020a0:	0800212f 	.word	0x0800212f
 80020a4:	0800212f 	.word	0x0800212f
 80020a8:	0800212f 	.word	0x0800212f
 80020ac:	0800212f 	.word	0x0800212f
 80020b0:	0800212f 	.word	0x0800212f
 80020b4:	0800212f 	.word	0x0800212f
 80020b8:	0800212f 	.word	0x0800212f
 80020bc:	0800212f 	.word	0x0800212f
 80020c0:	0800212f 	.word	0x0800212f
 80020c4:	080020dd 	.word	0x080020dd
 80020c8:	080020f1 	.word	0x080020f1
 80020cc:	4a79      	ldr	r2, [pc, #484]	; (80022b4 <HAL_GPIO_Init+0x2b4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020d2:	e02c      	b.n	800212e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	623b      	str	r3, [r7, #32]
          break;
 80020da:	e029      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	3304      	adds	r3, #4
 80020e2:	623b      	str	r3, [r7, #32]
          break;
 80020e4:	e024      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	3308      	adds	r3, #8
 80020ec:	623b      	str	r3, [r7, #32]
          break;
 80020ee:	e01f      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	330c      	adds	r3, #12
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e01a      	b.n	8002130 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002102:	2304      	movs	r3, #4
 8002104:	623b      	str	r3, [r7, #32]
          break;
 8002106:	e013      	b.n	8002130 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002110:	2308      	movs	r3, #8
 8002112:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	611a      	str	r2, [r3, #16]
          break;
 800211a:	e009      	b.n	8002130 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800211c:	2308      	movs	r3, #8
 800211e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	615a      	str	r2, [r3, #20]
          break;
 8002126:	e003      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x130>
          break;
 800212e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2bff      	cmp	r3, #255	; 0xff
 8002134:	d801      	bhi.n	800213a <HAL_GPIO_Init+0x13a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	e001      	b.n	800213e <HAL_GPIO_Init+0x13e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3304      	adds	r3, #4
 800213e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2bff      	cmp	r3, #255	; 0xff
 8002144:	d802      	bhi.n	800214c <HAL_GPIO_Init+0x14c>
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	e002      	b.n	8002152 <HAL_GPIO_Init+0x152>
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	3b08      	subs	r3, #8
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	210f      	movs	r1, #15
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	401a      	ands	r2, r3
 8002164:	6a39      	ldr	r1, [r7, #32]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	431a      	orrs	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80b1 	beq.w	80022e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002180:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002198:	4a48      	ldr	r2, [pc, #288]	; (80022bc <HAL_GPIO_Init+0x2bc>)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a40      	ldr	r2, [pc, #256]	; (80022c0 <HAL_GPIO_Init+0x2c0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <HAL_GPIO_Init+0x1ec>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3f      	ldr	r2, [pc, #252]	; (80022c4 <HAL_GPIO_Init+0x2c4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00d      	beq.n	80021e8 <HAL_GPIO_Init+0x1e8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3e      	ldr	r2, [pc, #248]	; (80022c8 <HAL_GPIO_Init+0x2c8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <HAL_GPIO_Init+0x1e4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3d      	ldr	r2, [pc, #244]	; (80022cc <HAL_GPIO_Init+0x2cc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_GPIO_Init+0x1e0>
 80021dc:	2303      	movs	r3, #3
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021ec:	2300      	movs	r3, #0
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021fe:	492f      	ldr	r1, [pc, #188]	; (80022bc <HAL_GPIO_Init+0x2bc>)
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	492c      	ldr	r1, [pc, #176]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	43db      	mvns	r3, r3
 800222e:	4928      	ldr	r1, [pc, #160]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002230:	4013      	ands	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4922      	ldr	r1, [pc, #136]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	43db      	mvns	r3, r3
 8002256:	491e      	ldr	r1, [pc, #120]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002258:	4013      	ands	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4918      	ldr	r1, [pc, #96]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	43db      	mvns	r3, r3
 800227e:	4914      	ldr	r1, [pc, #80]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002280:	4013      	ands	r3, r2
 8002282:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d021      	beq.n	80022d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	490e      	ldr	r1, [pc, #56]	; (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
 800229c:	e021      	b.n	80022e2 <HAL_GPIO_Init+0x2e2>
 800229e:	bf00      	nop
 80022a0:	10320000 	.word	0x10320000
 80022a4:	10310000 	.word	0x10310000
 80022a8:	10220000 	.word	0x10220000
 80022ac:	10210000 	.word	0x10210000
 80022b0:	10120000 	.word	0x10120000
 80022b4:	10110000 	.word	0x10110000
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40010800 	.word	0x40010800
 80022c4:	40010c00 	.word	0x40010c00
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40011400 	.word	0x40011400
 80022d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_GPIO_Init+0x304>)
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	43db      	mvns	r3, r3
 80022dc:	4909      	ldr	r1, [pc, #36]	; (8002304 <HAL_GPIO_Init+0x304>)
 80022de:	4013      	ands	r3, r2
 80022e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	3301      	adds	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f47f ae8e 	bne.w	8002014 <HAL_GPIO_Init+0x14>
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	372c      	adds	r7, #44	; 0x2c
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	611a      	str	r2, [r3, #16]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233a:	b08b      	sub	sp, #44	; 0x2c
 800233c:	af06      	add	r7, sp, #24
 800233e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0fd      	b.n	8002546 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f006 fbb6 	bl	8008ad0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2203      	movs	r2, #3
 8002368:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f002 fbd3 	bl	8004b1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	687e      	ldr	r6, [r7, #4]
 800237e:	466d      	mov	r5, sp
 8002380:	f106 0410 	add.w	r4, r6, #16
 8002384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	602b      	str	r3, [r5, #0]
 800238c:	1d33      	adds	r3, r6, #4
 800238e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002390:	6838      	ldr	r0, [r7, #0]
 8002392:	f002 fb9d 	bl	8004ad0 <USB_CoreInit>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0ce      	b.n	8002546 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 fbce 	bl	8004b50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e04c      	b.n	8002454 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	3301      	adds	r3, #1
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	b298      	uxth	r0, r3
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	3336      	adds	r3, #54	; 0x36
 80023f8:	4602      	mov	r2, r0
 80023fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	3303      	adds	r3, #3
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	440b      	add	r3, r1
 8002420:	3338      	adds	r3, #56	; 0x38
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	333c      	adds	r3, #60	; 0x3c
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	3340      	adds	r3, #64	; 0x40
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	3301      	adds	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	d3ad      	bcc.n	80023ba <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	e044      	b.n	80024ee <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	3301      	adds	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d3b5      	bcc.n	8002464 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	687e      	ldr	r6, [r7, #4]
 8002500:	466d      	mov	r5, sp
 8002502:	f106 0410 	add.w	r4, r6, #16
 8002506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	602b      	str	r3, [r5, #0]
 800250e:	1d33      	adds	r3, r6, #4
 8002510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002512:	6838      	ldr	r0, [r7, #0]
 8002514:	f002 fb28 	bl	8004b68 <USB_DevInit>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00d      	b.n	8002546 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f004 fc99 	bl	8006e76 <USB_DevDisconnect>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800254e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_PCD_Start+0x16>
 8002560:	2302      	movs	r3, #2
 8002562:	e016      	b.n	8002592 <HAL_PCD_Start+0x44>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f002 fabd 	bl	8004af0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002576:	2101      	movs	r1, #1
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f006 fd1c 	bl	8008fb6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f004 fc6d 	bl	8006e62 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b088      	sub	sp, #32
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fc6f 	bl	8006e8a <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b6:	d102      	bne.n	80025be <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 fb61 	bl	8002c80 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 fc61 	bl	8006e8a <USB_ReadInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d112      	bne.n	80025fa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e6:	b292      	uxth	r2, r2
 80025e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f006 faea 	bl	8008bc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025f2:	2100      	movs	r1, #0
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f925 	bl	8002844 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fc43 	bl	8006e8a <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800260e:	d10b      	bne.n	8002628 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002622:	b292      	uxth	r2, r2
 8002624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f004 fc2c 	bl	8006e8a <USB_ReadInterrupts>
 8002632:	4603      	mov	r3, r0
 8002634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263c:	d10b      	bne.n	8002656 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002650:	b292      	uxth	r2, r2
 8002652:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f004 fc15 	bl	8006e8a <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266a:	d126      	bne.n	80026ba <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002674:	b29a      	uxth	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0204 	bic.w	r2, r2, #4
 800267e:	b292      	uxth	r2, r2
 8002680:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0208 	bic.w	r2, r2, #8
 8002696:	b292      	uxth	r2, r2
 8002698:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f006 facb 	bl	8008c38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026b4:	b292      	uxth	r2, r2
 80026b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 fbe3 	bl	8006e8a <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ce:	f040 8084 	bne.w	80027da <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	77fb      	strb	r3, [r7, #31]
 80026d6:	e011      	b.n	80026fc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	7ffb      	ldrb	r3, [r7, #31]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	441a      	add	r2, r3
 80026e4:	7ffb      	ldrb	r3, [r7, #31]
 80026e6:	8812      	ldrh	r2, [r2, #0]
 80026e8:	b292      	uxth	r2, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	f107 0120 	add.w	r1, r7, #32
 80026f0:	440b      	add	r3, r1
 80026f2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80026f6:	7ffb      	ldrb	r3, [r7, #31]
 80026f8:	3301      	adds	r3, #1
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	7ffb      	ldrb	r3, [r7, #31]
 80026fe:	2b07      	cmp	r3, #7
 8002700:	d9ea      	bls.n	80026d8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	b292      	uxth	r2, r2
 8002716:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002722:	b29a      	uxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	b292      	uxth	r2, r2
 800272e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002732:	bf00      	nop
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800273c:	b29b      	uxth	r3, r3
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f6      	beq.n	8002734 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800274e:	b29a      	uxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002758:	b292      	uxth	r2, r2
 800275a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800275e:	2300      	movs	r3, #0
 8002760:	77fb      	strb	r3, [r7, #31]
 8002762:	e010      	b.n	8002786 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002764:	7ffb      	ldrb	r3, [r7, #31]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	4611      	mov	r1, r2
 800276c:	7ffa      	ldrb	r2, [r7, #31]
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	440a      	add	r2, r1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	f107 0120 	add.w	r1, r7, #32
 8002778:	440b      	add	r3, r1
 800277a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800277e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002780:	7ffb      	ldrb	r3, [r7, #31]
 8002782:	3301      	adds	r3, #1
 8002784:	77fb      	strb	r3, [r7, #31]
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	2b07      	cmp	r3, #7
 800278a:	d9eb      	bls.n	8002764 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002794:	b29a      	uxth	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0208 	orr.w	r2, r2, #8
 800279e:	b292      	uxth	r2, r2
 80027a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b6:	b292      	uxth	r2, r2
 80027b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0204 	orr.w	r2, r2, #4
 80027ce:	b292      	uxth	r2, r2
 80027d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f006 fa15 	bl	8008c04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 fb53 	bl	8006e8a <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ee:	d10e      	bne.n	800280e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002802:	b292      	uxth	r2, r2
 8002804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f006 f9ce 	bl	8008baa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f004 fb39 	bl	8006e8a <USB_ReadInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002822:	d10b      	bne.n	800283c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002836:	b292      	uxth	r2, r2
 8002838:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800283c:	bf00      	nop
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_PCD_SetAddress+0x1a>
 800285a:	2302      	movs	r3, #2
 800285c:	e013      	b.n	8002886 <HAL_PCD_SetAddress+0x42>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f004 fae0 	bl	8006e3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	4608      	mov	r0, r1
 8002898:	4611      	mov	r1, r2
 800289a:	461a      	mov	r2, r3
 800289c:	4603      	mov	r3, r0
 800289e:	70fb      	strb	r3, [r7, #3]
 80028a0:	460b      	mov	r3, r1
 80028a2:	803b      	strh	r3, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	da0e      	bge.n	80028d2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	705a      	strb	r2, [r3, #1]
 80028d0:	e00e      	b.n	80028f0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 0207 	and.w	r2, r3, #7
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028fc:	883a      	ldrh	r2, [r7, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	78ba      	ldrb	r2, [r7, #2]
 8002906:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	785b      	ldrb	r3, [r3, #1]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800291a:	78bb      	ldrb	r3, [r7, #2]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d102      	bne.n	8002926 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_PCD_EP_Open+0xa6>
 8002930:	2302      	movs	r3, #2
 8002932:	e00e      	b.n	8002952 <HAL_PCD_EP_Open+0xc4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68f9      	ldr	r1, [r7, #12]
 8002942:	4618      	mov	r0, r3
 8002944:	f002 f930 	bl	8004ba8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002950:	7afb      	ldrb	r3, [r7, #11]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800296a:	2b00      	cmp	r3, #0
 800296c:	da0e      	bge.n	800298c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	705a      	strb	r2, [r3, #1]
 800298a:	e00e      	b.n	80029aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 0207 	and.w	r2, r3, #7
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_PCD_EP_Close+0x6a>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e00e      	b.n	80029e2 <HAL_PCD_EP_Close+0x88>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 fc52 	bl	800527c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	460b      	mov	r3, r1
 80029f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fa:	7afb      	ldrb	r3, [r7, #11]
 80029fc:	f003 0207 	and.w	r2, r3, #7
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2200      	movs	r2, #0
 8002a28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a36:	7afb      	ldrb	r3, [r7, #11]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d106      	bne.n	8002a4e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6979      	ldr	r1, [r7, #20]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 fe04 	bl	8005654 <USB_EPStartXfer>
 8002a4c:	e005      	b.n	8002a5a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6979      	ldr	r1, [r7, #20]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 fdfd 	bl	8005654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 0207 	and.w	r2, r3, #7
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2201      	movs	r2, #1
 8002adc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aea:	7afb      	ldrb	r3, [r7, #11]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6979      	ldr	r1, [r7, #20]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 fdaa 	bl	8005654 <USB_EPStartXfer>
 8002b00:	e005      	b.n	8002b0e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 fda3 	bl	8005654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	f003 0207 	and.w	r2, r3, #7
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d901      	bls.n	8002b36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e04c      	b.n	8002bd0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da0e      	bge.n	8002b5c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]
 8002b5a:	e00c      	b.n	8002b76 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_PCD_EP_SetStall+0x7e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e01c      	b.n	8002bd0 <HAL_PCD_EP_SetStall+0xb8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 f84c 	bl	8006c42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d108      	bne.n	8002bc6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	f004 f971 	bl	8006ea8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 020f 	and.w	r2, r3, #15
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d901      	bls.n	8002bf6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e040      	b.n	8002c78 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da0e      	bge.n	8002c1c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	705a      	strb	r2, [r3, #1]
 8002c1a:	e00e      	b.n	8002c3a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 0207 	and.w	r2, r3, #7
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_PCD_EP_ClrStall+0x82>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e00e      	b.n	8002c78 <HAL_PCD_EP_ClrStall+0xa0>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f004 f83a 	bl	8006ce2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	; 0x38
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c88:	e2ec      	b.n	8003264 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c92:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002ca0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 8161 	bne.w	8002f6c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002caa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d152      	bne.n	8002d5a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc4:	81fb      	strh	r3, [r7, #14]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	89fb      	ldrh	r3, [r7, #14]
 8002ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3328      	adds	r3, #40	; 0x28
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	441a      	add	r2, r3
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002d18:	2100      	movs	r1, #0
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f005 ff2b 	bl	8008b76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 829b 	beq.w	8003264 <PCD_EP_ISR_Handler+0x5e4>
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 8296 	bne.w	8003264 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	b292      	uxth	r2, r2
 8002d4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d58:	e284      	b.n	8003264 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d034      	beq.n	8002dde <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	3306      	adds	r3, #6
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f004 f8c8 	bl	8006f48 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	823b      	strh	r3, [r7, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	8a3a      	ldrh	r2, [r7, #16]
 8002dce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f005 fea0 	bl	8008b1c <HAL_PCD_SetupStageCallback>
 8002ddc:	e242      	b.n	8003264 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dde:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f280 823e 	bge.w	8003264 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002df4:	4013      	ands	r3, r2
 8002df6:	83bb      	strh	r3, [r7, #28]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	8bba      	ldrh	r2, [r7, #28]
 8002dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e02:	b292      	uxth	r2, r2
 8002e04:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3306      	adds	r3, #6
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d019      	beq.n	8002e6e <PCD_EP_ISR_Handler+0x1ee>
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d015      	beq.n	8002e6e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	6959      	ldr	r1, [r3, #20]
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f004 f878 	bl	8006f48 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	441a      	add	r2, r3
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e66:	2100      	movs	r1, #0
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f005 fe69 	bl	8008b40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 81f2 	bne.w	8003264 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4413      	add	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d112      	bne.n	8002ece <PCD_EP_ISR_Handler+0x24e>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	801a      	strh	r2, [r3, #0]
 8002ecc:	e02f      	b.n	8002f2e <PCD_EP_ISR_Handler+0x2ae>
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ed4:	d813      	bhi.n	8002efe <PCD_EP_ISR_Handler+0x27e>
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <PCD_EP_ISR_Handler+0x270>
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	3301      	adds	r3, #1
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	029b      	lsls	r3, r3, #10
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	801a      	strh	r2, [r3, #0]
 8002efc:	e017      	b.n	8002f2e <PCD_EP_ISR_Handler+0x2ae>
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <PCD_EP_ISR_Handler+0x298>
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	3b01      	subs	r3, #1
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	029b      	lsls	r3, r3, #10
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	827b      	strh	r3, [r7, #18]
 8002f40:	8a7b      	ldrh	r3, [r7, #18]
 8002f42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f46:	827b      	strh	r3, [r7, #18]
 8002f48:	8a7b      	ldrh	r3, [r7, #18]
 8002f4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f4e:	827b      	strh	r3, [r7, #18]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	8a7b      	ldrh	r3, [r7, #18]
 8002f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8013      	strh	r3, [r2, #0]
 8002f6a:	e17b      	b.n	8003264 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f7e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f280 80ea 	bge.w	800315c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	853b      	strh	r3, [r7, #40]	; 0x28
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002fba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	7b1b      	ldrb	r3, [r3, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d122      	bne.n	800301e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	3306      	adds	r3, #6
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003000:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003002:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8087 	beq.w	8003118 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	6959      	ldr	r1, [r3, #20]
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	88da      	ldrh	r2, [r3, #6]
 8003016:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003018:	f003 ff96 	bl	8006f48 <USB_ReadPMA>
 800301c:	e07c      	b.n	8003118 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	78db      	ldrb	r3, [r3, #3]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d108      	bne.n	8003038 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003026:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003028:	461a      	mov	r2, r3
 800302a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f927 	bl	8003280 <HAL_PCD_EP_DB_Receive>
 8003032:	4603      	mov	r3, r0
 8003034:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003036:	e06f      	b.n	8003118 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	847b      	strh	r3, [r7, #34]	; 0x22
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800306c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003074:	b29b      	uxth	r3, r3
 8003076:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d021      	beq.n	80030d6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800309a:	b29b      	uxth	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	3302      	adds	r3, #2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80030bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d02a      	beq.n	8003118 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	6959      	ldr	r1, [r3, #20]
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	891a      	ldrh	r2, [r3, #8]
 80030ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030d0:	f003 ff3a 	bl	8006f48 <USB_ReadPMA>
 80030d4:	e020      	b.n	8003118 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	3306      	adds	r3, #6
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030fe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003100:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	6959      	ldr	r1, [r3, #20]
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	895a      	ldrh	r2, [r3, #10]
 8003112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003114:	f003 ff18 	bl	8006f48 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800311e:	441a      	add	r2, r3
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800312a:	441a      	add	r2, r3
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <PCD_EP_ISR_Handler+0x4c2>
 8003138:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	429a      	cmp	r2, r3
 8003140:	d206      	bcs.n	8003150 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f005 fcf9 	bl	8008b40 <HAL_PCD_DataOutStageCallback>
 800314e:	e005      	b.n	800315c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003156:	4618      	mov	r0, r3
 8003158:	f002 fa7c 	bl	8005654 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800315c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d07e      	beq.n	8003264 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003166:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003194:	843b      	strh	r3, [r7, #32]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	441a      	add	r2, r3
 80031a4:	8c3b      	ldrh	r3, [r7, #32]
 80031a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	78db      	ldrb	r3, [r3, #3]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d00c      	beq.n	80031d4 <PCD_EP_ISR_Handler+0x554>
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d146      	bne.n	8003258 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80031ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d141      	bne.n	8003258 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031dc:	b29b      	uxth	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	3302      	adds	r3, #2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031fc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	8bfb      	ldrh	r3, [r7, #30]
 8003204:	429a      	cmp	r2, r3
 8003206:	d906      	bls.n	8003216 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	8bfb      	ldrh	r3, [r7, #30]
 800320e:	1ad2      	subs	r2, r2, r3
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	619a      	str	r2, [r3, #24]
 8003214:	e002      	b.n	800321c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d106      	bne.n	8003232 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f005 fca3 	bl	8008b76 <HAL_PCD_DataInStageCallback>
 8003230:	e018      	b.n	8003264 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	8bfb      	ldrh	r3, [r7, #30]
 8003238:	441a      	add	r2, r3
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	8bfb      	ldrh	r3, [r7, #30]
 8003244:	441a      	add	r2, r3
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003250:	4618      	mov	r0, r3
 8003252:	f002 f9ff 	bl	8005654 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003256:	e005      	b.n	8003264 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003258:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800325a:	461a      	mov	r2, r3
 800325c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f91b 	bl	800349a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800326c:	b29b      	uxth	r3, r3
 800326e:	b21b      	sxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	f6ff ad0a 	blt.w	8002c8a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3738      	adds	r7, #56	; 0x38
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d07e      	beq.n	8003396 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	3302      	adds	r3, #2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	8b7b      	ldrh	r3, [r7, #26]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d306      	bcc.n	80032da <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	8b7b      	ldrh	r3, [r7, #26]
 80032d2:	1ad2      	subs	r2, r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	619a      	str	r2, [r3, #24]
 80032d8:	e002      	b.n	80032e0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2200      	movs	r2, #0
 80032de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d123      	bne.n	8003330 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	833b      	strh	r3, [r7, #24]
 8003304:	8b3b      	ldrh	r3, [r7, #24]
 8003306:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800330a:	833b      	strh	r3, [r7, #24]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	8b3b      	ldrh	r3, [r7, #24]
 800331c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332c:	b29b      	uxth	r3, r3
 800332e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01f      	beq.n	800337a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003354:	82fb      	strh	r3, [r7, #22]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	441a      	add	r2, r3
 8003364:	8afb      	ldrh	r3, [r7, #22]
 8003366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003372:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003376:	b29b      	uxth	r3, r3
 8003378:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800337a:	8b7b      	ldrh	r3, [r7, #26]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8087 	beq.w	8003490 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6959      	ldr	r1, [r3, #20]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	891a      	ldrh	r2, [r3, #8]
 800338e:	8b7b      	ldrh	r3, [r7, #26]
 8003390:	f003 fdda 	bl	8006f48 <USB_ReadPMA>
 8003394:	e07c      	b.n	8003490 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800339e:	b29b      	uxth	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	3306      	adds	r3, #6
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	8b7b      	ldrh	r3, [r7, #26]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d306      	bcc.n	80033d8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	8b7b      	ldrh	r3, [r7, #26]
 80033d0:	1ad2      	subs	r2, r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	619a      	str	r2, [r3, #24]
 80033d6:	e002      	b.n	80033de <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2200      	movs	r2, #0
 80033dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d123      	bne.n	800342e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003400:	83fb      	strh	r3, [r7, #30]
 8003402:	8bfb      	ldrh	r3, [r7, #30]
 8003404:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003408:	83fb      	strh	r3, [r7, #30]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	441a      	add	r2, r3
 8003418:	8bfb      	ldrh	r3, [r7, #30]
 800341a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d11f      	bne.n	8003478 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	83bb      	strh	r3, [r7, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	441a      	add	r2, r3
 8003462:	8bbb      	ldrh	r3, [r7, #28]
 8003464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003470:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003474:	b29b      	uxth	r3, r3
 8003476:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003478:	8b7b      	ldrh	r3, [r7, #26]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6959      	ldr	r1, [r3, #20]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	895a      	ldrh	r2, [r3, #10]
 800348a:	8b7b      	ldrh	r3, [r7, #26]
 800348c:	f003 fd5c 	bl	8006f48 <USB_ReadPMA>
    }
  }

  return count;
 8003490:	8b7b      	ldrh	r3, [r7, #26]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b0a2      	sub	sp, #136	; 0x88
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	4613      	mov	r3, r2
 80034a6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 81c7 	beq.w	8003842 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	3302      	adds	r3, #2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d907      	bls.n	80034fc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034f4:	1ad2      	subs	r2, r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	619a      	str	r2, [r3, #24]
 80034fa:	e002      	b.n	8003502 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f040 80b9 	bne.w	800367e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	785b      	ldrb	r3, [r3, #1]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d126      	bne.n	8003562 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	4413      	add	r3, r2
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	011a      	lsls	r2, r3, #4
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	4413      	add	r3, r2
 8003536:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003546:	b29a      	uxth	r2, r3
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	801a      	strh	r2, [r3, #0]
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800355a:	b29a      	uxth	r2, r3
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	801a      	strh	r2, [r3, #0]
 8003560:	e01a      	b.n	8003598 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	785b      	ldrb	r3, [r3, #1]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d116      	bne.n	8003598 <HAL_PCD_EP_DB_Transmit+0xfe>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	633b      	str	r3, [r7, #48]	; 0x30
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003578:	b29b      	uxth	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	4413      	add	r3, r2
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	011a      	lsls	r2, r3, #4
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	4413      	add	r3, r2
 800358c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	2200      	movs	r2, #0
 8003596:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d126      	bne.n	80035f4 <HAL_PCD_EP_DB_Transmit+0x15a>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	011a      	lsls	r2, r3, #4
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4413      	add	r3, r2
 80035c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035d8:	b29a      	uxth	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	801a      	strh	r2, [r3, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	e017      	b.n	8003624 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d113      	bne.n	8003624 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	4413      	add	r3, r2
 800360c:	623b      	str	r3, [r7, #32]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	011a      	lsls	r2, r3, #4
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	4413      	add	r3, r2
 8003618:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2200      	movs	r2, #0
 8003622:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	4619      	mov	r1, r3
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f005 faa3 	bl	8008b76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 82d4 	beq.w	8003be4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	827b      	strh	r3, [r7, #18]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	8a7b      	ldrh	r3, [r7, #18]
 8003668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800366c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003678:	b29b      	uxth	r3, r3
 800367a:	8013      	strh	r3, [r2, #0]
 800367c:	e2b2      	b.n	8003be4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d021      	beq.n	80036cc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	441a      	add	r2, r3
 80036b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 8286 	bne.w	8003be4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036e0:	441a      	add	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036ee:	441a      	add	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d309      	bcc.n	8003714 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6a1a      	ldr	r2, [r3, #32]
 800370a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370c:	1ad2      	subs	r2, r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	621a      	str	r2, [r3, #32]
 8003712:	e015      	b.n	8003740 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d107      	bne.n	800372c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800371c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003720:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800372a:	e009      	b.n	8003740 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2200      	movs	r2, #0
 800373e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d155      	bne.n	80037f4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003756:	b29b      	uxth	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	4413      	add	r3, r2
 800375e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	011a      	lsls	r2, r3, #4
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	4413      	add	r3, r2
 800376a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
 8003770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003772:	2b00      	cmp	r3, #0
 8003774:	d112      	bne.n	800379c <HAL_PCD_EP_DB_Transmit+0x302>
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003780:	b29a      	uxth	r2, r3
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003794:	b29a      	uxth	r2, r3
 8003796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	e047      	b.n	800382c <HAL_PCD_EP_DB_Transmit+0x392>
 800379c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379e:	2b3e      	cmp	r3, #62	; 0x3e
 80037a0:	d811      	bhi.n	80037c6 <HAL_PCD_EP_DB_Transmit+0x32c>
 80037a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80037b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b4:	3301      	adds	r3, #1
 80037b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	b29a      	uxth	r2, r3
 80037c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c2:	801a      	strh	r2, [r3, #0]
 80037c4:	e032      	b.n	800382c <HAL_PCD_EP_DB_Transmit+0x392>
 80037c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80037cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_PCD_EP_DB_Transmit+0x342>
 80037d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d8:	3b01      	subs	r3, #1
 80037da:	64bb      	str	r3, [r7, #72]	; 0x48
 80037dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037de:	b29b      	uxth	r3, r3
 80037e0:	029b      	lsls	r3, r3, #10
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f0:	801a      	strh	r2, [r3, #0]
 80037f2:	e01b      	b.n	800382c <HAL_PCD_EP_DB_Transmit+0x392>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	785b      	ldrb	r3, [r3, #1]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d117      	bne.n	800382c <HAL_PCD_EP_DB_Transmit+0x392>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	643b      	str	r3, [r7, #64]	; 0x40
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003810:	4413      	add	r3, r2
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	011a      	lsls	r2, r3, #4
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	4413      	add	r3, r2
 800381e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003826:	b29a      	uxth	r2, r3
 8003828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	6959      	ldr	r1, [r3, #20]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	891a      	ldrh	r2, [r3, #8]
 8003838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383a:	b29b      	uxth	r3, r3
 800383c:	f003 fb3f 	bl	8006ebe <USB_WritePMA>
 8003840:	e1d0      	b.n	8003be4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	3306      	adds	r3, #6
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003876:	429a      	cmp	r2, r3
 8003878:	d307      	bcc.n	800388a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003882:	1ad2      	subs	r2, r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	619a      	str	r2, [r3, #24]
 8003888:	e002      	b.n	8003890 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 80c4 	bne.w	8003a22 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d126      	bne.n	80038f0 <HAL_PCD_EP_DB_Transmit+0x456>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b6:	4413      	add	r3, r2
 80038b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	011a      	lsls	r2, r3, #4
 80038c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c2:	4413      	add	r3, r2
 80038c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80038ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	e01a      	b.n	8003926 <HAL_PCD_EP_DB_Transmit+0x48c>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d116      	bne.n	8003926 <HAL_PCD_EP_DB_Transmit+0x48c>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	677b      	str	r3, [r7, #116]	; 0x74
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800390c:	4413      	add	r3, r2
 800390e:	677b      	str	r3, [r7, #116]	; 0x74
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	011a      	lsls	r2, r3, #4
 8003916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003918:	4413      	add	r3, r2
 800391a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800391e:	673b      	str	r3, [r7, #112]	; 0x70
 8003920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003922:	2200      	movs	r2, #0
 8003924:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	67bb      	str	r3, [r7, #120]	; 0x78
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d12f      	bne.n	8003994 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003944:	b29b      	uxth	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800394c:	4413      	add	r3, r2
 800394e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	011a      	lsls	r2, r3, #4
 8003958:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800395c:	4413      	add	r3, r2
 800395e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003972:	b29a      	uxth	r2, r3
 8003974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	b29b      	uxth	r3, r3
 8003982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800398a:	b29a      	uxth	r2, r3
 800398c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003990:	801a      	strh	r2, [r3, #0]
 8003992:	e017      	b.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	785b      	ldrb	r3, [r3, #1]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d113      	bne.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x52a>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039aa:	4413      	add	r3, r2
 80039ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	011a      	lsls	r2, r3, #4
 80039b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b6:	4413      	add	r3, r2
 80039b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039c0:	2200      	movs	r2, #0
 80039c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	4619      	mov	r1, r3
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f005 f8d3 	bl	8008b76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 8104 	bne.w	8003be4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	8013      	strh	r3, [r2, #0]
 8003a20:	e0e0      	b.n	8003be4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d121      	bne.n	8003a70 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	f040 80b4 	bne.w	8003be4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a84:	441a      	add	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a92:	441a      	add	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d309      	bcc.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6a1a      	ldr	r2, [r3, #32]
 8003aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab0:	1ad2      	subs	r2, r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	621a      	str	r2, [r3, #32]
 8003ab6:	e015      	b.n	8003ae4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003ac0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ac4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ace:	e009      	b.n	8003ae4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	667b      	str	r3, [r7, #100]	; 0x64
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d155      	bne.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x704>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b06:	4413      	add	r3, r2
 8003b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	011a      	lsls	r2, r3, #4
 8003b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b12:	4413      	add	r3, r2
 8003b14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b18:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d112      	bne.n	8003b46 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b2e:	801a      	strh	r2, [r3, #0]
 8003b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b42:	801a      	strh	r2, [r3, #0]
 8003b44:	e044      	b.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b48:	2b3e      	cmp	r3, #62	; 0x3e
 8003b4a:	d811      	bhi.n	8003b70 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	657b      	str	r3, [r7, #84]	; 0x54
 8003b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5e:	3301      	adds	r3, #1
 8003b60:	657b      	str	r3, [r7, #84]	; 0x54
 8003b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	029b      	lsls	r3, r3, #10
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e02f      	b.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	657b      	str	r3, [r7, #84]	; 0x54
 8003b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b82:	3b01      	subs	r3, #1
 8003b84:	657b      	str	r3, [r7, #84]	; 0x54
 8003b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	029b      	lsls	r3, r3, #10
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	e018      	b.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	785b      	ldrb	r3, [r3, #1]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d114      	bne.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bb4:	4413      	add	r3, r2
 8003bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	011a      	lsls	r2, r3, #4
 8003bbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bc6:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6959      	ldr	r1, [r3, #20]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	895a      	ldrh	r2, [r3, #10]
 8003bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f003 f96d 	bl	8006ebe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfe:	823b      	strh	r3, [r7, #16]
 8003c00:	8a3b      	ldrh	r3, [r7, #16]
 8003c02:	f083 0310 	eor.w	r3, r3, #16
 8003c06:	823b      	strh	r3, [r7, #16]
 8003c08:	8a3b      	ldrh	r3, [r7, #16]
 8003c0a:	f083 0320 	eor.w	r3, r3, #32
 8003c0e:	823b      	strh	r3, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	8a3b      	ldrh	r3, [r7, #16]
 8003c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3788      	adds	r7, #136	; 0x88
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b087      	sub	sp, #28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	817b      	strh	r3, [r7, #10]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c50:	897b      	ldrh	r3, [r7, #10]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5c:	897b      	ldrh	r3, [r7, #10]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e009      	b.n	8003c88 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c74:	897a      	ldrh	r2, [r7, #10]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4413      	add	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2200      	movs	r2, #0
 8003c92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	80da      	strh	r2, [r3, #6]
 8003c9c:	e00b      	b.n	8003cb6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e26c      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8087 	beq.w	8003df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce4:	4b92      	ldr	r3, [pc, #584]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d00c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cf0:	4b8f      	ldr	r3, [pc, #572]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d112      	bne.n	8003d22 <HAL_RCC_OscConfig+0x5e>
 8003cfc:	4b8c      	ldr	r3, [pc, #560]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d10b      	bne.n	8003d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0a:	4b89      	ldr	r3, [pc, #548]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06c      	beq.n	8003df0 <HAL_RCC_OscConfig+0x12c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d168      	bne.n	8003df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e246      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x76>
 8003d2c:	4b80      	ldr	r3, [pc, #512]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a7f      	ldr	r2, [pc, #508]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e02e      	b.n	8003d98 <HAL_RCC_OscConfig+0xd4>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x98>
 8003d42:	4b7b      	ldr	r3, [pc, #492]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7a      	ldr	r2, [pc, #488]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b78      	ldr	r3, [pc, #480]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a77      	ldr	r2, [pc, #476]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xd4>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0xbc>
 8003d66:	4b72      	ldr	r3, [pc, #456]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a71      	ldr	r2, [pc, #452]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b6f      	ldr	r3, [pc, #444]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6e      	ldr	r2, [pc, #440]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xd4>
 8003d80:	4b6b      	ldr	r3, [pc, #428]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6a      	ldr	r2, [pc, #424]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a67      	ldr	r2, [pc, #412]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fd fff2 	bl	8001d88 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fd ffee 	bl	8001d88 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1fa      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b5d      	ldr	r3, [pc, #372]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xe4>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd ffde 	bl	8001d88 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fd ffda 	bl	8001d88 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1e6      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x10c>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d063      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfe:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e0a:	4b49      	ldr	r3, [pc, #292]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x18c>
 8003e16:	4b46      	ldr	r3, [pc, #280]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b43      	ldr	r3, [pc, #268]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x176>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1ba      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b3d      	ldr	r3, [pc, #244]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4939      	ldr	r1, [pc, #228]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e03a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fd ff93 	bl	8001d88 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e66:	f7fd ff8f 	bl	8001d88 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e19b      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4927      	ldr	r1, [pc, #156]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]
 8003e98:	e015      	b.n	8003ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9a:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <HAL_RCC_OscConfig+0x270>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd ff72 	bl	8001d88 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea8:	f7fd ff6e 	bl	8001d88 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e17a      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d03a      	beq.n	8003f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d019      	beq.n	8003f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eda:	4b17      	ldr	r3, [pc, #92]	; (8003f38 <HAL_RCC_OscConfig+0x274>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee0:	f7fd ff52 	bl	8001d88 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee8:	f7fd ff4e 	bl	8001d88 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e15a      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f06:	2001      	movs	r0, #1
 8003f08:	f000 faa8 	bl	800445c <RCC_Delay>
 8003f0c:	e01c      	b.n	8003f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <HAL_RCC_OscConfig+0x274>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f14:	f7fd ff38 	bl	8001d88 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1a:	e00f      	b.n	8003f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1c:	f7fd ff34 	bl	8001d88 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d908      	bls.n	8003f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e140      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	42420000 	.word	0x42420000
 8003f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3c:	4b9e      	ldr	r3, [pc, #632]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e9      	bne.n	8003f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80a6 	beq.w	80040a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5a:	4b97      	ldr	r3, [pc, #604]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b94      	ldr	r3, [pc, #592]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4a93      	ldr	r2, [pc, #588]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	61d3      	str	r3, [r2, #28]
 8003f72:	4b91      	ldr	r3, [pc, #580]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f82:	4b8e      	ldr	r3, [pc, #568]	; (80041bc <HAL_RCC_OscConfig+0x4f8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8e:	4b8b      	ldr	r3, [pc, #556]	; (80041bc <HAL_RCC_OscConfig+0x4f8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a8a      	ldr	r2, [pc, #552]	; (80041bc <HAL_RCC_OscConfig+0x4f8>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fd fef5 	bl	8001d88 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fd fef1 	bl	8001d88 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b64      	cmp	r3, #100	; 0x64
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0fd      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	4b81      	ldr	r3, [pc, #516]	; (80041bc <HAL_RCC_OscConfig+0x4f8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x312>
 8003fc8:	4b7b      	ldr	r3, [pc, #492]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4a7a      	ldr	r2, [pc, #488]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6213      	str	r3, [r2, #32]
 8003fd4:	e02d      	b.n	8004032 <HAL_RCC_OscConfig+0x36e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x334>
 8003fde:	4b76      	ldr	r3, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6213      	str	r3, [r2, #32]
 8003fea:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	4a72      	ldr	r2, [pc, #456]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	f023 0304 	bic.w	r3, r3, #4
 8003ff4:	6213      	str	r3, [r2, #32]
 8003ff6:	e01c      	b.n	8004032 <HAL_RCC_OscConfig+0x36e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d10c      	bne.n	800401a <HAL_RCC_OscConfig+0x356>
 8004000:	4b6d      	ldr	r3, [pc, #436]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	4a6c      	ldr	r2, [pc, #432]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6213      	str	r3, [r2, #32]
 800400c:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	4a69      	ldr	r2, [pc, #420]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6213      	str	r3, [r2, #32]
 8004018:	e00b      	b.n	8004032 <HAL_RCC_OscConfig+0x36e>
 800401a:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a66      	ldr	r2, [pc, #408]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6213      	str	r3, [r2, #32]
 8004026:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4a63      	ldr	r2, [pc, #396]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d015      	beq.n	8004066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403a:	f7fd fea5 	bl	8001d88 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	e00a      	b.n	8004058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fd fea1 	bl	8001d88 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0ab      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	4b57      	ldr	r3, [pc, #348]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ee      	beq.n	8004042 <HAL_RCC_OscConfig+0x37e>
 8004064:	e014      	b.n	8004090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7fd fe8f 	bl	8001d88 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd fe8b 	bl	8001d88 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e095      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004084:	4b4c      	ldr	r3, [pc, #304]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ee      	bne.n	800406e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4b48      	ldr	r3, [pc, #288]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4a47      	ldr	r2, [pc, #284]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8081 	beq.w	80041ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ac:	4b42      	ldr	r3, [pc, #264]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d061      	beq.n	800417c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d146      	bne.n	800414e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b3f      	ldr	r3, [pc, #252]	; (80041c0 <HAL_RCC_OscConfig+0x4fc>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fd fe5f 	bl	8001d88 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fd fe5b 	bl	8001d88 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e067      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e0:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d108      	bne.n	8004108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040f6:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	492d      	ldr	r1, [pc, #180]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004108:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a19      	ldr	r1, [r3, #32]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	430b      	orrs	r3, r1
 800411a:	4927      	ldr	r1, [pc, #156]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_RCC_OscConfig+0x4fc>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fd fe2f 	bl	8001d88 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412e:	f7fd fe2b 	bl	8001d88 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e037      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x46a>
 800414c:	e02f      	b.n	80041ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <HAL_RCC_OscConfig+0x4fc>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd fe18 	bl	8001d88 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd fe14 	bl	8001d88 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e020      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x498>
 800417a:	e018      	b.n	80041ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e013      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_OscConfig+0x4f4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	429a      	cmp	r2, r3
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40007000 	.word	0x40007000
 80041c0:	42420060 	.word	0x42420060

080041c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0d0      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d910      	bls.n	8004208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b67      	ldr	r3, [pc, #412]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 0207 	bic.w	r2, r3, #7
 80041ee:	4965      	ldr	r1, [pc, #404]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0b8      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a58      	ldr	r2, [pc, #352]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800422a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a52      	ldr	r2, [pc, #328]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004242:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004244:	4b50      	ldr	r3, [pc, #320]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	494d      	ldr	r1, [pc, #308]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d040      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d115      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e07f      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e073      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e06b      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4936      	ldr	r1, [pc, #216]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fd fd68 	bl	8001d88 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fd fd64 	bl	8001d88 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e053      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b27      	ldr	r3, [pc, #156]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d210      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 0207 	bic.w	r2, r3, #7
 80042fa:	4922      	ldr	r1, [pc, #136]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e032      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4916      	ldr	r1, [pc, #88]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	490e      	ldr	r1, [pc, #56]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004352:	f000 f821 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	490a      	ldr	r1, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x1c8>)
 8004364:	5ccb      	ldrb	r3, [r1, r3]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	4a09      	ldr	r2, [pc, #36]	; (8004390 <HAL_RCC_ClockConfig+0x1cc>)
 800436c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCC_ClockConfig+0x1d0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd fcc6 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40022000 	.word	0x40022000
 8004388:	40021000 	.word	0x40021000
 800438c:	0800c220 	.word	0x0800c220
 8004390:	20000010 	.word	0x20000010
 8004394:	20000014 	.word	0x20000014

08004398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004398:	b490      	push	{r4, r7}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800439e:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043a0:	1d3c      	adds	r4, r7, #4
 80043a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043a8:	f240 2301 	movw	r3, #513	; 0x201
 80043ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	2300      	movs	r3, #0
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043c2:	4b22      	ldr	r3, [pc, #136]	; (800444c <HAL_RCC_GetSysClockFreq+0xb4>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d002      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x40>
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d003      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0x46>
 80043d6:	e02d      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043da:	623b      	str	r3, [r7, #32]
      break;
 80043dc:	e02d      	b.n	800443a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	0c9b      	lsrs	r3, r3, #18
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043ea:	4413      	add	r3, r2
 80043ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_RCC_GetSysClockFreq+0xb4>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	0c5b      	lsrs	r3, r3, #17
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800440a:	4413      	add	r3, r2
 800440c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004410:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	4a0e      	ldr	r2, [pc, #56]	; (8004450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004416:	fb02 f203 	mul.w	r2, r2, r3
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
 8004422:	e004      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	623b      	str	r3, [r7, #32]
      break;
 8004432:	e002      	b.n	800443a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004434:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004436:	623b      	str	r3, [r7, #32]
      break;
 8004438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800443a:	6a3b      	ldr	r3, [r7, #32]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3728      	adds	r7, #40	; 0x28
 8004440:	46bd      	mov	sp, r7
 8004442:	bc90      	pop	{r4, r7}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	0800c1c4 	.word	0x0800c1c4
 800444c:	40021000 	.word	0x40021000
 8004450:	00f42400 	.word	0x00f42400
 8004454:	003d0900 	.word	0x003d0900
 8004458:	007a1200 	.word	0x007a1200

0800445c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <RCC_Delay+0x34>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <RCC_Delay+0x38>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0a5b      	lsrs	r3, r3, #9
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004478:	bf00      	nop
  }
  while (Delay --);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	60fa      	str	r2, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f9      	bne.n	8004478 <RCC_Delay+0x1c>
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr
 8004490:	20000010 	.word	0x20000010
 8004494:	10624dd3 	.word	0x10624dd3

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d07d      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044b4:	2300      	movs	r3, #0
 80044b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b8:	4b4f      	ldr	r3, [pc, #316]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10d      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b4c      	ldr	r3, [pc, #304]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	4a4b      	ldr	r2, [pc, #300]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	61d3      	str	r3, [r2, #28]
 80044d0:	4b49      	ldr	r3, [pc, #292]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044dc:	2301      	movs	r3, #1
 80044de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	4b46      	ldr	r3, [pc, #280]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d118      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ec:	4b43      	ldr	r3, [pc, #268]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a42      	ldr	r2, [pc, #264]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f8:	f7fd fc46 	bl	8001d88 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	e008      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004500:	f7fd fc42 	bl	8001d88 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e06d      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800451e:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d02e      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	429a      	cmp	r2, r3
 800453a:	d027      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004544:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004546:	4b2e      	ldr	r3, [pc, #184]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454c:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004552:	4a29      	ldr	r2, [pc, #164]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d014      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004562:	f7fd fc11 	bl	8001d88 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd fc0d 	bl	8001d88 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e036      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4917      	ldr	r1, [pc, #92]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459a:	4313      	orrs	r3, r2
 800459c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a4:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	490b      	ldr	r1, [pc, #44]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4904      	ldr	r1, [pc, #16]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40007000 	.word	0x40007000
 8004600:	42420440 	.word	0x42420440

08004604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e076      	b.n	8004704 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	d108      	bne.n	8004630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004626:	d009      	beq.n	800463c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
 800462e:	e005      	b.n	800463c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fd f9e2 	bl	8001a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	ea42 0103 	orr.w	r1, r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	0c1a      	lsrs	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f002 0204 	and.w	r2, r2, #4
 80046e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_SPI_Transmit+0x22>
 800472a:	2302      	movs	r3, #2
 800472c:	e126      	b.n	800497c <HAL_SPI_Transmit+0x270>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004736:	f7fd fb27 	bl	8001d88 <HAL_GetTick>
 800473a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d002      	beq.n	8004752 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004750:	e10b      	b.n	800496a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_SPI_Transmit+0x52>
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004762:	e102      	b.n	800496a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2203      	movs	r2, #3
 8004768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047aa:	d10f      	bne.n	80047cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d007      	beq.n	80047ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f2:	d14b      	bne.n	800488c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_SPI_Transmit+0xf6>
 80047fc:	8afb      	ldrh	r3, [r7, #22]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d13e      	bne.n	8004880 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	881a      	ldrh	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	1c9a      	adds	r2, r3, #2
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004826:	e02b      	b.n	8004880 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b02      	cmp	r3, #2
 8004834:	d112      	bne.n	800485c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	881a      	ldrh	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	1c9a      	adds	r2, r3, #2
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	86da      	strh	r2, [r3, #54]	; 0x36
 800485a:	e011      	b.n	8004880 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800485c:	f7fd fa94 	bl	8001d88 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d803      	bhi.n	8004874 <HAL_SPI_Transmit+0x168>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d102      	bne.n	800487a <HAL_SPI_Transmit+0x16e>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800487e:	e074      	b.n	800496a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1ce      	bne.n	8004828 <HAL_SPI_Transmit+0x11c>
 800488a:	e04c      	b.n	8004926 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_SPI_Transmit+0x18e>
 8004894:	8afb      	ldrh	r3, [r7, #22]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d140      	bne.n	800491c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	7812      	ldrb	r2, [r2, #0]
 80048a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048c0:	e02c      	b.n	800491c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d113      	bne.n	80048f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80048f6:	e011      	b.n	800491c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048f8:	f7fd fa46 	bl	8001d88 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d803      	bhi.n	8004910 <HAL_SPI_Transmit+0x204>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d102      	bne.n	8004916 <HAL_SPI_Transmit+0x20a>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	77fb      	strb	r3, [r7, #31]
          goto error;
 800491a:	e026      	b.n	800496a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1cd      	bne.n	80048c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f8b2 	bl	8004a94 <SPI_EndRxTxTransaction>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	e000      	b.n	800496a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004968:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800497a:	7ffb      	ldrb	r3, [r7, #31]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004994:	f7fd f9f8 	bl	8001d88 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049a4:	f7fd f9f0 	bl	8001d88 <HAL_GetTick>
 80049a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049aa:	4b39      	ldr	r3, [pc, #228]	; (8004a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	015b      	lsls	r3, r3, #5
 80049b0:	0d1b      	lsrs	r3, r3, #20
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ba:	e054      	b.n	8004a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d050      	beq.n	8004a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049c4:	f7fd f9e0 	bl	8001d88 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d902      	bls.n	80049da <SPI_WaitFlagStateUntilTimeout+0x56>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d13d      	bne.n	8004a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f2:	d111      	bne.n	8004a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fc:	d004      	beq.n	8004a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a06:	d107      	bne.n	8004a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a20:	d10f      	bne.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e017      	b.n	8004a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d19b      	bne.n	80049bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000010 	.word	0x20000010

08004a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff ff6a 	bl	8004984 <SPI_WaitFlagStateUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e000      	b.n	8004ac8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	f107 0014 	add.w	r0, r7, #20
 8004ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	b004      	add	sp, #16
 8004aee:	4770      	bx	lr

08004af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b24:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	43db      	mvns	r3, r3
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b68:	b084      	sub	sp, #16
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	f107 0014 	add.w	r0, r7, #20
 8004b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	b004      	add	sp, #16
 8004ba6:	4770      	bx	lr

08004ba8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b09b      	sub	sp, #108	; 0x6c
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	78db      	ldrb	r3, [r3, #3]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d81f      	bhi.n	8004c1a <USB_ActivateEndpoint+0x72>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <USB_ActivateEndpoint+0x38>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c23 	.word	0x08004c23
 8004bec:	08004bff 	.word	0x08004bff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bf0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bf8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bfc:	e012      	b.n	8004c24 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004bfe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c02:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c0a:	e00b      	b.n	8004c24 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c14:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c18:	e004      	b.n	8004c24 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c20:	e000      	b.n	8004c24 <USB_ActivateEndpoint+0x7c>
      break;
 8004c22:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	7b1b      	ldrb	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 8149 	bne.w	8004f28 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8084 	beq.w	8004da8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	011a      	lsls	r2, r3, #4
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	88db      	ldrh	r3, [r3, #6]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	81fb      	strh	r3, [r7, #14]
 8004ce2:	89fb      	ldrh	r3, [r7, #14]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01b      	beq.n	8004d24 <USB_ActivateEndpoint+0x17c>
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	81bb      	strh	r3, [r7, #12]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	89bb      	ldrh	r3, [r7, #12]
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	78db      	ldrb	r3, [r3, #3]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d020      	beq.n	8004d6e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d42:	813b      	strh	r3, [r7, #8]
 8004d44:	893b      	ldrh	r3, [r7, #8]
 8004d46:	f083 0320 	eor.w	r3, r3, #32
 8004d4a:	813b      	strh	r3, [r7, #8]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	893b      	ldrh	r3, [r7, #8]
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]
 8004d6c:	e27f      	b.n	800526e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d84:	817b      	strh	r3, [r7, #10]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	897b      	ldrh	r3, [r7, #10]
 8004d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]
 8004da6:	e262      	b.n	800526e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	4413      	add	r3, r2
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	011a      	lsls	r2, r3, #4
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	88db      	ldrh	r3, [r3, #6]
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	4413      	add	r3, r2
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	011a      	lsls	r2, r3, #4
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	4413      	add	r3, r2
 8004dfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d112      	bne.n	8004e2e <USB_ActivateEndpoint+0x286>
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	801a      	strh	r2, [r3, #0]
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	e02f      	b.n	8004e8e <USB_ActivateEndpoint+0x2e6>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b3e      	cmp	r3, #62	; 0x3e
 8004e34:	d813      	bhi.n	8004e5e <USB_ActivateEndpoint+0x2b6>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <USB_ActivateEndpoint+0x2a8>
 8004e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	029b      	lsls	r3, r3, #10
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	e017      	b.n	8004e8e <USB_ActivateEndpoint+0x2e6>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	663b      	str	r3, [r7, #96]	; 0x60
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <USB_ActivateEndpoint+0x2d0>
 8004e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e74:	3b01      	subs	r3, #1
 8004e76:	663b      	str	r3, [r7, #96]	; 0x60
 8004e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	83fb      	strh	r3, [r7, #30]
 8004e9c:	8bfb      	ldrh	r3, [r7, #30]
 8004e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01b      	beq.n	8004ede <USB_ActivateEndpoint+0x336>
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebc:	83bb      	strh	r3, [r7, #28]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	441a      	add	r2, r3
 8004ec8:	8bbb      	ldrh	r3, [r7, #28]
 8004eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef4:	837b      	strh	r3, [r7, #26]
 8004ef6:	8b7b      	ldrh	r3, [r7, #26]
 8004ef8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004efc:	837b      	strh	r3, [r7, #26]
 8004efe:	8b7b      	ldrh	r3, [r7, #26]
 8004f00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f04:	837b      	strh	r3, [r7, #26]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	8b7b      	ldrh	r3, [r7, #26]
 8004f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8013      	strh	r3, [r2, #0]
 8004f26:	e1a2      	b.n	800526e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f58:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f74:	4413      	add	r3, r2
 8004f76:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f86:	657b      	str	r3, [r7, #84]	; 0x54
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	891b      	ldrh	r3, [r3, #8]
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f96:	801a      	strh	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	4413      	add	r3, r2
 8004faa:	653b      	str	r3, [r7, #80]	; 0x50
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	011a      	lsls	r2, r3, #4
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	895b      	ldrh	r3, [r3, #10]
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 8091 	bne.w	80050f8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fe4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01b      	beq.n	8005026 <USB_ActivateEndpoint+0x47e>
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005004:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800501e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005022:	b29b      	uxth	r3, r3
 8005024:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	873b      	strh	r3, [r7, #56]	; 0x38
 8005034:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01b      	beq.n	8005076 <USB_ActivateEndpoint+0x4ce>
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005054:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800508e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005090:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005094:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005096:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005098:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800509c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	441a      	add	r2, r3
 80050a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	441a      	add	r2, r3
 80050e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80050e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	8013      	strh	r3, [r2, #0]
 80050f6:	e0ba      	b.n	800526e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005108:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800510c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01d      	beq.n	8005150 <USB_ActivateEndpoint+0x5a8>
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005160:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01d      	beq.n	80051a8 <USB_ActivateEndpoint+0x600>
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	441a      	add	r2, r3
 8005190:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	78db      	ldrb	r3, [r3, #3]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d024      	beq.n	80051fa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051ce:	f083 0320 	eor.w	r3, r3, #32
 80051d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	441a      	add	r2, r3
 80051e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]
 80051f8:	e01d      	b.n	8005236 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005210:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005232:	b29b      	uxth	r3, r3
 8005234:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800525a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526a:	b29b      	uxth	r3, r3
 800526c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800526e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005272:	4618      	mov	r0, r3
 8005274:	376c      	adds	r7, #108	; 0x6c
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800527c:	b480      	push	{r7}
 800527e:	b08d      	sub	sp, #52	; 0x34
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	7b1b      	ldrb	r3, [r3, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f040 808e 	bne.w	80053ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d044      	beq.n	8005322 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	81bb      	strh	r3, [r7, #12]
 80052a6:	89bb      	ldrh	r3, [r7, #12]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01b      	beq.n	80052e8 <USB_DeactivateEndpoint+0x6c>
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	817b      	strh	r3, [r7, #10]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	897b      	ldrh	r3, [r7, #10]
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fe:	813b      	strh	r3, [r7, #8]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	893b      	ldrh	r3, [r7, #8]
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]
 8005320:	e192      	b.n	8005648 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	827b      	strh	r3, [r7, #18]
 8005330:	8a7b      	ldrh	r3, [r7, #18]
 8005332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01b      	beq.n	8005372 <USB_DeactivateEndpoint+0xf6>
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	823b      	strh	r3, [r7, #16]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	8a3b      	ldrh	r3, [r7, #16]
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005388:	81fb      	strh	r3, [r7, #14]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	89fb      	ldrh	r3, [r7, #14]
 8005396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	8013      	strh	r3, [r2, #0]
 80053aa:	e14d      	b.n	8005648 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f040 80a5 	bne.w	8005500 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	843b      	strh	r3, [r7, #32]
 80053c4:	8c3b      	ldrh	r3, [r7, #32]
 80053c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d01b      	beq.n	8005406 <USB_DeactivateEndpoint+0x18a>
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e4:	83fb      	strh	r3, [r7, #30]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	441a      	add	r2, r3
 80053f0:	8bfb      	ldrh	r3, [r7, #30]
 80053f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005402:	b29b      	uxth	r3, r3
 8005404:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	83bb      	strh	r3, [r7, #28]
 8005414:	8bbb      	ldrh	r3, [r7, #28]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01b      	beq.n	8005456 <USB_DeactivateEndpoint+0x1da>
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	837b      	strh	r3, [r7, #26]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	8b7b      	ldrh	r3, [r7, #26]
 8005442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005452:	b29b      	uxth	r3, r3
 8005454:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546c:	833b      	strh	r3, [r7, #24]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	8b3b      	ldrh	r3, [r7, #24]
 800547a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005486:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800548a:	b29b      	uxth	r3, r3
 800548c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a4:	82fb      	strh	r3, [r7, #22]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	8afb      	ldrh	r3, [r7, #22]
 80054b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054dc:	82bb      	strh	r3, [r7, #20]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	441a      	add	r2, r3
 80054e8:	8abb      	ldrh	r3, [r7, #20]
 80054ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	8013      	strh	r3, [r2, #0]
 80054fe:	e0a3      	b.n	8005648 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800550e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <USB_DeactivateEndpoint+0x2d4>
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800553c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800555e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <USB_DeactivateEndpoint+0x324>
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800558c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005598:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800559c:	b29b      	uxth	r3, r3
 800559e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	441a      	add	r2, r3
 80055c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	b29b      	uxth	r3, r3
 800560e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	847b      	strh	r3, [r7, #34]	; 0x22
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005644:	b29b      	uxth	r3, r3
 8005646:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3734      	adds	r7, #52	; 0x34
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b0cc      	sub	sp, #304	; 0x130
 8005658:	af00      	add	r7, sp, #0
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	6018      	str	r0, [r3, #0]
 800565e:	463b      	mov	r3, r7
 8005660:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	2b01      	cmp	r3, #1
 800566a:	f040 872e 	bne.w	80064ca <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	d905      	bls.n	800568a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005688:	e004      	b.n	8005694 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800568a:	463b      	mov	r3, r7
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	7b1b      	ldrb	r3, [r3, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d134      	bne.n	8005708 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800569e:	463b      	mov	r3, r7
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6959      	ldr	r1, [r3, #20]
 80056a4:	463b      	mov	r3, r7
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	88da      	ldrh	r2, [r3, #6]
 80056aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	1d38      	adds	r0, r7, #4
 80056b2:	6800      	ldr	r0, [r0, #0]
 80056b4:	f001 fc03 	bl	8006ebe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056b8:	f107 0310 	add.w	r3, r7, #16
 80056bc:	1d3a      	adds	r2, r7, #4
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	f107 0310 	add.w	r3, r7, #16
 80056d2:	f107 0210 	add.w	r2, r7, #16
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	440a      	add	r2, r1
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	463b      	mov	r3, r7
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	011a      	lsls	r2, r3, #4
 80056e4:	f107 0310 	add.w	r3, r7, #16
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4413      	add	r3, r2
 80056ec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80056f0:	f107 030c 	add.w	r3, r7, #12
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f107 030c 	add.w	r3, r7, #12
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	f000 beac 	b.w	8006460 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005708:	463b      	mov	r3, r7
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	78db      	ldrb	r3, [r3, #3]
 800570e:	2b02      	cmp	r3, #2
 8005710:	f040 838c 	bne.w	8005e2c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005714:	463b      	mov	r3, r7
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	463b      	mov	r3, r7
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	f240 8330 	bls.w	8005d86 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	463b      	mov	r3, r7
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005740:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	463b      	mov	r3, r7
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	441a      	add	r2, r3
 8005752:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005766:	b29b      	uxth	r3, r3
 8005768:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a1a      	ldr	r2, [r3, #32]
 8005770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005774:	1ad2      	subs	r2, r2, r3
 8005776:	463b      	mov	r3, r7
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	463b      	mov	r3, r7
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 819e 	beq.w	8005ad4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800579c:	1d3a      	adds	r2, r7, #4
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d17a      	bne.n	80058a2 <USB_EPStartXfer+0x24e>
 80057ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057b0:	1d3a      	adds	r2, r7, #4
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057be:	b29b      	uxth	r3, r3
 80057c0:	4619      	mov	r1, r3
 80057c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	440a      	add	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	463b      	mov	r3, r7
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	011a      	lsls	r2, r3, #4
 80057d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4413      	add	r3, r2
 80057e0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80057e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11a      	bne.n	8005828 <USB_EPStartXfer+0x1d4>
 80057f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005800:	b29a      	uxth	r2, r3
 8005802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800581c:	b29a      	uxth	r2, r3
 800581e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	e062      	b.n	80058ee <USB_EPStartXfer+0x29a>
 8005828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582c:	2b3e      	cmp	r3, #62	; 0x3e
 800582e:	d819      	bhi.n	8005864 <USB_EPStartXfer+0x210>
 8005830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800583a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <USB_EPStartXfer+0x1fc>
 8005846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800584a:	3301      	adds	r3, #1
 800584c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005850:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005854:	b29b      	uxth	r3, r3
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	b29a      	uxth	r2, r3
 800585a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	e044      	b.n	80058ee <USB_EPStartXfer+0x29a>
 8005864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800586e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <USB_EPStartXfer+0x230>
 800587a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800587e:	3b01      	subs	r3, #1
 8005880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005888:	b29b      	uxth	r3, r3
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	b29b      	uxth	r3, r3
 800588e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005896:	b29a      	uxth	r2, r3
 8005898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	e025      	b.n	80058ee <USB_EPStartXfer+0x29a>
 80058a2:	463b      	mov	r3, r7
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d120      	bne.n	80058ee <USB_EPStartXfer+0x29a>
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	4619      	mov	r1, r3
 80058b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	440a      	add	r2, r1
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	011a      	lsls	r2, r3, #4
 80058ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4413      	add	r3, r2
 80058d6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80058da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058ee:	463b      	mov	r3, r7
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	895b      	ldrh	r3, [r3, #10]
 80058f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058f8:	463b      	mov	r3, r7
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6959      	ldr	r1, [r3, #20]
 80058fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005902:	b29b      	uxth	r3, r3
 8005904:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005908:	1d38      	adds	r0, r7, #4
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	f001 fad7 	bl	8006ebe <USB_WritePMA>
            ep->xfer_buff += len;
 8005910:	463b      	mov	r3, r7
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800591a:	441a      	add	r2, r3
 800591c:	463b      	mov	r3, r7
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005922:	463b      	mov	r3, r7
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	463b      	mov	r3, r7
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	429a      	cmp	r2, r3
 8005930:	d909      	bls.n	8005946 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005932:	463b      	mov	r3, r7
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593c:	1ad2      	subs	r2, r2, r3
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	621a      	str	r2, [r3, #32]
 8005944:	e008      	b.n	8005958 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005946:	463b      	mov	r3, r7
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005950:	463b      	mov	r3, r7
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2200      	movs	r2, #0
 8005956:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d17a      	bne.n	8005a58 <USB_EPStartXfer+0x404>
 8005962:	f107 0318 	add.w	r3, r7, #24
 8005966:	1d3a      	adds	r2, r7, #4
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	1d3b      	adds	r3, r7, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005974:	b29b      	uxth	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	f107 0318 	add.w	r3, r7, #24
 800597c:	f107 0218 	add.w	r2, r7, #24
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	440a      	add	r2, r1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	463b      	mov	r3, r7
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	011a      	lsls	r2, r3, #4
 800598e:	f107 0318 	add.w	r3, r7, #24
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4413      	add	r3, r2
 8005996:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800599a:	f107 0314 	add.w	r3, r7, #20
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d11a      	bne.n	80059de <USB_EPStartXfer+0x38a>
 80059a8:	f107 0314 	add.w	r3, r7, #20
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f107 0314 	add.w	r3, r7, #20
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	f107 0314 	add.w	r3, r7, #20
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e067      	b.n	8005aae <USB_EPStartXfer+0x45a>
 80059de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e2:	2b3e      	cmp	r3, #62	; 0x3e
 80059e4:	d819      	bhi.n	8005a1a <USB_EPStartXfer+0x3c6>
 80059e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <USB_EPStartXfer+0x3b2>
 80059fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a00:	3301      	adds	r3, #1
 8005a02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	029b      	lsls	r3, r3, #10
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f107 0314 	add.w	r3, r7, #20
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	e049      	b.n	8005aae <USB_EPStartXfer+0x45a>
 8005a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <USB_EPStartXfer+0x3e6>
 8005a30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a34:	3b01      	subs	r3, #1
 8005a36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	029b      	lsls	r3, r3, #10
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	f107 0314 	add.w	r3, r7, #20
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	801a      	strh	r2, [r3, #0]
 8005a56:	e02a      	b.n	8005aae <USB_EPStartXfer+0x45a>
 8005a58:	463b      	mov	r3, r7
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d125      	bne.n	8005aae <USB_EPStartXfer+0x45a>
 8005a62:	f107 0320 	add.w	r3, r7, #32
 8005a66:	1d3a      	adds	r2, r7, #4
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	1d3b      	adds	r3, r7, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	4619      	mov	r1, r3
 8005a78:	f107 0320 	add.w	r3, r7, #32
 8005a7c:	f107 0220 	add.w	r2, r7, #32
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	440a      	add	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	463b      	mov	r3, r7
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	011a      	lsls	r2, r3, #4
 8005a8e:	f107 0320 	add.w	r3, r7, #32
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4413      	add	r3, r2
 8005a96:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a9a:	f107 031c 	add.w	r3, r7, #28
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	f107 031c 	add.w	r3, r7, #28
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	891b      	ldrh	r3, [r3, #8]
 8005ab4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6959      	ldr	r1, [r3, #20]
 8005abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ac8:	1d38      	adds	r0, r7, #4
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	f001 f9f7 	bl	8006ebe <USB_WritePMA>
 8005ad0:	f000 bcc6 	b.w	8006460 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d164      	bne.n	8005ba8 <USB_EPStartXfer+0x554>
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af2:	4413      	add	r3, r2
 8005af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b06:	647b      	str	r3, [r7, #68]	; 0x44
 8005b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d112      	bne.n	8005b36 <USB_EPStartXfer+0x4e2>
 8005b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	e057      	b.n	8005be6 <USB_EPStartXfer+0x592>
 8005b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3c:	d817      	bhi.n	8005b6e <USB_EPStartXfer+0x51a>
 8005b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <USB_EPStartXfer+0x50a>
 8005b54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	029b      	lsls	r3, r3, #10
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	e03b      	b.n	8005be6 <USB_EPStartXfer+0x592>
 8005b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <USB_EPStartXfer+0x53a>
 8005b84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	029b      	lsls	r3, r3, #10
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e01e      	b.n	8005be6 <USB_EPStartXfer+0x592>
 8005ba8:	463b      	mov	r3, r7
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d119      	bne.n	8005be6 <USB_EPStartXfer+0x592>
 8005bb2:	1d3b      	adds	r3, r7, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc6:	4413      	add	r3, r2
 8005bc8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bca:	463b      	mov	r3, r7
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	011a      	lsls	r2, r3, #4
 8005bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005be6:	463b      	mov	r3, r7
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	891b      	ldrh	r3, [r3, #8]
 8005bec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6959      	ldr	r1, [r3, #20]
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c00:	1d38      	adds	r0, r7, #4
 8005c02:	6800      	ldr	r0, [r0, #0]
 8005c04:	f001 f95b 	bl	8006ebe <USB_WritePMA>
            ep->xfer_buff += len;
 8005c08:	463b      	mov	r3, r7
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c12:	441a      	add	r2, r3
 8005c14:	463b      	mov	r3, r7
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a1a      	ldr	r2, [r3, #32]
 8005c20:	463b      	mov	r3, r7
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d909      	bls.n	8005c3e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c34:	1ad2      	subs	r2, r2, r3
 8005c36:	463b      	mov	r3, r7
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	621a      	str	r2, [r3, #32]
 8005c3c:	e008      	b.n	8005c50 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c48:	463b      	mov	r3, r7
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	643b      	str	r3, [r7, #64]	; 0x40
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d164      	bne.n	8005d2a <USB_EPStartXfer+0x6d6>
 8005c60:	1d3b      	adds	r3, r7, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	4413      	add	r3, r2
 8005c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	011a      	lsls	r2, r3, #4
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	4413      	add	r3, r2
 8005c84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d112      	bne.n	8005cb8 <USB_EPStartXfer+0x664>
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	e054      	b.n	8005d62 <USB_EPStartXfer+0x70e>
 8005cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cbe:	d817      	bhi.n	8005cf0 <USB_EPStartXfer+0x69c>
 8005cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <USB_EPStartXfer+0x68c>
 8005cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	029b      	lsls	r3, r3, #10
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	e038      	b.n	8005d62 <USB_EPStartXfer+0x70e>
 8005cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <USB_EPStartXfer+0x6bc>
 8005d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	e01b      	b.n	8005d62 <USB_EPStartXfer+0x70e>
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d116      	bne.n	8005d62 <USB_EPStartXfer+0x70e>
 8005d34:	1d3b      	adds	r3, r7, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d42:	4413      	add	r3, r2
 8005d44:	643b      	str	r3, [r7, #64]	; 0x40
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	011a      	lsls	r2, r3, #4
 8005d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d62:	463b      	mov	r3, r7
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	895b      	ldrh	r3, [r3, #10]
 8005d68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6959      	ldr	r1, [r3, #20]
 8005d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d7c:	1d38      	adds	r0, r7, #4
 8005d7e:	6800      	ldr	r0, [r0, #0]
 8005d80:	f001 f89d 	bl	8006ebe <USB_WritePMA>
 8005d84:	e36c      	b.n	8006460 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d86:	463b      	mov	r3, r7
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d90:	1d3b      	adds	r3, r7, #4
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	463b      	mov	r3, r7
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	441a      	add	r2, r3
 8005dbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dda:	1d3b      	adds	r3, r7, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de8:	4413      	add	r3, r2
 8005dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dec:	463b      	mov	r3, r7
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e08:	463b      	mov	r3, r7
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	891b      	ldrh	r3, [r3, #8]
 8005e0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e12:	463b      	mov	r3, r7
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6959      	ldr	r1, [r3, #20]
 8005e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e22:	1d38      	adds	r0, r7, #4
 8005e24:	6800      	ldr	r0, [r0, #0]
 8005e26:	f001 f84a 	bl	8006ebe <USB_WritePMA>
 8005e2a:	e319      	b.n	8006460 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005e2c:	1d3b      	adds	r3, r7, #4
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	463b      	mov	r3, r7
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	463b      	mov	r3, r7
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e70:	463b      	mov	r3, r7
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	463b      	mov	r3, r7
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8162 	beq.w	8006162 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d164      	bne.n	8005f7a <USB_EPStartXfer+0x926>
 8005eb0:	1d3b      	adds	r3, r7, #4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eb6:	1d3b      	adds	r3, r7, #4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec4:	4413      	add	r3, r2
 8005ec6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ec8:	463b      	mov	r3, r7
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	011a      	lsls	r2, r3, #4
 8005ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ed8:	677b      	str	r3, [r7, #116]	; 0x74
 8005eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d112      	bne.n	8005f08 <USB_EPStartXfer+0x8b4>
 8005ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e057      	b.n	8005fb8 <USB_EPStartXfer+0x964>
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f0e:	d817      	bhi.n	8005f40 <USB_EPStartXfer+0x8ec>
 8005f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <USB_EPStartXfer+0x8dc>
 8005f26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	029b      	lsls	r3, r3, #10
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e03b      	b.n	8005fb8 <USB_EPStartXfer+0x964>
 8005f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d104      	bne.n	8005f60 <USB_EPStartXfer+0x90c>
 8005f56:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f60:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	e01e      	b.n	8005fb8 <USB_EPStartXfer+0x964>
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d119      	bne.n	8005fb8 <USB_EPStartXfer+0x964>
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f94:	4413      	add	r3, r2
 8005f96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	011a      	lsls	r2, r3, #4
 8005fa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	895b      	ldrh	r3, [r3, #10]
 8005fbe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6959      	ldr	r1, [r3, #20]
 8005fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fd2:	1d38      	adds	r0, r7, #4
 8005fd4:	6800      	ldr	r0, [r0, #0]
 8005fd6:	f000 ff72 	bl	8006ebe <USB_WritePMA>
          ep->xfer_buff += len;
 8005fda:	463b      	mov	r3, r7
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe4:	441a      	add	r2, r3
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005fec:	463b      	mov	r3, r7
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d909      	bls.n	8006010 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006006:	1ad2      	subs	r2, r2, r3
 8006008:	463b      	mov	r3, r7
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	621a      	str	r2, [r3, #32]
 800600e:	e008      	b.n	8006022 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006010:	463b      	mov	r3, r7
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800601a:	463b      	mov	r3, r7
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2200      	movs	r2, #0
 8006020:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 821a 	beq.w	8006460 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800602c:	463b      	mov	r3, r7
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d164      	bne.n	8006100 <USB_EPStartXfer+0xaac>
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	66bb      	str	r3, [r7, #104]	; 0x68
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800604a:	4413      	add	r3, r2
 800604c:	66bb      	str	r3, [r7, #104]	; 0x68
 800604e:	463b      	mov	r3, r7
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	011a      	lsls	r2, r3, #4
 8006056:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006058:	4413      	add	r3, r2
 800605a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800605e:	667b      	str	r3, [r7, #100]	; 0x64
 8006060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d112      	bne.n	800608e <USB_EPStartXfer+0xa3a>
 8006068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006072:	b29a      	uxth	r2, r3
 8006074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006086:	b29a      	uxth	r2, r3
 8006088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e057      	b.n	800613e <USB_EPStartXfer+0xaea>
 800608e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006092:	2b3e      	cmp	r3, #62	; 0x3e
 8006094:	d817      	bhi.n	80060c6 <USB_EPStartXfer+0xa72>
 8006096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <USB_EPStartXfer+0xa62>
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b0:	3301      	adds	r3, #1
 80060b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	029b      	lsls	r3, r3, #10
 80060be:	b29a      	uxth	r2, r3
 80060c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	e03b      	b.n	800613e <USB_EPStartXfer+0xaea>
 80060c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d4:	f003 031f 	and.w	r3, r3, #31
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <USB_EPStartXfer+0xa92>
 80060dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e0:	3b01      	subs	r3, #1
 80060e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	029b      	lsls	r3, r3, #10
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	e01e      	b.n	800613e <USB_EPStartXfer+0xaea>
 8006100:	463b      	mov	r3, r7
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d119      	bne.n	800613e <USB_EPStartXfer+0xaea>
 800610a:	1d3b      	adds	r3, r7, #4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	673b      	str	r3, [r7, #112]	; 0x70
 8006110:	1d3b      	adds	r3, r7, #4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006118:	b29b      	uxth	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800611e:	4413      	add	r3, r2
 8006120:	673b      	str	r3, [r7, #112]	; 0x70
 8006122:	463b      	mov	r3, r7
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	011a      	lsls	r2, r3, #4
 800612a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800612c:	4413      	add	r3, r2
 800612e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006132:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006138:	b29a      	uxth	r2, r3
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800613e:	463b      	mov	r3, r7
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	891b      	ldrh	r3, [r3, #8]
 8006144:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006148:	463b      	mov	r3, r7
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6959      	ldr	r1, [r3, #20]
 800614e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006152:	b29b      	uxth	r3, r3
 8006154:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006158:	1d38      	adds	r0, r7, #4
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	f000 feaf 	bl	8006ebe <USB_WritePMA>
 8006160:	e17e      	b.n	8006460 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006162:	463b      	mov	r3, r7
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d16f      	bne.n	800624c <USB_EPStartXfer+0xbf8>
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006174:	1d3b      	adds	r3, r7, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617c:	b29b      	uxth	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006184:	4413      	add	r3, r2
 8006186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800618a:	463b      	mov	r3, r7
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	011a      	lsls	r2, r3, #4
 8006192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006196:	4413      	add	r3, r2
 8006198:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800619c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d116      	bne.n	80061d6 <USB_EPStartXfer+0xb82>
 80061a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	e05f      	b.n	8006296 <USB_EPStartXfer+0xc42>
 80061d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061da:	2b3e      	cmp	r3, #62	; 0x3e
 80061dc:	d818      	bhi.n	8006210 <USB_EPStartXfer+0xbbc>
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <USB_EPStartXfer+0xbaa>
 80061f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006202:	b29b      	uxth	r3, r3
 8006204:	029b      	lsls	r3, r3, #10
 8006206:	b29a      	uxth	r2, r3
 8006208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e042      	b.n	8006296 <USB_EPStartXfer+0xc42>
 8006210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800621a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <USB_EPStartXfer+0xbdc>
 8006226:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800622a:	3b01      	subs	r3, #1
 800622c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006230:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006234:	b29b      	uxth	r3, r3
 8006236:	029b      	lsls	r3, r3, #10
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006242:	b29a      	uxth	r2, r3
 8006244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	e024      	b.n	8006296 <USB_EPStartXfer+0xc42>
 800624c:	463b      	mov	r3, r7
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d11f      	bne.n	8006296 <USB_EPStartXfer+0xc42>
 8006256:	1d3b      	adds	r3, r7, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800625e:	1d3b      	adds	r3, r7, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006266:	b29b      	uxth	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800626e:	4413      	add	r3, r2
 8006270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006274:	463b      	mov	r3, r7
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	011a      	lsls	r2, r3, #4
 800627c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006280:	4413      	add	r3, r2
 8006282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800628a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628e:	b29a      	uxth	r2, r3
 8006290:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006294:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006296:	463b      	mov	r3, r7
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	891b      	ldrh	r3, [r3, #8]
 800629c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6959      	ldr	r1, [r3, #20]
 80062a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062b0:	1d38      	adds	r0, r7, #4
 80062b2:	6800      	ldr	r0, [r0, #0]
 80062b4:	f000 fe03 	bl	8006ebe <USB_WritePMA>
          ep->xfer_buff += len;
 80062b8:	463b      	mov	r3, r7
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c2:	441a      	add	r2, r3
 80062c4:	463b      	mov	r3, r7
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a1a      	ldr	r2, [r3, #32]
 80062d0:	463b      	mov	r3, r7
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d909      	bls.n	80062ee <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80062da:	463b      	mov	r3, r7
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6a1a      	ldr	r2, [r3, #32]
 80062e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e4:	1ad2      	subs	r2, r2, r3
 80062e6:	463b      	mov	r3, r7
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	621a      	str	r2, [r3, #32]
 80062ec:	e008      	b.n	8006300 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80062ee:	463b      	mov	r3, r7
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80062f8:	463b      	mov	r3, r7
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2200      	movs	r2, #0
 80062fe:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80ab 	beq.w	8006460 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800630a:	1d3b      	adds	r3, r7, #4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006312:	463b      	mov	r3, r7
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d16f      	bne.n	80063fc <USB_EPStartXfer+0xda8>
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006324:	1d3b      	adds	r3, r7, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632c:	b29b      	uxth	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006334:	4413      	add	r3, r2
 8006336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	011a      	lsls	r2, r3, #4
 8006342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006346:	4413      	add	r3, r2
 8006348:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800634c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	2b00      	cmp	r3, #0
 8006356:	d116      	bne.n	8006386 <USB_EPStartXfer+0xd32>
 8006358:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006364:	b29a      	uxth	r2, r3
 8006366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e05b      	b.n	800643e <USB_EPStartXfer+0xdea>
 8006386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638a:	2b3e      	cmp	r3, #62	; 0x3e
 800638c:	d818      	bhi.n	80063c0 <USB_EPStartXfer+0xd6c>
 800638e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d004      	beq.n	80063ae <USB_EPStartXfer+0xd5a>
 80063a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a8:	3301      	adds	r3, #1
 80063aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	029b      	lsls	r3, r3, #10
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	e03e      	b.n	800643e <USB_EPStartXfer+0xdea>
 80063c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <USB_EPStartXfer+0xd8c>
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063da:	3b01      	subs	r3, #1
 80063dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	029b      	lsls	r3, r3, #10
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063f8:	801a      	strh	r2, [r3, #0]
 80063fa:	e020      	b.n	800643e <USB_EPStartXfer+0xdea>
 80063fc:	463b      	mov	r3, r7
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d11b      	bne.n	800643e <USB_EPStartXfer+0xdea>
 8006406:	1d3b      	adds	r3, r7, #4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800640e:	b29b      	uxth	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006416:	4413      	add	r3, r2
 8006418:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800641c:	463b      	mov	r3, r7
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	011a      	lsls	r2, r3, #4
 8006424:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006428:	4413      	add	r3, r2
 800642a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800642e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006436:	b29a      	uxth	r2, r3
 8006438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800643c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	895b      	ldrh	r3, [r3, #10]
 8006444:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6959      	ldr	r1, [r3, #20]
 800644e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006452:	b29b      	uxth	r3, r3
 8006454:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006458:	1d38      	adds	r0, r7, #4
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	f000 fd2f 	bl	8006ebe <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006460:	1d3b      	adds	r3, r7, #4
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	463b      	mov	r3, r7
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f107 020a 	add.w	r2, r7, #10
 8006476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647e:	8013      	strh	r3, [r2, #0]
 8006480:	f107 030a 	add.w	r3, r7, #10
 8006484:	f107 020a 	add.w	r2, r7, #10
 8006488:	8812      	ldrh	r2, [r2, #0]
 800648a:	f082 0210 	eor.w	r2, r2, #16
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	f107 030a 	add.w	r3, r7, #10
 8006494:	f107 020a 	add.w	r2, r7, #10
 8006498:	8812      	ldrh	r2, [r2, #0]
 800649a:	f082 0220 	eor.w	r2, r2, #32
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	1d3b      	adds	r3, r7, #4
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	463b      	mov	r3, r7
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	f107 030a 	add.w	r3, r7, #10
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	8013      	strh	r3, [r2, #0]
 80064c8:	e3b5      	b.n	8006c36 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80064ca:	463b      	mov	r3, r7
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	7b1b      	ldrb	r3, [r3, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f040 8090 	bne.w	80065f6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80064d6:	463b      	mov	r3, r7
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	463b      	mov	r3, r7
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d90e      	bls.n	8006504 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80064e6:	463b      	mov	r3, r7
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80064f0:	463b      	mov	r3, r7
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699a      	ldr	r2, [r3, #24]
 80064f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fa:	1ad2      	subs	r2, r2, r3
 80064fc:	463b      	mov	r3, r7
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	619a      	str	r2, [r3, #24]
 8006502:	e008      	b.n	8006516 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006516:	1d3b      	adds	r3, r7, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800651e:	1d3b      	adds	r3, r7, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006526:	b29b      	uxth	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800652e:	4413      	add	r3, r2
 8006530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006534:	463b      	mov	r3, r7
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	011a      	lsls	r2, r3, #4
 800653c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006540:	4413      	add	r3, r2
 8006542:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800654a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d116      	bne.n	8006580 <USB_EPStartXfer+0xf2c>
 8006552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	b29b      	uxth	r3, r3
 800655a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006576:	b29a      	uxth	r2, r3
 8006578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800657c:	801a      	strh	r2, [r3, #0]
 800657e:	e32c      	b.n	8006bda <USB_EPStartXfer+0x1586>
 8006580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006584:	2b3e      	cmp	r3, #62	; 0x3e
 8006586:	d818      	bhi.n	80065ba <USB_EPStartXfer+0xf66>
 8006588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <USB_EPStartXfer+0xf54>
 800659e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a2:	3301      	adds	r3, #1
 80065a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	029b      	lsls	r3, r3, #10
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	e30f      	b.n	8006bda <USB_EPStartXfer+0x1586>
 80065ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c8:	f003 031f 	and.w	r3, r3, #31
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <USB_EPStartXfer+0xf86>
 80065d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d4:	3b01      	subs	r3, #1
 80065d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065de:	b29b      	uxth	r3, r3
 80065e0:	029b      	lsls	r3, r3, #10
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e2f1      	b.n	8006bda <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80065f6:	463b      	mov	r3, r7
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	78db      	ldrb	r3, [r3, #3]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	f040 818f 	bne.w	8006920 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d175      	bne.n	80066f8 <USB_EPStartXfer+0x10a4>
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006614:	1d3b      	adds	r3, r7, #4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661c:	b29b      	uxth	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006624:	4413      	add	r3, r2
 8006626:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	011a      	lsls	r2, r3, #4
 8006632:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006636:	4413      	add	r3, r2
 8006638:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800663c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006640:	463b      	mov	r3, r7
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d116      	bne.n	8006678 <USB_EPStartXfer+0x1024>
 800664a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666e:	b29a      	uxth	r2, r3
 8006670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e065      	b.n	8006744 <USB_EPStartXfer+0x10f0>
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b3e      	cmp	r3, #62	; 0x3e
 8006680:	d81a      	bhi.n	80066b8 <USB_EPStartXfer+0x1064>
 8006682:	463b      	mov	r3, r7
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800668e:	463b      	mov	r3, r7
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d004      	beq.n	80066a6 <USB_EPStartXfer+0x1052>
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a0:	3301      	adds	r3, #1
 80066a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	029b      	lsls	r3, r3, #10
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	e045      	b.n	8006744 <USB_EPStartXfer+0x10f0>
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066c4:	463b      	mov	r3, r7
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <USB_EPStartXfer+0x1088>
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d6:	3b01      	subs	r3, #1
 80066d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	029b      	lsls	r3, r3, #10
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066f4:	801a      	strh	r2, [r3, #0]
 80066f6:	e025      	b.n	8006744 <USB_EPStartXfer+0x10f0>
 80066f8:	463b      	mov	r3, r7
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	785b      	ldrb	r3, [r3, #1]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d120      	bne.n	8006744 <USB_EPStartXfer+0x10f0>
 8006702:	1d3b      	adds	r3, r7, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800670a:	1d3b      	adds	r3, r7, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800671a:	4413      	add	r3, r2
 800671c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006720:	463b      	mov	r3, r7
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	011a      	lsls	r2, r3, #4
 8006728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800672c:	4413      	add	r3, r2
 800672e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006732:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006736:	463b      	mov	r3, r7
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800674c:	463b      	mov	r3, r7
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d175      	bne.n	8006842 <USB_EPStartXfer+0x11ee>
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800675e:	1d3b      	adds	r3, r7, #4
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800676e:	4413      	add	r3, r2
 8006770:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006774:	463b      	mov	r3, r7
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	011a      	lsls	r2, r3, #4
 800677c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006780:	4413      	add	r3, r2
 8006782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006786:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800678a:	463b      	mov	r3, r7
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d116      	bne.n	80067c2 <USB_EPStartXfer+0x116e>
 8006794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	e061      	b.n	8006886 <USB_EPStartXfer+0x1232>
 80067c2:	463b      	mov	r3, r7
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b3e      	cmp	r3, #62	; 0x3e
 80067ca:	d81a      	bhi.n	8006802 <USB_EPStartXfer+0x11ae>
 80067cc:	463b      	mov	r3, r7
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067d8:	463b      	mov	r3, r7
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <USB_EPStartXfer+0x119c>
 80067e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067ea:	3301      	adds	r3, #1
 80067ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e041      	b.n	8006886 <USB_EPStartXfer+0x1232>
 8006802:	463b      	mov	r3, r7
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	095b      	lsrs	r3, r3, #5
 800680a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800680e:	463b      	mov	r3, r7
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <USB_EPStartXfer+0x11d2>
 800681c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006820:	3b01      	subs	r3, #1
 8006822:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006826:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800682a:	b29b      	uxth	r3, r3
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006838:	b29a      	uxth	r2, r3
 800683a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e021      	b.n	8006886 <USB_EPStartXfer+0x1232>
 8006842:	463b      	mov	r3, r7
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	785b      	ldrb	r3, [r3, #1]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d11c      	bne.n	8006886 <USB_EPStartXfer+0x1232>
 800684c:	1d3b      	adds	r3, r7, #4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006854:	b29b      	uxth	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800685c:	4413      	add	r3, r2
 800685e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006862:	463b      	mov	r3, r7
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	011a      	lsls	r2, r3, #4
 800686a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800686e:	4413      	add	r3, r2
 8006870:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	b29a      	uxth	r2, r3
 8006880:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006884:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006886:	463b      	mov	r3, r7
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 81a4 	beq.w	8006bda <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006892:	1d3b      	adds	r3, r7, #4
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <USB_EPStartXfer+0x126a>
 80068b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10d      	bne.n	80068da <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068be:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 8187 	bne.w	8006bda <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f040 8180 	bne.w	8006bda <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	463b      	mov	r3, r7
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80068f8:	1d3b      	adds	r3, r7, #4
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	463b      	mov	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800690a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006916:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800691a:	b29b      	uxth	r3, r3
 800691c:	8013      	strh	r3, [r2, #0]
 800691e:	e15c      	b.n	8006bda <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006920:	463b      	mov	r3, r7
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	78db      	ldrb	r3, [r3, #3]
 8006926:	2b01      	cmp	r3, #1
 8006928:	f040 8155 	bne.w	8006bd6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800692c:	463b      	mov	r3, r7
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	463b      	mov	r3, r7
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	429a      	cmp	r2, r3
 800693a:	d90e      	bls.n	800695a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800693c:	463b      	mov	r3, r7
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006946:	463b      	mov	r3, r7
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699a      	ldr	r2, [r3, #24]
 800694c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006950:	1ad2      	subs	r2, r2, r3
 8006952:	463b      	mov	r3, r7
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	619a      	str	r2, [r3, #24]
 8006958:	e008      	b.n	800696c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800695a:	463b      	mov	r3, r7
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2200      	movs	r2, #0
 800696a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d16f      	bne.n	8006a56 <USB_EPStartXfer+0x1402>
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006986:	b29b      	uxth	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800698e:	4413      	add	r3, r2
 8006990:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006994:	463b      	mov	r3, r7
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	011a      	lsls	r2, r3, #4
 800699c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069a0:	4413      	add	r3, r2
 80069a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d116      	bne.n	80069e0 <USB_EPStartXfer+0x138c>
 80069b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069be:	b29a      	uxth	r2, r3
 80069c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	e05f      	b.n	8006aa0 <USB_EPStartXfer+0x144c>
 80069e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e4:	2b3e      	cmp	r3, #62	; 0x3e
 80069e6:	d818      	bhi.n	8006a1a <USB_EPStartXfer+0x13c6>
 80069e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ec:	085b      	lsrs	r3, r3, #1
 80069ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <USB_EPStartXfer+0x13b4>
 80069fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a02:	3301      	adds	r3, #1
 8006a04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	029b      	lsls	r3, r3, #10
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e042      	b.n	8006aa0 <USB_EPStartXfer+0x144c>
 8006a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <USB_EPStartXfer+0x13e6>
 8006a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a34:	3b01      	subs	r3, #1
 8006a36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	029b      	lsls	r3, r3, #10
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a52:	801a      	strh	r2, [r3, #0]
 8006a54:	e024      	b.n	8006aa0 <USB_EPStartXfer+0x144c>
 8006a56:	463b      	mov	r3, r7
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d11f      	bne.n	8006aa0 <USB_EPStartXfer+0x144c>
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a68:	1d3b      	adds	r3, r7, #4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a78:	4413      	add	r3, r2
 8006a7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a7e:	463b      	mov	r3, r7
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	011a      	lsls	r2, r3, #4
 8006a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	1d3b      	adds	r3, r7, #4
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d16f      	bne.n	8006b92 <USB_EPStartXfer+0x153e>
 8006ab2:	1d3b      	adds	r3, r7, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aba:	1d3b      	adds	r3, r7, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aca:	4413      	add	r3, r2
 8006acc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	011a      	lsls	r2, r3, #4
 8006ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006adc:	4413      	add	r3, r2
 8006ade:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d116      	bne.n	8006b1c <USB_EPStartXfer+0x14c8>
 8006aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b18:	801a      	strh	r2, [r3, #0]
 8006b1a:	e05e      	b.n	8006bda <USB_EPStartXfer+0x1586>
 8006b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b20:	2b3e      	cmp	r3, #62	; 0x3e
 8006b22:	d818      	bhi.n	8006b56 <USB_EPStartXfer+0x1502>
 8006b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d004      	beq.n	8006b44 <USB_EPStartXfer+0x14f0>
 8006b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b3e:	3301      	adds	r3, #1
 8006b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	029b      	lsls	r3, r3, #10
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e041      	b.n	8006bda <USB_EPStartXfer+0x1586>
 8006b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <USB_EPStartXfer+0x1522>
 8006b6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b70:	3b01      	subs	r3, #1
 8006b72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	029b      	lsls	r3, r3, #10
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b8e:	801a      	strh	r2, [r3, #0]
 8006b90:	e023      	b.n	8006bda <USB_EPStartXfer+0x1586>
 8006b92:	463b      	mov	r3, r7
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d11e      	bne.n	8006bda <USB_EPStartXfer+0x1586>
 8006b9c:	1d3b      	adds	r3, r7, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bac:	4413      	add	r3, r2
 8006bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	011a      	lsls	r2, r3, #4
 8006bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	e001      	b.n	8006bda <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e02e      	b.n	8006c38 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bda:	1d3b      	adds	r3, r7, #4
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	463b      	mov	r3, r7
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006bf8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c00:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c04:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c0c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c10:	1d3b      	adds	r3, r7, #4
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	463b      	mov	r3, r7
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d020      	beq.n	8006c96 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c6a:	81bb      	strh	r3, [r7, #12]
 8006c6c:	89bb      	ldrh	r3, [r7, #12]
 8006c6e:	f083 0310 	eor.w	r3, r3, #16
 8006c72:	81bb      	strh	r3, [r7, #12]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	441a      	add	r2, r3
 8006c7e:	89bb      	ldrh	r3, [r7, #12]
 8006c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	8013      	strh	r3, [r2, #0]
 8006c94:	e01f      	b.n	8006cd6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cac:	81fb      	strh	r3, [r7, #14]
 8006cae:	89fb      	ldrh	r3, [r7, #14]
 8006cb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cb4:	81fb      	strh	r3, [r7, #14]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	89fb      	ldrh	r3, [r7, #14]
 8006cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b087      	sub	sp, #28
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	7b1b      	ldrb	r3, [r3, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 809d 	bne.w	8006e30 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d04c      	beq.n	8006d98 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	823b      	strh	r3, [r7, #16]
 8006d0c:	8a3b      	ldrh	r3, [r7, #16]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01b      	beq.n	8006d4e <USB_EPClearStall+0x6c>
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2c:	81fb      	strh	r3, [r7, #14]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	89fb      	ldrh	r3, [r7, #14]
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	78db      	ldrb	r3, [r3, #3]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d06c      	beq.n	8006e30 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d6c:	81bb      	strh	r3, [r7, #12]
 8006d6e:	89bb      	ldrh	r3, [r7, #12]
 8006d70:	f083 0320 	eor.w	r3, r3, #32
 8006d74:	81bb      	strh	r3, [r7, #12]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	89bb      	ldrh	r3, [r7, #12]
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]
 8006d96:	e04b      	b.n	8006e30 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	82fb      	strh	r3, [r7, #22]
 8006da6:	8afb      	ldrh	r3, [r7, #22]
 8006da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01b      	beq.n	8006de8 <USB_EPClearStall+0x106>
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	82bb      	strh	r3, [r7, #20]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	8abb      	ldrh	r3, [r7, #20]
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfe:	827b      	strh	r3, [r7, #18]
 8006e00:	8a7b      	ldrh	r3, [r7, #18]
 8006e02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e06:	827b      	strh	r3, [r7, #18]
 8006e08:	8a7b      	ldrh	r3, [r7, #18]
 8006e0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e0e:	827b      	strh	r3, [r7, #18]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	441a      	add	r2, r3
 8006e1a:	8a7b      	ldrh	r3, [r7, #18]
 8006e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2280      	movs	r2, #128	; 0x80
 8006e52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr

08006e62 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr

08006e76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr

08006ebe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b08d      	sub	sp, #52	; 0x34
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	461a      	mov	r2, r3
 8006ecc:	460b      	mov	r3, r1
 8006ece:	80fb      	strh	r3, [r7, #6]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ed4:	88bb      	ldrh	r3, [r7, #4]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	005a      	lsls	r2, r3, #1
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef6:	e01e      	b.n	8006f36 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	3301      	adds	r3, #1
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	3302      	adds	r3, #2
 8006f22:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	3302      	adds	r3, #2
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	3b01      	subs	r3, #1
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1dd      	bne.n	8006ef8 <USB_WritePMA+0x3a>
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	3734      	adds	r7, #52	; 0x34
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr

08006f48 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b08b      	sub	sp, #44	; 0x2c
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4611      	mov	r1, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	460b      	mov	r3, r1
 8006f58:	80fb      	strh	r3, [r7, #6]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f5e:	88bb      	ldrh	r3, [r7, #4]
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	005a      	lsls	r2, r3, #1
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f7a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f80:	e01b      	b.n	8006fba <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	0a1b      	lsrs	r3, r3, #8
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	3301      	adds	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	3302      	adds	r3, #2
 8006fb2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e0      	bne.n	8006f82 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006fc0:	88bb      	ldrh	r3, [r7, #4]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	701a      	strb	r2, [r3, #0]
  }
}
 8006fdc:	bf00      	nop
 8006fde:	372c      	adds	r7, #44	; 0x2c
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7c1b      	ldrb	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d115      	bne.n	800702a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007002:	2202      	movs	r2, #2
 8007004:	2181      	movs	r1, #129	; 0x81
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fe99 	bl	8008d3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007016:	2202      	movs	r2, #2
 8007018:	2101      	movs	r1, #1
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fe8f 	bl	8008d3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007028:	e012      	b.n	8007050 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800702a:	2340      	movs	r3, #64	; 0x40
 800702c:	2202      	movs	r2, #2
 800702e:	2181      	movs	r1, #129	; 0x81
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 fe84 	bl	8008d3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800703c:	2340      	movs	r3, #64	; 0x40
 800703e:	2202      	movs	r2, #2
 8007040:	2101      	movs	r1, #1
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fe7b 	bl	8008d3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007050:	2308      	movs	r3, #8
 8007052:	2203      	movs	r2, #3
 8007054:	2182      	movs	r1, #130	; 0x82
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fe71 	bl	8008d3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007062:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007066:	f001 ff91 	bl	8008f8c <USBD_static_malloc>
 800706a:	4602      	mov	r2, r0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
 8007080:	e026      	b.n	80070d0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007088:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7c1b      	ldrb	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d109      	bne.n	80070c0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b6:	2101      	movs	r1, #1
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 ff31 	bl	8008f20 <USBD_LL_PrepareReceive>
 80070be:	e007      	b.n	80070d0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070c6:	2340      	movs	r3, #64	; 0x40
 80070c8:	2101      	movs	r1, #1
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 ff28 	bl	8008f20 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070ea:	2181      	movs	r1, #129	; 0x81
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 fe4c 	bl	8008d8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070f8:	2101      	movs	r1, #1
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fe45 	bl	8008d8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007108:	2182      	movs	r1, #130	; 0x82
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fe3d 	bl	8008d8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00e      	beq.n	800713e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	4618      	mov	r0, r3
 8007132:	f001 ff37 	bl	8008fa4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007158:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800716e:	2b00      	cmp	r3, #0
 8007170:	d039      	beq.n	80071e6 <USBD_CDC_Setup+0x9e>
 8007172:	2b20      	cmp	r3, #32
 8007174:	d17f      	bne.n	8007276 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d029      	beq.n	80071d2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b25b      	sxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	da11      	bge.n	80071ac <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007194:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	88d2      	ldrh	r2, [r2, #6]
 800719a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800719c:	6939      	ldr	r1, [r7, #16]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	88db      	ldrh	r3, [r3, #6]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fa0a 	bl	80085be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80071aa:	e06b      	b.n	8007284 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	785a      	ldrb	r2, [r3, #1]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	88db      	ldrh	r3, [r3, #6]
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071c2:	6939      	ldr	r1, [r7, #16]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	88db      	ldrh	r3, [r3, #6]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 fa25 	bl	800861a <USBD_CtlPrepareRx>
      break;
 80071d0:	e058      	b.n	8007284 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	7850      	ldrb	r0, [r2, #1]
 80071de:	2200      	movs	r2, #0
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	4798      	blx	r3
      break;
 80071e4:	e04e      	b.n	8007284 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	2b0b      	cmp	r3, #11
 80071ec:	d02e      	beq.n	800724c <USBD_CDC_Setup+0x104>
 80071ee:	2b0b      	cmp	r3, #11
 80071f0:	dc38      	bgt.n	8007264 <USBD_CDC_Setup+0x11c>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <USBD_CDC_Setup+0xb4>
 80071f6:	2b0a      	cmp	r3, #10
 80071f8:	d014      	beq.n	8007224 <USBD_CDC_Setup+0xdc>
 80071fa:	e033      	b.n	8007264 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007202:	2b03      	cmp	r3, #3
 8007204:	d107      	bne.n	8007216 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	2202      	movs	r2, #2
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 f9d5 	bl	80085be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007214:	e02e      	b.n	8007274 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 f966 	bl	80084ea <USBD_CtlError>
            ret = USBD_FAIL;
 800721e:	2302      	movs	r3, #2
 8007220:	75fb      	strb	r3, [r7, #23]
          break;
 8007222:	e027      	b.n	8007274 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800722a:	2b03      	cmp	r3, #3
 800722c:	d107      	bne.n	800723e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800722e:	f107 030f 	add.w	r3, r7, #15
 8007232:	2201      	movs	r2, #1
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 f9c1 	bl	80085be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800723c:	e01a      	b.n	8007274 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f952 	bl	80084ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007246:	2302      	movs	r3, #2
 8007248:	75fb      	strb	r3, [r7, #23]
          break;
 800724a:	e013      	b.n	8007274 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007252:	2b03      	cmp	r3, #3
 8007254:	d00d      	beq.n	8007272 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 f946 	bl	80084ea <USBD_CtlError>
            ret = USBD_FAIL;
 800725e:	2302      	movs	r3, #2
 8007260:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007262:	e006      	b.n	8007272 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 f93f 	bl	80084ea <USBD_CtlError>
          ret = USBD_FAIL;
 800726c:	2302      	movs	r3, #2
 800726e:	75fb      	strb	r3, [r7, #23]
          break;
 8007270:	e000      	b.n	8007274 <USBD_CDC_Setup+0x12c>
          break;
 8007272:	bf00      	nop
      }
      break;
 8007274:	e006      	b.n	8007284 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f936 	bl	80084ea <USBD_CtlError>
      ret = USBD_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	75fb      	strb	r3, [r7, #23]
      break;
 8007282:	bf00      	nop
  }

  return ret;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072a8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d03a      	beq.n	800732a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072b4:	78fa      	ldrb	r2, [r7, #3]
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	331c      	adds	r3, #28
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d029      	beq.n	800731e <USBD_CDC_DataIn+0x90>
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	331c      	adds	r3, #28
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	78f9      	ldrb	r1, [r7, #3]
 80072de:	68b8      	ldr	r0, [r7, #8]
 80072e0:	460b      	mov	r3, r1
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	4403      	add	r3, r0
 80072ea:	3338      	adds	r3, #56	; 0x38
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	fbb2 f1f3 	udiv	r1, r2, r3
 80072f2:	fb03 f301 	mul.w	r3, r3, r1
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d110      	bne.n	800731e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	331c      	adds	r3, #28
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007310:	78f9      	ldrb	r1, [r7, #3]
 8007312:	2300      	movs	r3, #0
 8007314:	2200      	movs	r2, #0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fddf 	bl	8008eda <USBD_LL_Transmit>
 800731c:	e003      	b.n	8007326 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	e000      	b.n	800732c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800732a:	2302      	movs	r3, #2
  }
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007346:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 fe0a 	bl	8008f66 <USBD_LL_GetRxDataSize>
 8007352:	4602      	mov	r2, r0
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00d      	beq.n	8007380 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007378:	4611      	mov	r1, r2
 800737a:	4798      	blx	r3

    return USBD_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	e000      	b.n	8007382 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007380:	2302      	movs	r3, #2
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007398:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d015      	beq.n	80073d0 <USBD_CDC_EP0_RxReady+0x46>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073aa:	2bff      	cmp	r3, #255	; 0xff
 80073ac:	d010      	beq.n	80073d0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80073bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073c4:	b292      	uxth	r2, r2
 80073c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	22ff      	movs	r2, #255	; 0xff
 80073cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2243      	movs	r2, #67	; 0x43
 80073e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80073ea:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	200000a4 	.word	0x200000a4

080073fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2243      	movs	r2, #67	; 0x43
 8007408:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800740a:	4b03      	ldr	r3, [pc, #12]	; (8007418 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	bc80      	pop	{r7}
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	20000060 	.word	0x20000060

0800741c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2243      	movs	r2, #67	; 0x43
 8007428:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800742a:	4b03      	ldr	r3, [pc, #12]	; (8007438 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	200000e8 	.word	0x200000e8

0800743c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	220a      	movs	r2, #10
 8007448:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800744a:	4b03      	ldr	r3, [pc, #12]	; (8007458 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	2000001c 	.word	0x2000001c

0800745c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007466:	2302      	movs	r3, #2
 8007468:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr

08007488 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4613      	mov	r3, r2
 8007494:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr

080074ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr

080074e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d01c      	beq.n	8007534 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007500:	2b00      	cmp	r3, #0
 8007502:	d115      	bne.n	8007530 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007522:	b29b      	uxth	r3, r3
 8007524:	2181      	movs	r1, #129	; 0x81
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fcd7 	bl	8008eda <USBD_LL_Transmit>

      return USBD_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	e002      	b.n	8007536 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007534:	2302      	movs	r3, #2
  }
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007554:	2b00      	cmp	r3, #0
 8007556:	d017      	beq.n	8007588 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	7c1b      	ldrb	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800756a:	2101      	movs	r1, #1
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 fcd7 	bl	8008f20 <USBD_LL_PrepareReceive>
 8007572:	e007      	b.n	8007584 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	2101      	movs	r1, #1
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 fcce 	bl	8008f20 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	e000      	b.n	800758a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007588:	2302      	movs	r3, #2
  }
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	4613      	mov	r3, r2
 800759e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075a6:	2302      	movs	r3, #2
 80075a8:	e01a      	b.n	80075e0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	79fa      	ldrb	r2, [r7, #7]
 80075d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f001 fb3b 	bl	8008c54 <USBD_LL_Init>

  return USBD_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e001      	b.n	800760e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800760a:	2302      	movs	r3, #2
 800760c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr

0800761a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fb70 	bl	8008d08 <USBD_LL_Start>

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	bc80      	pop	{r7}
 8007644:	4770      	bx	lr

08007646 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007652:	2302      	movs	r3, #2
 8007654:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00c      	beq.n	800767a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	4611      	mov	r1, r2
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800767a:	7bfb      	ldrb	r3, [r7, #15]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	4611      	mov	r1, r2
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3

  return USBD_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fed8 	bl	8008472 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076d0:	461a      	mov	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076de:	f003 031f 	and.w	r3, r3, #31
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d016      	beq.n	8007714 <USBD_LL_SetupStage+0x6a>
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d81c      	bhi.n	8007724 <USBD_LL_SetupStage+0x7a>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <USBD_LL_SetupStage+0x4a>
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d008      	beq.n	8007704 <USBD_LL_SetupStage+0x5a>
 80076f2:	e017      	b.n	8007724 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f9cb 	bl	8007a98 <USBD_StdDevReq>
      break;
 8007702:	e01a      	b.n	800773a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa2d 	bl	8007b6c <USBD_StdItfReq>
      break;
 8007712:	e012      	b.n	800773a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fa6d 	bl	8007bfc <USBD_StdEPReq>
      break;
 8007722:	e00a      	b.n	800773a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800772a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800772e:	b2db      	uxtb	r3, r3
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fb48 	bl	8008dc8 <USBD_LL_StallEP>
      break;
 8007738:	bf00      	nop
  }

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	460b      	mov	r3, r1
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007752:	7afb      	ldrb	r3, [r7, #11]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d14b      	bne.n	80077f0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800775e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007766:	2b03      	cmp	r3, #3
 8007768:	d134      	bne.n	80077d4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	429a      	cmp	r2, r3
 8007774:	d919      	bls.n	80077aa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800778c:	429a      	cmp	r2, r3
 800778e:	d203      	bcs.n	8007798 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007794:	b29b      	uxth	r3, r3
 8007796:	e002      	b.n	800779e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800779c:	b29b      	uxth	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	6879      	ldr	r1, [r7, #4]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 ff57 	bl	8008656 <USBD_CtlContinueRx>
 80077a8:	e038      	b.n	800781c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d105      	bne.n	80077cc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 ff54 	bl	800867a <USBD_CtlSendStatus>
 80077d2:	e023      	b.n	800781c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077da:	2b05      	cmp	r3, #5
 80077dc:	d11e      	bne.n	800781c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80077e6:	2100      	movs	r1, #0
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f001 faed 	bl	8008dc8 <USBD_LL_StallEP>
 80077ee:	e015      	b.n	800781c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00d      	beq.n	8007818 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007802:	2b03      	cmp	r3, #3
 8007804:	d108      	bne.n	8007818 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	7afa      	ldrb	r2, [r7, #11]
 8007810:	4611      	mov	r1, r2
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	4798      	blx	r3
 8007816:	e001      	b.n	800781c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007818:	2302      	movs	r3, #2
 800781a:	e000      	b.n	800781e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	460b      	mov	r3, r1
 8007830:	607a      	str	r2, [r7, #4]
 8007832:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d17f      	bne.n	800793a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3314      	adds	r3, #20
 800783e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007846:	2b02      	cmp	r3, #2
 8007848:	d15c      	bne.n	8007904 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	429a      	cmp	r2, r3
 8007854:	d915      	bls.n	8007882 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	1ad2      	subs	r2, r2, r3
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	b29b      	uxth	r3, r3
 800786a:	461a      	mov	r2, r3
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fec1 	bl	80085f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007874:	2300      	movs	r3, #0
 8007876:	2200      	movs	r2, #0
 8007878:	2100      	movs	r1, #0
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f001 fb50 	bl	8008f20 <USBD_LL_PrepareReceive>
 8007880:	e04e      	b.n	8007920 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	6912      	ldr	r2, [r2, #16]
 800788a:	fbb3 f1f2 	udiv	r1, r3, r2
 800788e:	fb02 f201 	mul.w	r2, r2, r1
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d11c      	bne.n	80078d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d316      	bcc.n	80078d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d20f      	bcs.n	80078d2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078b2:	2200      	movs	r2, #0
 80078b4:	2100      	movs	r1, #0
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 fe9d 	bl	80085f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078c4:	2300      	movs	r3, #0
 80078c6:	2200      	movs	r2, #0
 80078c8:	2100      	movs	r1, #0
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f001 fb28 	bl	8008f20 <USBD_LL_PrepareReceive>
 80078d0:	e026      	b.n	8007920 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d105      	bne.n	80078f4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80078f4:	2180      	movs	r1, #128	; 0x80
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f001 fa66 	bl	8008dc8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fecf 	bl	80086a0 <USBD_CtlReceiveStatus>
 8007902:	e00d      	b.n	8007920 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800790a:	2b04      	cmp	r3, #4
 800790c:	d004      	beq.n	8007918 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007914:	2b00      	cmp	r3, #0
 8007916:	d103      	bne.n	8007920 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007918:	2180      	movs	r1, #128	; 0x80
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f001 fa54 	bl	8008dc8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007926:	2b01      	cmp	r3, #1
 8007928:	d11d      	bne.n	8007966 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7ff fe81 	bl	8007632 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007938:	e015      	b.n	8007966 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00d      	beq.n	8007962 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800794c:	2b03      	cmp	r3, #3
 800794e:	d108      	bne.n	8007962 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	7afa      	ldrb	r2, [r7, #11]
 800795a:	4611      	mov	r1, r2
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	4798      	blx	r3
 8007960:	e001      	b.n	8007966 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007962:	2302      	movs	r3, #2
 8007964:	e000      	b.n	8007968 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007978:	2340      	movs	r3, #64	; 0x40
 800797a:	2200      	movs	r2, #0
 800797c:	2100      	movs	r1, #0
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 f9dd 	bl	8008d3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2240      	movs	r2, #64	; 0x40
 8007990:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007994:	2340      	movs	r3, #64	; 0x40
 8007996:	2200      	movs	r2, #0
 8007998:	2180      	movs	r1, #128	; 0x80
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 f9cf 	bl	8008d3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2240      	movs	r2, #64	; 0x40
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6852      	ldr	r2, [r2, #4]
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	4611      	mov	r1, r2
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	4798      	blx	r3
  }

  return USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	460b      	mov	r3, r1
 80079fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	78fa      	ldrb	r2, [r7, #3]
 8007a02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2204      	movs	r2, #4
 8007a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr

08007a38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d105      	bne.n	8007a56 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr

08007a62 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d10b      	bne.n	8007a8c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aae:	2b40      	cmp	r3, #64	; 0x40
 8007ab0:	d005      	beq.n	8007abe <USBD_StdDevReq+0x26>
 8007ab2:	2b40      	cmp	r3, #64	; 0x40
 8007ab4:	d84f      	bhi.n	8007b56 <USBD_StdDevReq+0xbe>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <USBD_StdDevReq+0x36>
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d14b      	bne.n	8007b56 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      break;
 8007acc:	e048      	b.n	8007b60 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	785b      	ldrb	r3, [r3, #1]
 8007ad2:	2b09      	cmp	r3, #9
 8007ad4:	d839      	bhi.n	8007b4a <USBD_StdDevReq+0xb2>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <USBD_StdDevReq+0x44>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	08007b41 	.word	0x08007b41
 8007ae4:	08007b4b 	.word	0x08007b4b
 8007ae8:	08007b37 	.word	0x08007b37
 8007aec:	08007b4b 	.word	0x08007b4b
 8007af0:	08007b0f 	.word	0x08007b0f
 8007af4:	08007b05 	.word	0x08007b05
 8007af8:	08007b4b 	.word	0x08007b4b
 8007afc:	08007b23 	.word	0x08007b23
 8007b00:	08007b19 	.word	0x08007b19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f9dc 	bl	8007ec4 <USBD_GetDescriptor>
          break;
 8007b0c:	e022      	b.n	8007b54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fb3f 	bl	8008194 <USBD_SetAddress>
          break;
 8007b16:	e01d      	b.n	8007b54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fb7e 	bl	800821c <USBD_SetConfig>
          break;
 8007b20:	e018      	b.n	8007b54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc07 	bl	8008338 <USBD_GetConfig>
          break;
 8007b2a:	e013      	b.n	8007b54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fc37 	bl	80083a2 <USBD_GetStatus>
          break;
 8007b34:	e00e      	b.n	8007b54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fc65 	bl	8008408 <USBD_SetFeature>
          break;
 8007b3e:	e009      	b.n	8007b54 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fc74 	bl	8008430 <USBD_ClrFeature>
          break;
 8007b48:	e004      	b.n	8007b54 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fccc 	bl	80084ea <USBD_CtlError>
          break;
 8007b52:	bf00      	nop
      }
      break;
 8007b54:	e004      	b.n	8007b60 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fcc6 	bl	80084ea <USBD_CtlError>
      break;
 8007b5e:	bf00      	nop
  }

  return ret;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop

08007b6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b82:	2b40      	cmp	r3, #64	; 0x40
 8007b84:	d005      	beq.n	8007b92 <USBD_StdItfReq+0x26>
 8007b86:	2b40      	cmp	r3, #64	; 0x40
 8007b88:	d82e      	bhi.n	8007be8 <USBD_StdItfReq+0x7c>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <USBD_StdItfReq+0x26>
 8007b8e:	2b20      	cmp	r3, #32
 8007b90:	d12a      	bne.n	8007be8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d81d      	bhi.n	8007bda <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	889b      	ldrh	r3, [r3, #4]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d813      	bhi.n	8007bd0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	4798      	blx	r3
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	88db      	ldrh	r3, [r3, #6]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d110      	bne.n	8007be4 <USBD_StdItfReq+0x78>
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10d      	bne.n	8007be4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fd56 	bl	800867a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bce:	e009      	b.n	8007be4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fc89 	bl	80084ea <USBD_CtlError>
          break;
 8007bd8:	e004      	b.n	8007be4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fc84 	bl	80084ea <USBD_CtlError>
          break;
 8007be2:	e000      	b.n	8007be6 <USBD_StdItfReq+0x7a>
          break;
 8007be4:	bf00      	nop
      }
      break;
 8007be6:	e004      	b.n	8007bf2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fc7d 	bl	80084ea <USBD_CtlError>
      break;
 8007bf0:	bf00      	nop
  }

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	889b      	ldrh	r3, [r3, #4]
 8007c0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c18:	2b40      	cmp	r3, #64	; 0x40
 8007c1a:	d007      	beq.n	8007c2c <USBD_StdEPReq+0x30>
 8007c1c:	2b40      	cmp	r3, #64	; 0x40
 8007c1e:	f200 8146 	bhi.w	8007eae <USBD_StdEPReq+0x2b2>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <USBD_StdEPReq+0x40>
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	f040 8141 	bne.w	8007eae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
      break;
 8007c3a:	e13d      	b.n	8007eb8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d10a      	bne.n	8007c5e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	e12d      	b.n	8007eba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	785b      	ldrb	r3, [r3, #1]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d007      	beq.n	8007c76 <USBD_StdEPReq+0x7a>
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	f300 811b 	bgt.w	8007ea2 <USBD_StdEPReq+0x2a6>
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d072      	beq.n	8007d56 <USBD_StdEPReq+0x15a>
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d03a      	beq.n	8007cea <USBD_StdEPReq+0xee>
 8007c74:	e115      	b.n	8007ea2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d002      	beq.n	8007c86 <USBD_StdEPReq+0x8a>
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d015      	beq.n	8007cb0 <USBD_StdEPReq+0xb4>
 8007c84:	e02b      	b.n	8007cde <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00c      	beq.n	8007ca6 <USBD_StdEPReq+0xaa>
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b80      	cmp	r3, #128	; 0x80
 8007c90:	d009      	beq.n	8007ca6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 f896 	bl	8008dc8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007c9c:	2180      	movs	r1, #128	; 0x80
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 f892 	bl	8008dc8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ca4:	e020      	b.n	8007ce8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fc1e 	bl	80084ea <USBD_CtlError>
              break;
 8007cae:	e01b      	b.n	8007ce8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	885b      	ldrh	r3, [r3, #2]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10e      	bne.n	8007cd6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <USBD_StdEPReq+0xda>
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	2b80      	cmp	r3, #128	; 0x80
 8007cc2:	d008      	beq.n	8007cd6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	88db      	ldrh	r3, [r3, #6]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d104      	bne.n	8007cd6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 f879 	bl	8008dc8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fccf 	bl	800867a <USBD_CtlSendStatus>

              break;
 8007cdc:	e004      	b.n	8007ce8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fc02 	bl	80084ea <USBD_CtlError>
              break;
 8007ce6:	bf00      	nop
          }
          break;
 8007ce8:	e0e0      	b.n	8007eac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d002      	beq.n	8007cfa <USBD_StdEPReq+0xfe>
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d015      	beq.n	8007d24 <USBD_StdEPReq+0x128>
 8007cf8:	e026      	b.n	8007d48 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00c      	beq.n	8007d1a <USBD_StdEPReq+0x11e>
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b80      	cmp	r3, #128	; 0x80
 8007d04:	d009      	beq.n	8007d1a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 f85c 	bl	8008dc8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d10:	2180      	movs	r1, #128	; 0x80
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f001 f858 	bl	8008dc8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d18:	e01c      	b.n	8007d54 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fbe4 	bl	80084ea <USBD_CtlError>
              break;
 8007d22:	e017      	b.n	8007d54 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	885b      	ldrh	r3, [r3, #2]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d112      	bne.n	8007d52 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 f863 	bl	8008e06 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fc9a 	bl	800867a <USBD_CtlSendStatus>
              }
              break;
 8007d46:	e004      	b.n	8007d52 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fbcd 	bl	80084ea <USBD_CtlError>
              break;
 8007d50:	e000      	b.n	8007d54 <USBD_StdEPReq+0x158>
              break;
 8007d52:	bf00      	nop
          }
          break;
 8007d54:	e0aa      	b.n	8007eac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d002      	beq.n	8007d66 <USBD_StdEPReq+0x16a>
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d032      	beq.n	8007dca <USBD_StdEPReq+0x1ce>
 8007d64:	e097      	b.n	8007e96 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d007      	beq.n	8007d7c <USBD_StdEPReq+0x180>
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b80      	cmp	r3, #128	; 0x80
 8007d70:	d004      	beq.n	8007d7c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fbb8 	bl	80084ea <USBD_CtlError>
                break;
 8007d7a:	e091      	b.n	8007ea0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	da0b      	bge.n	8007d9c <USBD_StdEPReq+0x1a0>
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	3310      	adds	r3, #16
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	4413      	add	r3, r2
 8007d98:	3304      	adds	r3, #4
 8007d9a:	e00b      	b.n	8007db4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	4413      	add	r3, r2
 8007db2:	3304      	adds	r3, #4
 8007db4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fbfb 	bl	80085be <USBD_CtlSendData>
              break;
 8007dc8:	e06a      	b.n	8007ea0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	da11      	bge.n	8007df6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	f003 020f 	and.w	r2, r3, #15
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	3318      	adds	r3, #24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d117      	bne.n	8007e1c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fb7b 	bl	80084ea <USBD_CtlError>
                  break;
 8007df4:	e054      	b.n	8007ea0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	f003 020f 	and.w	r2, r3, #15
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	440b      	add	r3, r1
 8007e08:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d104      	bne.n	8007e1c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fb68 	bl	80084ea <USBD_CtlError>
                  break;
 8007e1a:	e041      	b.n	8007ea0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da0b      	bge.n	8007e3c <USBD_StdEPReq+0x240>
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	3310      	adds	r3, #16
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	4413      	add	r3, r2
 8007e38:	3304      	adds	r3, #4
 8007e3a:	e00b      	b.n	8007e54 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	4413      	add	r3, r2
 8007e52:	3304      	adds	r3, #4
 8007e54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <USBD_StdEPReq+0x266>
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b80      	cmp	r3, #128	; 0x80
 8007e60:	d103      	bne.n	8007e6a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	e00e      	b.n	8007e88 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 ffe8 	bl	8008e44 <USBD_LL_IsStallEP>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	e002      	b.n	8007e88 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fb95 	bl	80085be <USBD_CtlSendData>
              break;
 8007e94:	e004      	b.n	8007ea0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fb26 	bl	80084ea <USBD_CtlError>
              break;
 8007e9e:	bf00      	nop
          }
          break;
 8007ea0:	e004      	b.n	8007eac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fb20 	bl	80084ea <USBD_CtlError>
          break;
 8007eaa:	bf00      	nop
      }
      break;
 8007eac:	e004      	b.n	8007eb8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fb1a 	bl	80084ea <USBD_CtlError>
      break;
 8007eb6:	bf00      	nop
  }

  return ret;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	885b      	ldrh	r3, [r3, #2]
 8007ede:	0a1b      	lsrs	r3, r3, #8
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	2b06      	cmp	r3, #6
 8007ee6:	f200 8128 	bhi.w	800813a <USBD_GetDescriptor+0x276>
 8007eea:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <USBD_GetDescriptor+0x2c>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f0d 	.word	0x08007f0d
 8007ef4:	08007f25 	.word	0x08007f25
 8007ef8:	08007f65 	.word	0x08007f65
 8007efc:	0800813b 	.word	0x0800813b
 8007f00:	0800813b 	.word	0x0800813b
 8007f04:	080080db 	.word	0x080080db
 8007f08:	08008107 	.word	0x08008107
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	7c12      	ldrb	r2, [r2, #16]
 8007f18:	f107 0108 	add.w	r1, r7, #8
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4798      	blx	r3
 8007f20:	60f8      	str	r0, [r7, #12]
      break;
 8007f22:	e112      	b.n	800814a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7c1b      	ldrb	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10d      	bne.n	8007f48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	f107 0208 	add.w	r2, r7, #8
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4798      	blx	r3
 8007f3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	2202      	movs	r2, #2
 8007f44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f46:	e100      	b.n	800814a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	f107 0208 	add.w	r2, r7, #8
 8007f54:	4610      	mov	r0, r2
 8007f56:	4798      	blx	r3
 8007f58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	2202      	movs	r2, #2
 8007f60:	701a      	strb	r2, [r3, #0]
      break;
 8007f62:	e0f2      	b.n	800814a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	885b      	ldrh	r3, [r3, #2]
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b05      	cmp	r3, #5
 8007f6c:	f200 80ac 	bhi.w	80080c8 <USBD_GetDescriptor+0x204>
 8007f70:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <USBD_GetDescriptor+0xb4>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007f91 	.word	0x08007f91
 8007f7c:	08007fc5 	.word	0x08007fc5
 8007f80:	08007ff9 	.word	0x08007ff9
 8007f84:	0800802d 	.word	0x0800802d
 8007f88:	08008061 	.word	0x08008061
 8007f8c:	08008095 	.word	0x08008095
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	7c12      	ldrb	r2, [r2, #16]
 8007fa8:	f107 0108 	add.w	r1, r7, #8
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fb2:	e091      	b.n	80080d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa97 	bl	80084ea <USBD_CtlError>
            err++;
 8007fbc:	7afb      	ldrb	r3, [r7, #11]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fc2:	e089      	b.n	80080d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	7c12      	ldrb	r2, [r2, #16]
 8007fdc:	f107 0108 	add.w	r1, r7, #8
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4798      	blx	r3
 8007fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fe6:	e077      	b.n	80080d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa7d 	bl	80084ea <USBD_CtlError>
            err++;
 8007ff0:	7afb      	ldrb	r3, [r7, #11]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ff6:	e06f      	b.n	80080d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	7c12      	ldrb	r2, [r2, #16]
 8008010:	f107 0108 	add.w	r1, r7, #8
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
 8008018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800801a:	e05d      	b.n	80080d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa63 	bl	80084ea <USBD_CtlError>
            err++;
 8008024:	7afb      	ldrb	r3, [r7, #11]
 8008026:	3301      	adds	r3, #1
 8008028:	72fb      	strb	r3, [r7, #11]
          break;
 800802a:	e055      	b.n	80080d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7c12      	ldrb	r2, [r2, #16]
 8008044:	f107 0108 	add.w	r1, r7, #8
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800804e:	e043      	b.n	80080d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fa49 	bl	80084ea <USBD_CtlError>
            err++;
 8008058:	7afb      	ldrb	r3, [r7, #11]
 800805a:	3301      	adds	r3, #1
 800805c:	72fb      	strb	r3, [r7, #11]
          break;
 800805e:	e03b      	b.n	80080d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	7c12      	ldrb	r2, [r2, #16]
 8008078:	f107 0108 	add.w	r1, r7, #8
 800807c:	4610      	mov	r0, r2
 800807e:	4798      	blx	r3
 8008080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008082:	e029      	b.n	80080d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fa2f 	bl	80084ea <USBD_CtlError>
            err++;
 800808c:	7afb      	ldrb	r3, [r7, #11]
 800808e:	3301      	adds	r3, #1
 8008090:	72fb      	strb	r3, [r7, #11]
          break;
 8008092:	e021      	b.n	80080d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	7c12      	ldrb	r2, [r2, #16]
 80080ac:	f107 0108 	add.w	r1, r7, #8
 80080b0:	4610      	mov	r0, r2
 80080b2:	4798      	blx	r3
 80080b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080b6:	e00f      	b.n	80080d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fa15 	bl	80084ea <USBD_CtlError>
            err++;
 80080c0:	7afb      	ldrb	r3, [r7, #11]
 80080c2:	3301      	adds	r3, #1
 80080c4:	72fb      	strb	r3, [r7, #11]
          break;
 80080c6:	e007      	b.n	80080d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa0d 	bl	80084ea <USBD_CtlError>
          err++;
 80080d0:	7afb      	ldrb	r3, [r7, #11]
 80080d2:	3301      	adds	r3, #1
 80080d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80080d6:	e038      	b.n	800814a <USBD_GetDescriptor+0x286>
 80080d8:	e037      	b.n	800814a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	7c1b      	ldrb	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ea:	f107 0208 	add.w	r2, r7, #8
 80080ee:	4610      	mov	r0, r2
 80080f0:	4798      	blx	r3
 80080f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080f4:	e029      	b.n	800814a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f9f6 	bl	80084ea <USBD_CtlError>
        err++;
 80080fe:	7afb      	ldrb	r3, [r7, #11]
 8008100:	3301      	adds	r3, #1
 8008102:	72fb      	strb	r3, [r7, #11]
      break;
 8008104:	e021      	b.n	800814a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	7c1b      	ldrb	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10d      	bne.n	800812a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	f107 0208 	add.w	r2, r7, #8
 800811a:	4610      	mov	r0, r2
 800811c:	4798      	blx	r3
 800811e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	2207      	movs	r2, #7
 8008126:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008128:	e00f      	b.n	800814a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f9dc 	bl	80084ea <USBD_CtlError>
        err++;
 8008132:	7afb      	ldrb	r3, [r7, #11]
 8008134:	3301      	adds	r3, #1
 8008136:	72fb      	strb	r3, [r7, #11]
      break;
 8008138:	e007      	b.n	800814a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f9d4 	bl	80084ea <USBD_CtlError>
      err++;
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	3301      	adds	r3, #1
 8008146:	72fb      	strb	r3, [r7, #11]
      break;
 8008148:	bf00      	nop
  }

  if (err != 0U)
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d11c      	bne.n	800818a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008150:	893b      	ldrh	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d011      	beq.n	800817a <USBD_GetDescriptor+0x2b6>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	88db      	ldrh	r3, [r3, #6]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00d      	beq.n	800817a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	88da      	ldrh	r2, [r3, #6]
 8008162:	893b      	ldrh	r3, [r7, #8]
 8008164:	4293      	cmp	r3, r2
 8008166:	bf28      	it	cs
 8008168:	4613      	movcs	r3, r2
 800816a:	b29b      	uxth	r3, r3
 800816c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800816e:	893b      	ldrh	r3, [r7, #8]
 8008170:	461a      	mov	r2, r3
 8008172:	68f9      	ldr	r1, [r7, #12]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fa22 	bl	80085be <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	88db      	ldrh	r3, [r3, #6]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d104      	bne.n	800818c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa79 	bl	800867a <USBD_CtlSendStatus>
 8008188:	e000      	b.n	800818c <USBD_GetDescriptor+0x2c8>
    return;
 800818a:	bf00      	nop
    }
  }
}
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop

08008194 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	889b      	ldrh	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d130      	bne.n	8008208 <USBD_SetAddress+0x74>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88db      	ldrh	r3, [r3, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d12c      	bne.n	8008208 <USBD_SetAddress+0x74>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	885b      	ldrh	r3, [r3, #2]
 80081b2:	2b7f      	cmp	r3, #127	; 0x7f
 80081b4:	d828      	bhi.n	8008208 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d104      	bne.n	80081d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f98b 	bl	80084ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d4:	e01d      	b.n	8008212 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7bfa      	ldrb	r2, [r7, #15]
 80081da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fe5a 	bl	8008e9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fa46 	bl	800867a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081ee:	7bfb      	ldrb	r3, [r7, #15]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fc:	e009      	b.n	8008212 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008206:	e004      	b.n	8008212 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f96d 	bl	80084ea <USBD_CtlError>
  }
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	4b41      	ldr	r3, [pc, #260]	; (8008334 <USBD_SetConfig+0x118>)
 800822e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008230:	4b40      	ldr	r3, [pc, #256]	; (8008334 <USBD_SetConfig+0x118>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d904      	bls.n	8008242 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f955 	bl	80084ea <USBD_CtlError>
 8008240:	e075      	b.n	800832e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008248:	2b02      	cmp	r3, #2
 800824a:	d002      	beq.n	8008252 <USBD_SetConfig+0x36>
 800824c:	2b03      	cmp	r3, #3
 800824e:	d023      	beq.n	8008298 <USBD_SetConfig+0x7c>
 8008250:	e062      	b.n	8008318 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008252:	4b38      	ldr	r3, [pc, #224]	; (8008334 <USBD_SetConfig+0x118>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01a      	beq.n	8008290 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800825a:	4b36      	ldr	r3, [pc, #216]	; (8008334 <USBD_SetConfig+0x118>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2203      	movs	r2, #3
 8008268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800826c:	4b31      	ldr	r3, [pc, #196]	; (8008334 <USBD_SetConfig+0x118>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff f9e7 	bl	8007646 <USBD_SetClassConfig>
 8008278:	4603      	mov	r3, r0
 800827a:	2b02      	cmp	r3, #2
 800827c:	d104      	bne.n	8008288 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f932 	bl	80084ea <USBD_CtlError>
            return;
 8008286:	e052      	b.n	800832e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9f6 	bl	800867a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800828e:	e04e      	b.n	800832e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f9f2 	bl	800867a <USBD_CtlSendStatus>
        break;
 8008296:	e04a      	b.n	800832e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008298:	4b26      	ldr	r3, [pc, #152]	; (8008334 <USBD_SetConfig+0x118>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d112      	bne.n	80082c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80082a8:	4b22      	ldr	r3, [pc, #136]	; (8008334 <USBD_SetConfig+0x118>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80082b2:	4b20      	ldr	r3, [pc, #128]	; (8008334 <USBD_SetConfig+0x118>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff f9e3 	bl	8007684 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f9db 	bl	800867a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082c4:	e033      	b.n	800832e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80082c6:	4b1b      	ldr	r3, [pc, #108]	; (8008334 <USBD_SetConfig+0x118>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d01d      	beq.n	8008310 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff f9d1 	bl	8007684 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80082e2:	4b14      	ldr	r3, [pc, #80]	; (8008334 <USBD_SetConfig+0x118>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082ec:	4b11      	ldr	r3, [pc, #68]	; (8008334 <USBD_SetConfig+0x118>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff f9a7 	bl	8007646 <USBD_SetClassConfig>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d104      	bne.n	8008308 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f8f2 	bl	80084ea <USBD_CtlError>
            return;
 8008306:	e012      	b.n	800832e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f9b6 	bl	800867a <USBD_CtlSendStatus>
        break;
 800830e:	e00e      	b.n	800832e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f9b2 	bl	800867a <USBD_CtlSendStatus>
        break;
 8008316:	e00a      	b.n	800832e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f8e5 	bl	80084ea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008320:	4b04      	ldr	r3, [pc, #16]	; (8008334 <USBD_SetConfig+0x118>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7ff f9ac 	bl	8007684 <USBD_ClrClassConfig>
        break;
 800832c:	bf00      	nop
    }
  }
}
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	20000388 	.word	0x20000388

08008338 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	88db      	ldrh	r3, [r3, #6]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d004      	beq.n	8008354 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f8cc 	bl	80084ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008352:	e022      	b.n	800839a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835a:	2b02      	cmp	r3, #2
 800835c:	dc02      	bgt.n	8008364 <USBD_GetConfig+0x2c>
 800835e:	2b00      	cmp	r3, #0
 8008360:	dc03      	bgt.n	800836a <USBD_GetConfig+0x32>
 8008362:	e015      	b.n	8008390 <USBD_GetConfig+0x58>
 8008364:	2b03      	cmp	r3, #3
 8008366:	d00b      	beq.n	8008380 <USBD_GetConfig+0x48>
 8008368:	e012      	b.n	8008390 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3308      	adds	r3, #8
 8008374:	2201      	movs	r2, #1
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f920 	bl	80085be <USBD_CtlSendData>
        break;
 800837e:	e00c      	b.n	800839a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3304      	adds	r3, #4
 8008384:	2201      	movs	r2, #1
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f918 	bl	80085be <USBD_CtlSendData>
        break;
 800838e:	e004      	b.n	800839a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f8a9 	bl	80084ea <USBD_CtlError>
        break;
 8008398:	bf00      	nop
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b2:	3b01      	subs	r3, #1
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d81e      	bhi.n	80083f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	88db      	ldrh	r3, [r3, #6]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d004      	beq.n	80083ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f891 	bl	80084ea <USBD_CtlError>
        break;
 80083c8:	e01a      	b.n	8008400 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d005      	beq.n	80083e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f043 0202 	orr.w	r2, r3, #2
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	330c      	adds	r3, #12
 80083ea:	2202      	movs	r2, #2
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f8e5 	bl	80085be <USBD_CtlSendData>
      break;
 80083f4:	e004      	b.n	8008400 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f876 	bl	80084ea <USBD_CtlError>
      break;
 80083fe:	bf00      	nop
  }
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	885b      	ldrh	r3, [r3, #2]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d106      	bne.n	8008428 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f929 	bl	800867a <USBD_CtlSendStatus>
  }
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008440:	3b01      	subs	r3, #1
 8008442:	2b02      	cmp	r3, #2
 8008444:	d80b      	bhi.n	800845e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	885b      	ldrh	r3, [r3, #2]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d10c      	bne.n	8008468 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f90f 	bl	800867a <USBD_CtlSendStatus>
      }
      break;
 800845c:	e004      	b.n	8008468 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f842 	bl	80084ea <USBD_CtlError>
      break;
 8008466:	e000      	b.n	800846a <USBD_ClrFeature+0x3a>
      break;
 8008468:	bf00      	nop
  }
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781a      	ldrb	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	785a      	ldrb	r2, [r3, #1]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	3302      	adds	r3, #2
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	b29a      	uxth	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	3303      	adds	r3, #3
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	b29b      	uxth	r3, r3
 80084a0:	4413      	add	r3, r2
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	3304      	adds	r3, #4
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	3305      	adds	r3, #5
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	4413      	add	r3, r2
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	3306      	adds	r3, #6
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	3307      	adds	r3, #7
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	4413      	add	r3, r2
 80084da:	b29a      	uxth	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	80da      	strh	r2, [r3, #6]

}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bc80      	pop	{r7}
 80084e8:	4770      	bx	lr

080084ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80084f4:	2180      	movs	r1, #128	; 0x80
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fc66 	bl	8008dc8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fc62 	bl	8008dc8 <USBD_LL_StallEP>
}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d032      	beq.n	8008588 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 f834 	bl	8008590 <USBD_GetLen>
 8008528:	4603      	mov	r3, r0
 800852a:	3301      	adds	r3, #1
 800852c:	b29b      	uxth	r3, r3
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	75fa      	strb	r2, [r7, #23]
 800853c:	461a      	mov	r2, r3
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4413      	add	r3, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	7812      	ldrb	r2, [r2, #0]
 8008546:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	75fa      	strb	r2, [r7, #23]
 800854e:	461a      	mov	r2, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4413      	add	r3, r2
 8008554:	2203      	movs	r2, #3
 8008556:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008558:	e012      	b.n	8008580 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	60fa      	str	r2, [r7, #12]
 8008560:	7dfa      	ldrb	r2, [r7, #23]
 8008562:	1c51      	adds	r1, r2, #1
 8008564:	75f9      	strb	r1, [r7, #23]
 8008566:	4611      	mov	r1, r2
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	440a      	add	r2, r1
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	1c5a      	adds	r2, r3, #1
 8008574:	75fa      	strb	r2, [r7, #23]
 8008576:	461a      	mov	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4413      	add	r3, r2
 800857c:	2200      	movs	r2, #0
 800857e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e8      	bne.n	800855a <USBD_GetString+0x4e>
    }
  }
}
 8008588:	bf00      	nop
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800859c:	e005      	b.n	80085aa <USBD_GetLen+0x1a>
  {
    len++;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	3301      	adds	r3, #1
 80085a2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3301      	adds	r3, #1
 80085a8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f5      	bne.n	800859e <USBD_GetLen+0xe>
  }

  return len;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	4770      	bx	lr

080085be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	4613      	mov	r3, r2
 80085ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085d4:	88fa      	ldrh	r2, [r7, #6]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80085da:	88fa      	ldrh	r2, [r7, #6]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	2100      	movs	r1, #0
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 fc77 	bl	8008eda <USBD_LL_Transmit>

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	4613      	mov	r3, r2
 8008602:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	2100      	movs	r1, #0
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 fc65 	bl	8008eda <USBD_LL_Transmit>

  return USBD_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	4613      	mov	r3, r2
 8008626:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2203      	movs	r2, #3
 800862c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008640:	88fb      	ldrh	r3, [r7, #6]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	2100      	movs	r1, #0
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fc6a 	bl	8008f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	4613      	mov	r3, r2
 8008662:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008664:	88fb      	ldrh	r3, [r7, #6]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	2100      	movs	r1, #0
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fc58 	bl	8008f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2204      	movs	r2, #4
 8008686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800868a:	2300      	movs	r3, #0
 800868c:	2200      	movs	r2, #0
 800868e:	2100      	movs	r1, #0
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fc22 	bl	8008eda <USBD_LL_Transmit>

  return USBD_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2205      	movs	r2, #5
 80086ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086b0:	2300      	movs	r3, #0
 80086b2:	2200      	movs	r2, #0
 80086b4:	2100      	movs	r1, #0
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fc32 	bl	8008f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086cc:	2200      	movs	r2, #0
 80086ce:	4912      	ldr	r1, [pc, #72]	; (8008718 <MX_USB_DEVICE_Init+0x50>)
 80086d0:	4812      	ldr	r0, [pc, #72]	; (800871c <MX_USB_DEVICE_Init+0x54>)
 80086d2:	f7fe ff5e 	bl	8007592 <USBD_Init>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086dc:	f7f9 f968 	bl	80019b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086e0:	490f      	ldr	r1, [pc, #60]	; (8008720 <MX_USB_DEVICE_Init+0x58>)
 80086e2:	480e      	ldr	r0, [pc, #56]	; (800871c <MX_USB_DEVICE_Init+0x54>)
 80086e4:	f7fe ff80 	bl	80075e8 <USBD_RegisterClass>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086ee:	f7f9 f95f 	bl	80019b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80086f2:	490c      	ldr	r1, [pc, #48]	; (8008724 <MX_USB_DEVICE_Init+0x5c>)
 80086f4:	4809      	ldr	r0, [pc, #36]	; (800871c <MX_USB_DEVICE_Init+0x54>)
 80086f6:	f7fe feb1 	bl	800745c <USBD_CDC_RegisterInterface>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008700:	f7f9 f956 	bl	80019b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008704:	4805      	ldr	r0, [pc, #20]	; (800871c <MX_USB_DEVICE_Init+0x54>)
 8008706:	f7fe ff88 	bl	800761a <USBD_Start>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008710:	f7f9 f94e 	bl	80019b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008714:	bf00      	nop
 8008716:	bd80      	pop	{r7, pc}
 8008718:	2000013c 	.word	0x2000013c
 800871c:	20000704 	.word	0x20000704
 8008720:	20000028 	.word	0x20000028
 8008724:	2000012c 	.word	0x2000012c

08008728 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800872c:	2200      	movs	r2, #0
 800872e:	4905      	ldr	r1, [pc, #20]	; (8008744 <CDC_Init_FS+0x1c>)
 8008730:	4805      	ldr	r0, [pc, #20]	; (8008748 <CDC_Init_FS+0x20>)
 8008732:	f7fe fea9 	bl	8007488 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008736:	4905      	ldr	r1, [pc, #20]	; (800874c <CDC_Init_FS+0x24>)
 8008738:	4803      	ldr	r0, [pc, #12]	; (8008748 <CDC_Init_FS+0x20>)
 800873a:	f7fe febe 	bl	80074ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800873e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008740:	4618      	mov	r0, r3
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000af4 	.word	0x20000af4
 8008748:	20000704 	.word	0x20000704
 800874c:	200009c8 	.word	0x200009c8

08008750 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008754:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008756:	4618      	mov	r0, r3
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr
	...

08008760 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	6039      	str	r1, [r7, #0]
 800876a:	71fb      	strb	r3, [r7, #7]
 800876c:	4613      	mov	r3, r2
 800876e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	2b23      	cmp	r3, #35	; 0x23
 8008774:	d84a      	bhi.n	800880c <CDC_Control_FS+0xac>
 8008776:	a201      	add	r2, pc, #4	; (adr r2, 800877c <CDC_Control_FS+0x1c>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	0800880d 	.word	0x0800880d
 8008780:	0800880d 	.word	0x0800880d
 8008784:	0800880d 	.word	0x0800880d
 8008788:	0800880d 	.word	0x0800880d
 800878c:	0800880d 	.word	0x0800880d
 8008790:	0800880d 	.word	0x0800880d
 8008794:	0800880d 	.word	0x0800880d
 8008798:	0800880d 	.word	0x0800880d
 800879c:	0800880d 	.word	0x0800880d
 80087a0:	0800880d 	.word	0x0800880d
 80087a4:	0800880d 	.word	0x0800880d
 80087a8:	0800880d 	.word	0x0800880d
 80087ac:	0800880d 	.word	0x0800880d
 80087b0:	0800880d 	.word	0x0800880d
 80087b4:	0800880d 	.word	0x0800880d
 80087b8:	0800880d 	.word	0x0800880d
 80087bc:	0800880d 	.word	0x0800880d
 80087c0:	0800880d 	.word	0x0800880d
 80087c4:	0800880d 	.word	0x0800880d
 80087c8:	0800880d 	.word	0x0800880d
 80087cc:	0800880d 	.word	0x0800880d
 80087d0:	0800880d 	.word	0x0800880d
 80087d4:	0800880d 	.word	0x0800880d
 80087d8:	0800880d 	.word	0x0800880d
 80087dc:	0800880d 	.word	0x0800880d
 80087e0:	0800880d 	.word	0x0800880d
 80087e4:	0800880d 	.word	0x0800880d
 80087e8:	0800880d 	.word	0x0800880d
 80087ec:	0800880d 	.word	0x0800880d
 80087f0:	0800880d 	.word	0x0800880d
 80087f4:	0800880d 	.word	0x0800880d
 80087f8:	0800880d 	.word	0x0800880d
 80087fc:	0800880d 	.word	0x0800880d
 8008800:	0800880d 	.word	0x0800880d
 8008804:	0800880d 	.word	0x0800880d
 8008808:	0800880d 	.word	0x0800880d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800880c:	bf00      	nop
  }

  return (USBD_OK);
 800880e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop

0800881c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


	//memset(UserTxBufferFS, 0, sizeof(UserTxBufferFS));
	strncpy(UserTxBufferFS,(char*)Buf,*Len);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	480c      	ldr	r0, [pc, #48]	; (8008860 <CDC_Receive_FS+0x44>)
 8008830:	f000 fcfe 	bl	8009230 <strncpy>
	UserTxBufferFS[*Len] = 0;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a09      	ldr	r2, [pc, #36]	; (8008860 <CDC_Receive_FS+0x44>)
 800883a:	2100      	movs	r1, #0
 800883c:	54d1      	strb	r1, [r2, r3]

	CLI_Process_Command(UserTxBufferFS);
 800883e:	4808      	ldr	r0, [pc, #32]	; (8008860 <CDC_Receive_FS+0x44>)
 8008840:	f7f8 fc9e 	bl	8001180 <CLI_Process_Command>
	memset(UserTxBufferFS, 0, sizeof(UserTxBufferFS));
 8008844:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008848:	2100      	movs	r1, #0
 800884a:	4805      	ldr	r0, [pc, #20]	; (8008860 <CDC_Receive_FS+0x44>)
 800884c:	f000 fc20 	bl	8009090 <memset>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008850:	4804      	ldr	r0, [pc, #16]	; (8008864 <CDC_Receive_FS+0x48>)
 8008852:	f7fe fe74 	bl	800753e <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008856:	2300      	movs	r3, #0

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000af4 	.word	0x20000af4
 8008864:	20000704 	.word	0x20000704

08008868 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008878:	4b0d      	ldr	r3, [pc, #52]	; (80088b0 <CDC_Transmit_FS+0x48>)
 800887a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800888a:	2301      	movs	r3, #1
 800888c:	e00b      	b.n	80088a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800888e:	887b      	ldrh	r3, [r7, #2]
 8008890:	461a      	mov	r2, r3
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	4806      	ldr	r0, [pc, #24]	; (80088b0 <CDC_Transmit_FS+0x48>)
 8008896:	f7fe fdf7 	bl	8007488 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800889a:	4805      	ldr	r0, [pc, #20]	; (80088b0 <CDC_Transmit_FS+0x48>)
 800889c:	f7fe fe20 	bl	80074e0 <USBD_CDC_TransmitPacket>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20000704 	.word	0x20000704

080088b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2212      	movs	r2, #18
 80088c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088c6:	4b03      	ldr	r3, [pc, #12]	; (80088d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20000158 	.word	0x20000158

080088d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	6039      	str	r1, [r7, #0]
 80088e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2204      	movs	r2, #4
 80088e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088ea:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bc80      	pop	{r7}
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	2000016c 	.word	0x2000016c

080088fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	6039      	str	r1, [r7, #0]
 8008906:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d105      	bne.n	800891a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	4907      	ldr	r1, [pc, #28]	; (8008930 <USBD_FS_ProductStrDescriptor+0x34>)
 8008912:	4808      	ldr	r0, [pc, #32]	; (8008934 <USBD_FS_ProductStrDescriptor+0x38>)
 8008914:	f7ff fdfa 	bl	800850c <USBD_GetString>
 8008918:	e004      	b.n	8008924 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	4904      	ldr	r1, [pc, #16]	; (8008930 <USBD_FS_ProductStrDescriptor+0x34>)
 800891e:	4805      	ldr	r0, [pc, #20]	; (8008934 <USBD_FS_ProductStrDescriptor+0x38>)
 8008920:	f7ff fdf4 	bl	800850c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008924:	4b02      	ldr	r3, [pc, #8]	; (8008930 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000c20 	.word	0x20000c20
 8008934:	0800c1d4 	.word	0x0800c1d4

08008938 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	6039      	str	r1, [r7, #0]
 8008942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	4904      	ldr	r1, [pc, #16]	; (8008958 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008948:	4804      	ldr	r0, [pc, #16]	; (800895c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800894a:	f7ff fddf 	bl	800850c <USBD_GetString>
  return USBD_StrDesc;
 800894e:	4b02      	ldr	r3, [pc, #8]	; (8008958 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20000c20 	.word	0x20000c20
 800895c:	0800c1f0 	.word	0x0800c1f0

08008960 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	221a      	movs	r2, #26
 8008970:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008972:	f000 f843 	bl	80089fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008976:	4b02      	ldr	r3, [pc, #8]	; (8008980 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20000170 	.word	0x20000170

08008984 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	6039      	str	r1, [r7, #0]
 800898e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	4907      	ldr	r1, [pc, #28]	; (80089b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800899a:	4808      	ldr	r0, [pc, #32]	; (80089bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800899c:	f7ff fdb6 	bl	800850c <USBD_GetString>
 80089a0:	e004      	b.n	80089ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	4904      	ldr	r1, [pc, #16]	; (80089b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089a6:	4805      	ldr	r0, [pc, #20]	; (80089bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80089a8:	f7ff fdb0 	bl	800850c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089ac:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	20000c20 	.word	0x20000c20
 80089bc:	0800c204 	.word	0x0800c204

080089c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	6039      	str	r1, [r7, #0]
 80089ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d105      	bne.n	80089de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	4907      	ldr	r1, [pc, #28]	; (80089f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089d6:	4808      	ldr	r0, [pc, #32]	; (80089f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089d8:	f7ff fd98 	bl	800850c <USBD_GetString>
 80089dc:	e004      	b.n	80089e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	4904      	ldr	r1, [pc, #16]	; (80089f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089e2:	4805      	ldr	r0, [pc, #20]	; (80089f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089e4:	f7ff fd92 	bl	800850c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089e8:	4b02      	ldr	r3, [pc, #8]	; (80089f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20000c20 	.word	0x20000c20
 80089f8:	0800c210 	.word	0x0800c210

080089fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a02:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <Get_SerialNum+0x44>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a08:	4b0e      	ldr	r3, [pc, #56]	; (8008a44 <Get_SerialNum+0x48>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a0e:	4b0e      	ldr	r3, [pc, #56]	; (8008a48 <Get_SerialNum+0x4c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4413      	add	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a22:	2208      	movs	r2, #8
 8008a24:	4909      	ldr	r1, [pc, #36]	; (8008a4c <Get_SerialNum+0x50>)
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f814 	bl	8008a54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	4908      	ldr	r1, [pc, #32]	; (8008a50 <Get_SerialNum+0x54>)
 8008a30:	68b8      	ldr	r0, [r7, #8]
 8008a32:	f000 f80f 	bl	8008a54 <IntToUnicode>
  }
}
 8008a36:	bf00      	nop
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	1ffff7e8 	.word	0x1ffff7e8
 8008a44:	1ffff7ec 	.word	0x1ffff7ec
 8008a48:	1ffff7f0 	.word	0x1ffff7f0
 8008a4c:	20000172 	.word	0x20000172
 8008a50:	20000182 	.word	0x20000182

08008a54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a66:	2300      	movs	r3, #0
 8008a68:	75fb      	strb	r3, [r7, #23]
 8008a6a:	e027      	b.n	8008abc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	0f1b      	lsrs	r3, r3, #28
 8008a70:	2b09      	cmp	r3, #9
 8008a72:	d80b      	bhi.n	8008a8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	0f1b      	lsrs	r3, r3, #28
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	4619      	mov	r1, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	440b      	add	r3, r1
 8008a84:	3230      	adds	r2, #48	; 0x30
 8008a86:	b2d2      	uxtb	r2, r2
 8008a88:	701a      	strb	r2, [r3, #0]
 8008a8a:	e00a      	b.n	8008aa2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	0f1b      	lsrs	r3, r3, #28
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	4619      	mov	r1, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	440b      	add	r3, r1
 8008a9c:	3237      	adds	r2, #55	; 0x37
 8008a9e:	b2d2      	uxtb	r2, r2
 8008aa0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	3301      	adds	r3, #1
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	75fb      	strb	r3, [r7, #23]
 8008abc:	7dfa      	ldrb	r2, [r7, #23]
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d3d3      	bcc.n	8008a6c <IntToUnicode+0x18>
  }
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bc80      	pop	{r7}
 8008ace:	4770      	bx	lr

08008ad0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a0d      	ldr	r2, [pc, #52]	; (8008b14 <HAL_PCD_MspInit+0x44>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d113      	bne.n	8008b0a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <HAL_PCD_MspInit+0x48>)
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	4a0c      	ldr	r2, [pc, #48]	; (8008b18 <HAL_PCD_MspInit+0x48>)
 8008ae8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008aec:	61d3      	str	r3, [r2, #28]
 8008aee:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <HAL_PCD_MspInit+0x48>)
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008afa:	2200      	movs	r2, #0
 8008afc:	2100      	movs	r1, #0
 8008afe:	2014      	movs	r0, #20
 8008b00:	f7f9 fa47 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008b04:	2014      	movs	r0, #20
 8008b06:	f7f9 fa60 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	40005c00 	.word	0x40005c00
 8008b18:	40021000 	.word	0x40021000

08008b1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008b30:	4619      	mov	r1, r3
 8008b32:	4610      	mov	r0, r2
 8008b34:	f7fe fdb9 	bl	80076aa <USBD_LL_SetupStage>
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	440b      	add	r3, r1
 8008b60:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	78fb      	ldrb	r3, [r7, #3]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f7fe fdeb 	bl	8007744 <USBD_LL_DataOutStage>
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	440b      	add	r3, r1
 8008b96:	333c      	adds	r3, #60	; 0x3c
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f7fe fe42 	bl	8007826 <USBD_LL_DataInStage>
}
 8008ba2:	bf00      	nop
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fe ff52 	bl	8007a62 <USBD_LL_SOF>
}
 8008bbe:	bf00      	nop
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d001      	beq.n	8008bde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008bda:	f7f8 fee9 	bl	80019b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008be4:	7bfa      	ldrb	r2, [r7, #15]
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe ff02 	bl	80079f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fe febb 	bl	8007970 <USBD_LL_Reset>
}
 8008bfa:	bf00      	nop
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fefc 	bl	8007a10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c20:	4b04      	ldr	r3, [pc, #16]	; (8008c34 <HAL_PCD_SuspendCallback+0x30>)
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	4a03      	ldr	r2, [pc, #12]	; (8008c34 <HAL_PCD_SuspendCallback+0x30>)
 8008c26:	f043 0306 	orr.w	r3, r3, #6
 8008c2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	e000ed00 	.word	0xe000ed00

08008c38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fef6 	bl	8007a38 <USBD_LL_Resume>
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008c5c:	4a28      	ldr	r2, [pc, #160]	; (8008d00 <USBD_LL_Init+0xac>)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a26      	ldr	r2, [pc, #152]	; (8008d00 <USBD_LL_Init+0xac>)
 8008c68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008c6c:	4b24      	ldr	r3, [pc, #144]	; (8008d00 <USBD_LL_Init+0xac>)
 8008c6e:	4a25      	ldr	r2, [pc, #148]	; (8008d04 <USBD_LL_Init+0xb0>)
 8008c70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008c72:	4b23      	ldr	r3, [pc, #140]	; (8008d00 <USBD_LL_Init+0xac>)
 8008c74:	2208      	movs	r2, #8
 8008c76:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008c78:	4b21      	ldr	r3, [pc, #132]	; (8008d00 <USBD_LL_Init+0xac>)
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008c7e:	4b20      	ldr	r3, [pc, #128]	; (8008d00 <USBD_LL_Init+0xac>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008c84:	4b1e      	ldr	r3, [pc, #120]	; (8008d00 <USBD_LL_Init+0xac>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008c8a:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <USBD_LL_Init+0xac>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008c90:	481b      	ldr	r0, [pc, #108]	; (8008d00 <USBD_LL_Init+0xac>)
 8008c92:	f7f9 fb51 	bl	8002338 <HAL_PCD_Init>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008c9c:	f7f8 fe88 	bl	80019b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ca6:	2318      	movs	r3, #24
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2100      	movs	r1, #0
 8008cac:	f7fa ffc7 	bl	8003c3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cb6:	2358      	movs	r3, #88	; 0x58
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2180      	movs	r1, #128	; 0x80
 8008cbc:	f7fa ffbf 	bl	8003c3e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cc6:	23c0      	movs	r3, #192	; 0xc0
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2181      	movs	r1, #129	; 0x81
 8008ccc:	f7fa ffb7 	bl	8003c3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cd6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2101      	movs	r1, #1
 8008cde:	f7fa ffae 	bl	8003c3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cec:	2200      	movs	r2, #0
 8008cee:	2182      	movs	r1, #130	; 0x82
 8008cf0:	f7fa ffa5 	bl	8003c3e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000e20 	.word	0x20000e20
 8008d04:	40005c00 	.word	0x40005c00

08008d08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7f9 fc15 	bl	800254e <HAL_PCD_Start>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 f94e 	bl	8008fcc <USBD_Get_USB_Status>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	70fb      	strb	r3, [r7, #3]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70bb      	strb	r3, [r7, #2]
 8008d54:	4613      	mov	r3, r2
 8008d56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d66:	78bb      	ldrb	r3, [r7, #2]
 8008d68:	883a      	ldrh	r2, [r7, #0]
 8008d6a:	78f9      	ldrb	r1, [r7, #3]
 8008d6c:	f7f9 fd8f 	bl	800288e <HAL_PCD_EP_Open>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 f928 	bl	8008fcc <USBD_Get_USB_Status>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008da4:	78fa      	ldrb	r2, [r7, #3]
 8008da6:	4611      	mov	r1, r2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f9 fdd6 	bl	800295a <HAL_PCD_EP_Close>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f909 	bl	8008fcc <USBD_Get_USB_Status>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008de2:	78fa      	ldrb	r2, [r7, #3]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7f9 fe96 	bl	8002b18 <HAL_PCD_EP_SetStall>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 f8ea 	bl	8008fcc <USBD_Get_USB_Status>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e20:	78fa      	ldrb	r2, [r7, #3]
 8008e22:	4611      	mov	r1, r2
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7f9 fed7 	bl	8002bd8 <HAL_PCD_EP_ClrStall>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f8cb 	bl	8008fcc <USBD_Get_USB_Status>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da0c      	bge.n	8008e7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	440b      	add	r3, r1
 8008e74:	3302      	adds	r3, #2
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	e00b      	b.n	8008e92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e7a:	78fb      	ldrb	r3, [r7, #3]
 8008e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e80:	68f9      	ldr	r1, [r7, #12]
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	00db      	lsls	r3, r3, #3
 8008e8a:	440b      	add	r3, r1
 8008e8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008e90:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bc80      	pop	{r7}
 8008e9a:	4770      	bx	lr

08008e9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7f9 fcc2 	bl	8002844 <HAL_PCD_SetAddress>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f880 	bl	8008fcc <USBD_Get_USB_Status>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	72fb      	strb	r3, [r7, #11]
 8008eea:	4613      	mov	r3, r2
 8008eec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008efc:	893b      	ldrh	r3, [r7, #8]
 8008efe:	7af9      	ldrb	r1, [r7, #11]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	f7f9 fdc6 	bl	8002a92 <HAL_PCD_EP_Transmit>
 8008f06:	4603      	mov	r3, r0
 8008f08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 f85d 	bl	8008fcc <USBD_Get_USB_Status>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f16:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	607a      	str	r2, [r7, #4]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	72fb      	strb	r3, [r7, #11]
 8008f30:	4613      	mov	r3, r2
 8008f32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f42:	893b      	ldrh	r3, [r7, #8]
 8008f44:	7af9      	ldrb	r1, [r7, #11]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	f7f9 fd4f 	bl	80029ea <HAL_PCD_EP_Receive>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f83a 	bl	8008fcc <USBD_Get_USB_Status>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f78:	78fa      	ldrb	r2, [r7, #3]
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7f9 fd71 	bl	8002a64 <HAL_PCD_EP_GetRxCount>
 8008f82:	4603      	mov	r3, r0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f94:	4b02      	ldr	r3, [pc, #8]	; (8008fa0 <USBD_static_malloc+0x14>)
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bc80      	pop	{r7}
 8008f9e:	4770      	bx	lr
 8008fa0:	2000038c 	.word	0x2000038c

08008fa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]

}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr

08008fb6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008fc2:	bf00      	nop
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr

08008fcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d817      	bhi.n	8009010 <USBD_Get_USB_Status+0x44>
 8008fe0:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <USBD_Get_USB_Status+0x1c>)
 8008fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe6:	bf00      	nop
 8008fe8:	08008ff9 	.word	0x08008ff9
 8008fec:	08008fff 	.word	0x08008fff
 8008ff0:	08009005 	.word	0x08009005
 8008ff4:	0800900b 	.word	0x0800900b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffc:	e00b      	b.n	8009016 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ffe:	2302      	movs	r3, #2
 8009000:	73fb      	strb	r3, [r7, #15]
    break;
 8009002:	e008      	b.n	8009016 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009004:	2301      	movs	r3, #1
 8009006:	73fb      	strb	r3, [r7, #15]
    break;
 8009008:	e005      	b.n	8009016 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800900a:	2302      	movs	r3, #2
 800900c:	73fb      	strb	r3, [r7, #15]
    break;
 800900e:	e002      	b.n	8009016 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009010:	2302      	movs	r3, #2
 8009012:	73fb      	strb	r3, [r7, #15]
    break;
 8009014:	bf00      	nop
  }
  return usb_status;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop

08009024 <atof>:
 8009024:	2100      	movs	r1, #0
 8009026:	f000 bf2b 	b.w	8009e80 <strtod>
	...

0800902c <__errno>:
 800902c:	4b01      	ldr	r3, [pc, #4]	; (8009034 <__errno+0x8>)
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	2000018c 	.word	0x2000018c

08009038 <__libc_init_array>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	2600      	movs	r6, #0
 800903c:	4d0c      	ldr	r5, [pc, #48]	; (8009070 <__libc_init_array+0x38>)
 800903e:	4c0d      	ldr	r4, [pc, #52]	; (8009074 <__libc_init_array+0x3c>)
 8009040:	1b64      	subs	r4, r4, r5
 8009042:	10a4      	asrs	r4, r4, #2
 8009044:	42a6      	cmp	r6, r4
 8009046:	d109      	bne.n	800905c <__libc_init_array+0x24>
 8009048:	f003 f85a 	bl	800c100 <_init>
 800904c:	2600      	movs	r6, #0
 800904e:	4d0a      	ldr	r5, [pc, #40]	; (8009078 <__libc_init_array+0x40>)
 8009050:	4c0a      	ldr	r4, [pc, #40]	; (800907c <__libc_init_array+0x44>)
 8009052:	1b64      	subs	r4, r4, r5
 8009054:	10a4      	asrs	r4, r4, #2
 8009056:	42a6      	cmp	r6, r4
 8009058:	d105      	bne.n	8009066 <__libc_init_array+0x2e>
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009060:	4798      	blx	r3
 8009062:	3601      	adds	r6, #1
 8009064:	e7ee      	b.n	8009044 <__libc_init_array+0xc>
 8009066:	f855 3b04 	ldr.w	r3, [r5], #4
 800906a:	4798      	blx	r3
 800906c:	3601      	adds	r6, #1
 800906e:	e7f2      	b.n	8009056 <__libc_init_array+0x1e>
 8009070:	0800c664 	.word	0x0800c664
 8009074:	0800c664 	.word	0x0800c664
 8009078:	0800c664 	.word	0x0800c664
 800907c:	0800c668 	.word	0x0800c668

08009080 <malloc>:
 8009080:	4b02      	ldr	r3, [pc, #8]	; (800908c <malloc+0xc>)
 8009082:	4601      	mov	r1, r0
 8009084:	6818      	ldr	r0, [r3, #0]
 8009086:	f000 b857 	b.w	8009138 <_malloc_r>
 800908a:	bf00      	nop
 800908c:	2000018c 	.word	0x2000018c

08009090 <memset>:
 8009090:	4603      	mov	r3, r0
 8009092:	4402      	add	r2, r0
 8009094:	4293      	cmp	r3, r2
 8009096:	d100      	bne.n	800909a <memset+0xa>
 8009098:	4770      	bx	lr
 800909a:	f803 1b01 	strb.w	r1, [r3], #1
 800909e:	e7f9      	b.n	8009094 <memset+0x4>

080090a0 <_free_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4605      	mov	r5, r0
 80090a4:	2900      	cmp	r1, #0
 80090a6:	d043      	beq.n	8009130 <_free_r+0x90>
 80090a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ac:	1f0c      	subs	r4, r1, #4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfb8      	it	lt
 80090b2:	18e4      	addlt	r4, r4, r3
 80090b4:	f001 fb90 	bl	800a7d8 <__malloc_lock>
 80090b8:	4a1e      	ldr	r2, [pc, #120]	; (8009134 <_free_r+0x94>)
 80090ba:	6813      	ldr	r3, [r2, #0]
 80090bc:	4610      	mov	r0, r2
 80090be:	b933      	cbnz	r3, 80090ce <_free_r+0x2e>
 80090c0:	6063      	str	r3, [r4, #4]
 80090c2:	6014      	str	r4, [r2, #0]
 80090c4:	4628      	mov	r0, r5
 80090c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ca:	f001 bb8b 	b.w	800a7e4 <__malloc_unlock>
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	d90a      	bls.n	80090e8 <_free_r+0x48>
 80090d2:	6821      	ldr	r1, [r4, #0]
 80090d4:	1862      	adds	r2, r4, r1
 80090d6:	4293      	cmp	r3, r2
 80090d8:	bf01      	itttt	eq
 80090da:	681a      	ldreq	r2, [r3, #0]
 80090dc:	685b      	ldreq	r3, [r3, #4]
 80090de:	1852      	addeq	r2, r2, r1
 80090e0:	6022      	streq	r2, [r4, #0]
 80090e2:	6063      	str	r3, [r4, #4]
 80090e4:	6004      	str	r4, [r0, #0]
 80090e6:	e7ed      	b.n	80090c4 <_free_r+0x24>
 80090e8:	461a      	mov	r2, r3
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	b10b      	cbz	r3, 80090f2 <_free_r+0x52>
 80090ee:	42a3      	cmp	r3, r4
 80090f0:	d9fa      	bls.n	80090e8 <_free_r+0x48>
 80090f2:	6811      	ldr	r1, [r2, #0]
 80090f4:	1850      	adds	r0, r2, r1
 80090f6:	42a0      	cmp	r0, r4
 80090f8:	d10b      	bne.n	8009112 <_free_r+0x72>
 80090fa:	6820      	ldr	r0, [r4, #0]
 80090fc:	4401      	add	r1, r0
 80090fe:	1850      	adds	r0, r2, r1
 8009100:	4283      	cmp	r3, r0
 8009102:	6011      	str	r1, [r2, #0]
 8009104:	d1de      	bne.n	80090c4 <_free_r+0x24>
 8009106:	6818      	ldr	r0, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	4401      	add	r1, r0
 800910c:	6011      	str	r1, [r2, #0]
 800910e:	6053      	str	r3, [r2, #4]
 8009110:	e7d8      	b.n	80090c4 <_free_r+0x24>
 8009112:	d902      	bls.n	800911a <_free_r+0x7a>
 8009114:	230c      	movs	r3, #12
 8009116:	602b      	str	r3, [r5, #0]
 8009118:	e7d4      	b.n	80090c4 <_free_r+0x24>
 800911a:	6820      	ldr	r0, [r4, #0]
 800911c:	1821      	adds	r1, r4, r0
 800911e:	428b      	cmp	r3, r1
 8009120:	bf01      	itttt	eq
 8009122:	6819      	ldreq	r1, [r3, #0]
 8009124:	685b      	ldreq	r3, [r3, #4]
 8009126:	1809      	addeq	r1, r1, r0
 8009128:	6021      	streq	r1, [r4, #0]
 800912a:	6063      	str	r3, [r4, #4]
 800912c:	6054      	str	r4, [r2, #4]
 800912e:	e7c9      	b.n	80090c4 <_free_r+0x24>
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	bf00      	nop
 8009134:	200005ac 	.word	0x200005ac

08009138 <_malloc_r>:
 8009138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913a:	1ccd      	adds	r5, r1, #3
 800913c:	f025 0503 	bic.w	r5, r5, #3
 8009140:	3508      	adds	r5, #8
 8009142:	2d0c      	cmp	r5, #12
 8009144:	bf38      	it	cc
 8009146:	250c      	movcc	r5, #12
 8009148:	2d00      	cmp	r5, #0
 800914a:	4606      	mov	r6, r0
 800914c:	db01      	blt.n	8009152 <_malloc_r+0x1a>
 800914e:	42a9      	cmp	r1, r5
 8009150:	d903      	bls.n	800915a <_malloc_r+0x22>
 8009152:	230c      	movs	r3, #12
 8009154:	6033      	str	r3, [r6, #0]
 8009156:	2000      	movs	r0, #0
 8009158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800915a:	f001 fb3d 	bl	800a7d8 <__malloc_lock>
 800915e:	4921      	ldr	r1, [pc, #132]	; (80091e4 <_malloc_r+0xac>)
 8009160:	680a      	ldr	r2, [r1, #0]
 8009162:	4614      	mov	r4, r2
 8009164:	b99c      	cbnz	r4, 800918e <_malloc_r+0x56>
 8009166:	4f20      	ldr	r7, [pc, #128]	; (80091e8 <_malloc_r+0xb0>)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	b923      	cbnz	r3, 8009176 <_malloc_r+0x3e>
 800916c:	4621      	mov	r1, r4
 800916e:	4630      	mov	r0, r6
 8009170:	f000 f83c 	bl	80091ec <_sbrk_r>
 8009174:	6038      	str	r0, [r7, #0]
 8009176:	4629      	mov	r1, r5
 8009178:	4630      	mov	r0, r6
 800917a:	f000 f837 	bl	80091ec <_sbrk_r>
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d123      	bne.n	80091ca <_malloc_r+0x92>
 8009182:	230c      	movs	r3, #12
 8009184:	4630      	mov	r0, r6
 8009186:	6033      	str	r3, [r6, #0]
 8009188:	f001 fb2c 	bl	800a7e4 <__malloc_unlock>
 800918c:	e7e3      	b.n	8009156 <_malloc_r+0x1e>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	1b5b      	subs	r3, r3, r5
 8009192:	d417      	bmi.n	80091c4 <_malloc_r+0x8c>
 8009194:	2b0b      	cmp	r3, #11
 8009196:	d903      	bls.n	80091a0 <_malloc_r+0x68>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	441c      	add	r4, r3
 800919c:	6025      	str	r5, [r4, #0]
 800919e:	e004      	b.n	80091aa <_malloc_r+0x72>
 80091a0:	6863      	ldr	r3, [r4, #4]
 80091a2:	42a2      	cmp	r2, r4
 80091a4:	bf0c      	ite	eq
 80091a6:	600b      	streq	r3, [r1, #0]
 80091a8:	6053      	strne	r3, [r2, #4]
 80091aa:	4630      	mov	r0, r6
 80091ac:	f001 fb1a 	bl	800a7e4 <__malloc_unlock>
 80091b0:	f104 000b 	add.w	r0, r4, #11
 80091b4:	1d23      	adds	r3, r4, #4
 80091b6:	f020 0007 	bic.w	r0, r0, #7
 80091ba:	1ac2      	subs	r2, r0, r3
 80091bc:	d0cc      	beq.n	8009158 <_malloc_r+0x20>
 80091be:	1a1b      	subs	r3, r3, r0
 80091c0:	50a3      	str	r3, [r4, r2]
 80091c2:	e7c9      	b.n	8009158 <_malloc_r+0x20>
 80091c4:	4622      	mov	r2, r4
 80091c6:	6864      	ldr	r4, [r4, #4]
 80091c8:	e7cc      	b.n	8009164 <_malloc_r+0x2c>
 80091ca:	1cc4      	adds	r4, r0, #3
 80091cc:	f024 0403 	bic.w	r4, r4, #3
 80091d0:	42a0      	cmp	r0, r4
 80091d2:	d0e3      	beq.n	800919c <_malloc_r+0x64>
 80091d4:	1a21      	subs	r1, r4, r0
 80091d6:	4630      	mov	r0, r6
 80091d8:	f000 f808 	bl	80091ec <_sbrk_r>
 80091dc:	3001      	adds	r0, #1
 80091de:	d1dd      	bne.n	800919c <_malloc_r+0x64>
 80091e0:	e7cf      	b.n	8009182 <_malloc_r+0x4a>
 80091e2:	bf00      	nop
 80091e4:	200005ac 	.word	0x200005ac
 80091e8:	200005b0 	.word	0x200005b0

080091ec <_sbrk_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	2300      	movs	r3, #0
 80091f0:	4d05      	ldr	r5, [pc, #20]	; (8009208 <_sbrk_r+0x1c>)
 80091f2:	4604      	mov	r4, r0
 80091f4:	4608      	mov	r0, r1
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	f7f8 fd0c 	bl	8001c14 <_sbrk>
 80091fc:	1c43      	adds	r3, r0, #1
 80091fe:	d102      	bne.n	8009206 <_sbrk_r+0x1a>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	b103      	cbz	r3, 8009206 <_sbrk_r+0x1a>
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	bd38      	pop	{r3, r4, r5, pc}
 8009208:	20001118 	.word	0x20001118

0800920c <strncmp>:
 800920c:	b510      	push	{r4, lr}
 800920e:	b16a      	cbz	r2, 800922c <strncmp+0x20>
 8009210:	3901      	subs	r1, #1
 8009212:	1884      	adds	r4, r0, r2
 8009214:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009218:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800921c:	4293      	cmp	r3, r2
 800921e:	d103      	bne.n	8009228 <strncmp+0x1c>
 8009220:	42a0      	cmp	r0, r4
 8009222:	d001      	beq.n	8009228 <strncmp+0x1c>
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1f5      	bne.n	8009214 <strncmp+0x8>
 8009228:	1a98      	subs	r0, r3, r2
 800922a:	bd10      	pop	{r4, pc}
 800922c:	4610      	mov	r0, r2
 800922e:	e7fc      	b.n	800922a <strncmp+0x1e>

08009230 <strncpy>:
 8009230:	4603      	mov	r3, r0
 8009232:	b510      	push	{r4, lr}
 8009234:	3901      	subs	r1, #1
 8009236:	b132      	cbz	r2, 8009246 <strncpy+0x16>
 8009238:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800923c:	3a01      	subs	r2, #1
 800923e:	f803 4b01 	strb.w	r4, [r3], #1
 8009242:	2c00      	cmp	r4, #0
 8009244:	d1f7      	bne.n	8009236 <strncpy+0x6>
 8009246:	2100      	movs	r1, #0
 8009248:	441a      	add	r2, r3
 800924a:	4293      	cmp	r3, r2
 800924c:	d100      	bne.n	8009250 <strncpy+0x20>
 800924e:	bd10      	pop	{r4, pc}
 8009250:	f803 1b01 	strb.w	r1, [r3], #1
 8009254:	e7f9      	b.n	800924a <strncpy+0x1a>

08009256 <sulp>:
 8009256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800925a:	460f      	mov	r7, r1
 800925c:	4690      	mov	r8, r2
 800925e:	f001 fe37 	bl	800aed0 <__ulp>
 8009262:	4604      	mov	r4, r0
 8009264:	460d      	mov	r5, r1
 8009266:	f1b8 0f00 	cmp.w	r8, #0
 800926a:	d011      	beq.n	8009290 <sulp+0x3a>
 800926c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009270:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009274:	2b00      	cmp	r3, #0
 8009276:	dd0b      	ble.n	8009290 <sulp+0x3a>
 8009278:	2400      	movs	r4, #0
 800927a:	051b      	lsls	r3, r3, #20
 800927c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009280:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009284:	4622      	mov	r2, r4
 8009286:	462b      	mov	r3, r5
 8009288:	f7f7 f926 	bl	80004d8 <__aeabi_dmul>
 800928c:	4604      	mov	r4, r0
 800928e:	460d      	mov	r5, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009298 <_strtod_l>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	469b      	mov	fp, r3
 800929e:	2300      	movs	r3, #0
 80092a0:	b0a1      	sub	sp, #132	; 0x84
 80092a2:	931c      	str	r3, [sp, #112]	; 0x70
 80092a4:	4ba1      	ldr	r3, [pc, #644]	; (800952c <_strtod_l+0x294>)
 80092a6:	4682      	mov	sl, r0
 80092a8:	681f      	ldr	r7, [r3, #0]
 80092aa:	460e      	mov	r6, r1
 80092ac:	4638      	mov	r0, r7
 80092ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80092b0:	f7f6 ff4e 	bl	8000150 <strlen>
 80092b4:	f04f 0800 	mov.w	r8, #0
 80092b8:	4604      	mov	r4, r0
 80092ba:	f04f 0900 	mov.w	r9, #0
 80092be:	961b      	str	r6, [sp, #108]	; 0x6c
 80092c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092c2:	781a      	ldrb	r2, [r3, #0]
 80092c4:	2a2b      	cmp	r2, #43	; 0x2b
 80092c6:	d04c      	beq.n	8009362 <_strtod_l+0xca>
 80092c8:	d83a      	bhi.n	8009340 <_strtod_l+0xa8>
 80092ca:	2a0d      	cmp	r2, #13
 80092cc:	d833      	bhi.n	8009336 <_strtod_l+0x9e>
 80092ce:	2a08      	cmp	r2, #8
 80092d0:	d833      	bhi.n	800933a <_strtod_l+0xa2>
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	d03d      	beq.n	8009352 <_strtod_l+0xba>
 80092d6:	2300      	movs	r3, #0
 80092d8:	930c      	str	r3, [sp, #48]	; 0x30
 80092da:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80092dc:	782b      	ldrb	r3, [r5, #0]
 80092de:	2b30      	cmp	r3, #48	; 0x30
 80092e0:	f040 80af 	bne.w	8009442 <_strtod_l+0x1aa>
 80092e4:	786b      	ldrb	r3, [r5, #1]
 80092e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092ea:	2b58      	cmp	r3, #88	; 0x58
 80092ec:	d16c      	bne.n	80093c8 <_strtod_l+0x130>
 80092ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092f0:	4650      	mov	r0, sl
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	ab1c      	add	r3, sp, #112	; 0x70
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4a8d      	ldr	r2, [pc, #564]	; (8009530 <_strtod_l+0x298>)
 80092fa:	f8cd b008 	str.w	fp, [sp, #8]
 80092fe:	ab1d      	add	r3, sp, #116	; 0x74
 8009300:	a91b      	add	r1, sp, #108	; 0x6c
 8009302:	f000 ff47 	bl	800a194 <__gethex>
 8009306:	f010 0607 	ands.w	r6, r0, #7
 800930a:	4604      	mov	r4, r0
 800930c:	d005      	beq.n	800931a <_strtod_l+0x82>
 800930e:	2e06      	cmp	r6, #6
 8009310:	d129      	bne.n	8009366 <_strtod_l+0xce>
 8009312:	2300      	movs	r3, #0
 8009314:	3501      	adds	r5, #1
 8009316:	951b      	str	r5, [sp, #108]	; 0x6c
 8009318:	930c      	str	r3, [sp, #48]	; 0x30
 800931a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800931c:	2b00      	cmp	r3, #0
 800931e:	f040 8596 	bne.w	8009e4e <_strtod_l+0xbb6>
 8009322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009324:	b1d3      	cbz	r3, 800935c <_strtod_l+0xc4>
 8009326:	4642      	mov	r2, r8
 8009328:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800932c:	4610      	mov	r0, r2
 800932e:	4619      	mov	r1, r3
 8009330:	b021      	add	sp, #132	; 0x84
 8009332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009336:	2a20      	cmp	r2, #32
 8009338:	d1cd      	bne.n	80092d6 <_strtod_l+0x3e>
 800933a:	3301      	adds	r3, #1
 800933c:	931b      	str	r3, [sp, #108]	; 0x6c
 800933e:	e7bf      	b.n	80092c0 <_strtod_l+0x28>
 8009340:	2a2d      	cmp	r2, #45	; 0x2d
 8009342:	d1c8      	bne.n	80092d6 <_strtod_l+0x3e>
 8009344:	2201      	movs	r2, #1
 8009346:	920c      	str	r2, [sp, #48]	; 0x30
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	921b      	str	r2, [sp, #108]	; 0x6c
 800934c:	785b      	ldrb	r3, [r3, #1]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1c3      	bne.n	80092da <_strtod_l+0x42>
 8009352:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009354:	961b      	str	r6, [sp, #108]	; 0x6c
 8009356:	2b00      	cmp	r3, #0
 8009358:	f040 8577 	bne.w	8009e4a <_strtod_l+0xbb2>
 800935c:	4642      	mov	r2, r8
 800935e:	464b      	mov	r3, r9
 8009360:	e7e4      	b.n	800932c <_strtod_l+0x94>
 8009362:	2200      	movs	r2, #0
 8009364:	e7ef      	b.n	8009346 <_strtod_l+0xae>
 8009366:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009368:	b13a      	cbz	r2, 800937a <_strtod_l+0xe2>
 800936a:	2135      	movs	r1, #53	; 0x35
 800936c:	a81e      	add	r0, sp, #120	; 0x78
 800936e:	f001 feb3 	bl	800b0d8 <__copybits>
 8009372:	4650      	mov	r0, sl
 8009374:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009376:	f001 fa7b 	bl	800a870 <_Bfree>
 800937a:	3e01      	subs	r6, #1
 800937c:	2e05      	cmp	r6, #5
 800937e:	d807      	bhi.n	8009390 <_strtod_l+0xf8>
 8009380:	e8df f006 	tbb	[pc, r6]
 8009384:	1d180b0e 	.word	0x1d180b0e
 8009388:	030e      	.short	0x030e
 800938a:	f04f 0900 	mov.w	r9, #0
 800938e:	46c8      	mov	r8, r9
 8009390:	0721      	lsls	r1, r4, #28
 8009392:	d5c2      	bpl.n	800931a <_strtod_l+0x82>
 8009394:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009398:	e7bf      	b.n	800931a <_strtod_l+0x82>
 800939a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800939e:	e7f7      	b.n	8009390 <_strtod_l+0xf8>
 80093a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80093a2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80093a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093ae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80093b2:	e7ed      	b.n	8009390 <_strtod_l+0xf8>
 80093b4:	f04f 0800 	mov.w	r8, #0
 80093b8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009534 <_strtod_l+0x29c>
 80093bc:	e7e8      	b.n	8009390 <_strtod_l+0xf8>
 80093be:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80093c2:	f04f 38ff 	mov.w	r8, #4294967295
 80093c6:	e7e3      	b.n	8009390 <_strtod_l+0xf8>
 80093c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	921b      	str	r2, [sp, #108]	; 0x6c
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b30      	cmp	r3, #48	; 0x30
 80093d2:	d0f9      	beq.n	80093c8 <_strtod_l+0x130>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0a0      	beq.n	800931a <_strtod_l+0x82>
 80093d8:	2301      	movs	r3, #1
 80093da:	9307      	str	r3, [sp, #28]
 80093dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093de:	220a      	movs	r2, #10
 80093e0:	9308      	str	r3, [sp, #32]
 80093e2:	2300      	movs	r3, #0
 80093e4:	469b      	mov	fp, r3
 80093e6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80093ea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80093ec:	7805      	ldrb	r5, [r0, #0]
 80093ee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80093f2:	b2d9      	uxtb	r1, r3
 80093f4:	2909      	cmp	r1, #9
 80093f6:	d926      	bls.n	8009446 <_strtod_l+0x1ae>
 80093f8:	4622      	mov	r2, r4
 80093fa:	4639      	mov	r1, r7
 80093fc:	f7ff ff06 	bl	800920c <strncmp>
 8009400:	2800      	cmp	r0, #0
 8009402:	d032      	beq.n	800946a <_strtod_l+0x1d2>
 8009404:	2000      	movs	r0, #0
 8009406:	462b      	mov	r3, r5
 8009408:	465c      	mov	r4, fp
 800940a:	4602      	mov	r2, r0
 800940c:	9004      	str	r0, [sp, #16]
 800940e:	2b65      	cmp	r3, #101	; 0x65
 8009410:	d001      	beq.n	8009416 <_strtod_l+0x17e>
 8009412:	2b45      	cmp	r3, #69	; 0x45
 8009414:	d113      	bne.n	800943e <_strtod_l+0x1a6>
 8009416:	b91c      	cbnz	r4, 8009420 <_strtod_l+0x188>
 8009418:	9b07      	ldr	r3, [sp, #28]
 800941a:	4303      	orrs	r3, r0
 800941c:	d099      	beq.n	8009352 <_strtod_l+0xba>
 800941e:	2400      	movs	r4, #0
 8009420:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009422:	1c73      	adds	r3, r6, #1
 8009424:	931b      	str	r3, [sp, #108]	; 0x6c
 8009426:	7873      	ldrb	r3, [r6, #1]
 8009428:	2b2b      	cmp	r3, #43	; 0x2b
 800942a:	d078      	beq.n	800951e <_strtod_l+0x286>
 800942c:	2b2d      	cmp	r3, #45	; 0x2d
 800942e:	d07b      	beq.n	8009528 <_strtod_l+0x290>
 8009430:	2700      	movs	r7, #0
 8009432:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009436:	2909      	cmp	r1, #9
 8009438:	f240 8082 	bls.w	8009540 <_strtod_l+0x2a8>
 800943c:	961b      	str	r6, [sp, #108]	; 0x6c
 800943e:	2500      	movs	r5, #0
 8009440:	e09e      	b.n	8009580 <_strtod_l+0x2e8>
 8009442:	2300      	movs	r3, #0
 8009444:	e7c9      	b.n	80093da <_strtod_l+0x142>
 8009446:	f1bb 0f08 	cmp.w	fp, #8
 800944a:	bfd5      	itete	le
 800944c:	9906      	ldrle	r1, [sp, #24]
 800944e:	9905      	ldrgt	r1, [sp, #20]
 8009450:	fb02 3301 	mlale	r3, r2, r1, r3
 8009454:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009458:	f100 0001 	add.w	r0, r0, #1
 800945c:	bfd4      	ite	le
 800945e:	9306      	strle	r3, [sp, #24]
 8009460:	9305      	strgt	r3, [sp, #20]
 8009462:	f10b 0b01 	add.w	fp, fp, #1
 8009466:	901b      	str	r0, [sp, #108]	; 0x6c
 8009468:	e7bf      	b.n	80093ea <_strtod_l+0x152>
 800946a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800946c:	191a      	adds	r2, r3, r4
 800946e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009470:	5d1b      	ldrb	r3, [r3, r4]
 8009472:	f1bb 0f00 	cmp.w	fp, #0
 8009476:	d036      	beq.n	80094e6 <_strtod_l+0x24e>
 8009478:	465c      	mov	r4, fp
 800947a:	9004      	str	r0, [sp, #16]
 800947c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009480:	2a09      	cmp	r2, #9
 8009482:	d912      	bls.n	80094aa <_strtod_l+0x212>
 8009484:	2201      	movs	r2, #1
 8009486:	e7c2      	b.n	800940e <_strtod_l+0x176>
 8009488:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800948a:	3001      	adds	r0, #1
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009490:	785b      	ldrb	r3, [r3, #1]
 8009492:	2b30      	cmp	r3, #48	; 0x30
 8009494:	d0f8      	beq.n	8009488 <_strtod_l+0x1f0>
 8009496:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800949a:	2a08      	cmp	r2, #8
 800949c:	f200 84dc 	bhi.w	8009e58 <_strtod_l+0xbc0>
 80094a0:	9004      	str	r0, [sp, #16]
 80094a2:	2000      	movs	r0, #0
 80094a4:	4604      	mov	r4, r0
 80094a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80094a8:	9208      	str	r2, [sp, #32]
 80094aa:	3b30      	subs	r3, #48	; 0x30
 80094ac:	f100 0201 	add.w	r2, r0, #1
 80094b0:	d013      	beq.n	80094da <_strtod_l+0x242>
 80094b2:	9904      	ldr	r1, [sp, #16]
 80094b4:	1905      	adds	r5, r0, r4
 80094b6:	4411      	add	r1, r2
 80094b8:	9104      	str	r1, [sp, #16]
 80094ba:	4622      	mov	r2, r4
 80094bc:	210a      	movs	r1, #10
 80094be:	42aa      	cmp	r2, r5
 80094c0:	d113      	bne.n	80094ea <_strtod_l+0x252>
 80094c2:	1822      	adds	r2, r4, r0
 80094c4:	2a08      	cmp	r2, #8
 80094c6:	f104 0401 	add.w	r4, r4, #1
 80094ca:	4404      	add	r4, r0
 80094cc:	dc1b      	bgt.n	8009506 <_strtod_l+0x26e>
 80094ce:	220a      	movs	r2, #10
 80094d0:	9906      	ldr	r1, [sp, #24]
 80094d2:	fb02 3301 	mla	r3, r2, r1, r3
 80094d6:	9306      	str	r3, [sp, #24]
 80094d8:	2200      	movs	r2, #0
 80094da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094dc:	4610      	mov	r0, r2
 80094de:	1c59      	adds	r1, r3, #1
 80094e0:	911b      	str	r1, [sp, #108]	; 0x6c
 80094e2:	785b      	ldrb	r3, [r3, #1]
 80094e4:	e7ca      	b.n	800947c <_strtod_l+0x1e4>
 80094e6:	4658      	mov	r0, fp
 80094e8:	e7d3      	b.n	8009492 <_strtod_l+0x1fa>
 80094ea:	2a08      	cmp	r2, #8
 80094ec:	dc04      	bgt.n	80094f8 <_strtod_l+0x260>
 80094ee:	9f06      	ldr	r7, [sp, #24]
 80094f0:	434f      	muls	r7, r1
 80094f2:	9706      	str	r7, [sp, #24]
 80094f4:	3201      	adds	r2, #1
 80094f6:	e7e2      	b.n	80094be <_strtod_l+0x226>
 80094f8:	1c57      	adds	r7, r2, #1
 80094fa:	2f10      	cmp	r7, #16
 80094fc:	bfde      	ittt	le
 80094fe:	9f05      	ldrle	r7, [sp, #20]
 8009500:	434f      	mulle	r7, r1
 8009502:	9705      	strle	r7, [sp, #20]
 8009504:	e7f6      	b.n	80094f4 <_strtod_l+0x25c>
 8009506:	2c10      	cmp	r4, #16
 8009508:	bfdf      	itttt	le
 800950a:	220a      	movle	r2, #10
 800950c:	9905      	ldrle	r1, [sp, #20]
 800950e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009512:	9305      	strle	r3, [sp, #20]
 8009514:	e7e0      	b.n	80094d8 <_strtod_l+0x240>
 8009516:	2300      	movs	r3, #0
 8009518:	2201      	movs	r2, #1
 800951a:	9304      	str	r3, [sp, #16]
 800951c:	e77c      	b.n	8009418 <_strtod_l+0x180>
 800951e:	2700      	movs	r7, #0
 8009520:	1cb3      	adds	r3, r6, #2
 8009522:	931b      	str	r3, [sp, #108]	; 0x6c
 8009524:	78b3      	ldrb	r3, [r6, #2]
 8009526:	e784      	b.n	8009432 <_strtod_l+0x19a>
 8009528:	2701      	movs	r7, #1
 800952a:	e7f9      	b.n	8009520 <_strtod_l+0x288>
 800952c:	0800c36c 	.word	0x0800c36c
 8009530:	0800c240 	.word	0x0800c240
 8009534:	7ff00000 	.word	0x7ff00000
 8009538:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800953a:	1c59      	adds	r1, r3, #1
 800953c:	911b      	str	r1, [sp, #108]	; 0x6c
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	2b30      	cmp	r3, #48	; 0x30
 8009542:	d0f9      	beq.n	8009538 <_strtod_l+0x2a0>
 8009544:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009548:	2908      	cmp	r1, #8
 800954a:	f63f af78 	bhi.w	800943e <_strtod_l+0x1a6>
 800954e:	f04f 0e0a 	mov.w	lr, #10
 8009552:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009558:	9309      	str	r3, [sp, #36]	; 0x24
 800955a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800955c:	1c59      	adds	r1, r3, #1
 800955e:	911b      	str	r1, [sp, #108]	; 0x6c
 8009560:	785b      	ldrb	r3, [r3, #1]
 8009562:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8009566:	2d09      	cmp	r5, #9
 8009568:	d935      	bls.n	80095d6 <_strtod_l+0x33e>
 800956a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800956c:	1b49      	subs	r1, r1, r5
 800956e:	2908      	cmp	r1, #8
 8009570:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009574:	dc02      	bgt.n	800957c <_strtod_l+0x2e4>
 8009576:	4565      	cmp	r5, ip
 8009578:	bfa8      	it	ge
 800957a:	4665      	movge	r5, ip
 800957c:	b107      	cbz	r7, 8009580 <_strtod_l+0x2e8>
 800957e:	426d      	negs	r5, r5
 8009580:	2c00      	cmp	r4, #0
 8009582:	d14c      	bne.n	800961e <_strtod_l+0x386>
 8009584:	9907      	ldr	r1, [sp, #28]
 8009586:	4301      	orrs	r1, r0
 8009588:	f47f aec7 	bne.w	800931a <_strtod_l+0x82>
 800958c:	2a00      	cmp	r2, #0
 800958e:	f47f aee0 	bne.w	8009352 <_strtod_l+0xba>
 8009592:	2b69      	cmp	r3, #105	; 0x69
 8009594:	d026      	beq.n	80095e4 <_strtod_l+0x34c>
 8009596:	dc23      	bgt.n	80095e0 <_strtod_l+0x348>
 8009598:	2b49      	cmp	r3, #73	; 0x49
 800959a:	d023      	beq.n	80095e4 <_strtod_l+0x34c>
 800959c:	2b4e      	cmp	r3, #78	; 0x4e
 800959e:	f47f aed8 	bne.w	8009352 <_strtod_l+0xba>
 80095a2:	499c      	ldr	r1, [pc, #624]	; (8009814 <_strtod_l+0x57c>)
 80095a4:	a81b      	add	r0, sp, #108	; 0x6c
 80095a6:	f001 f843 	bl	800a630 <__match>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	f43f aed1 	beq.w	8009352 <_strtod_l+0xba>
 80095b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b28      	cmp	r3, #40	; 0x28
 80095b6:	d12c      	bne.n	8009612 <_strtod_l+0x37a>
 80095b8:	4997      	ldr	r1, [pc, #604]	; (8009818 <_strtod_l+0x580>)
 80095ba:	aa1e      	add	r2, sp, #120	; 0x78
 80095bc:	a81b      	add	r0, sp, #108	; 0x6c
 80095be:	f001 f84b 	bl	800a658 <__hexnan>
 80095c2:	2805      	cmp	r0, #5
 80095c4:	d125      	bne.n	8009612 <_strtod_l+0x37a>
 80095c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095c8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80095cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80095d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80095d4:	e6a1      	b.n	800931a <_strtod_l+0x82>
 80095d6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80095da:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80095de:	e7bc      	b.n	800955a <_strtod_l+0x2c2>
 80095e0:	2b6e      	cmp	r3, #110	; 0x6e
 80095e2:	e7dc      	b.n	800959e <_strtod_l+0x306>
 80095e4:	498d      	ldr	r1, [pc, #564]	; (800981c <_strtod_l+0x584>)
 80095e6:	a81b      	add	r0, sp, #108	; 0x6c
 80095e8:	f001 f822 	bl	800a630 <__match>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	f43f aeb0 	beq.w	8009352 <_strtod_l+0xba>
 80095f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095f4:	498a      	ldr	r1, [pc, #552]	; (8009820 <_strtod_l+0x588>)
 80095f6:	3b01      	subs	r3, #1
 80095f8:	a81b      	add	r0, sp, #108	; 0x6c
 80095fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80095fc:	f001 f818 	bl	800a630 <__match>
 8009600:	b910      	cbnz	r0, 8009608 <_strtod_l+0x370>
 8009602:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009604:	3301      	adds	r3, #1
 8009606:	931b      	str	r3, [sp, #108]	; 0x6c
 8009608:	f04f 0800 	mov.w	r8, #0
 800960c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009830 <_strtod_l+0x598>
 8009610:	e683      	b.n	800931a <_strtod_l+0x82>
 8009612:	4884      	ldr	r0, [pc, #528]	; (8009824 <_strtod_l+0x58c>)
 8009614:	f002 f9fc 	bl	800ba10 <nan>
 8009618:	4680      	mov	r8, r0
 800961a:	4689      	mov	r9, r1
 800961c:	e67d      	b.n	800931a <_strtod_l+0x82>
 800961e:	9b04      	ldr	r3, [sp, #16]
 8009620:	f1bb 0f00 	cmp.w	fp, #0
 8009624:	bf08      	it	eq
 8009626:	46a3      	moveq	fp, r4
 8009628:	1aeb      	subs	r3, r5, r3
 800962a:	2c10      	cmp	r4, #16
 800962c:	9806      	ldr	r0, [sp, #24]
 800962e:	4626      	mov	r6, r4
 8009630:	9307      	str	r3, [sp, #28]
 8009632:	bfa8      	it	ge
 8009634:	2610      	movge	r6, #16
 8009636:	f7f6 fed5 	bl	80003e4 <__aeabi_ui2d>
 800963a:	2c09      	cmp	r4, #9
 800963c:	4680      	mov	r8, r0
 800963e:	4689      	mov	r9, r1
 8009640:	dd13      	ble.n	800966a <_strtod_l+0x3d2>
 8009642:	4b79      	ldr	r3, [pc, #484]	; (8009828 <_strtod_l+0x590>)
 8009644:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009648:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800964c:	f7f6 ff44 	bl	80004d8 <__aeabi_dmul>
 8009650:	4680      	mov	r8, r0
 8009652:	9805      	ldr	r0, [sp, #20]
 8009654:	4689      	mov	r9, r1
 8009656:	f7f6 fec5 	bl	80003e4 <__aeabi_ui2d>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4640      	mov	r0, r8
 8009660:	4649      	mov	r1, r9
 8009662:	f7f6 fd83 	bl	800016c <__adddf3>
 8009666:	4680      	mov	r8, r0
 8009668:	4689      	mov	r9, r1
 800966a:	2c0f      	cmp	r4, #15
 800966c:	dc36      	bgt.n	80096dc <_strtod_l+0x444>
 800966e:	9b07      	ldr	r3, [sp, #28]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f43f ae52 	beq.w	800931a <_strtod_l+0x82>
 8009676:	dd22      	ble.n	80096be <_strtod_l+0x426>
 8009678:	2b16      	cmp	r3, #22
 800967a:	dc09      	bgt.n	8009690 <_strtod_l+0x3f8>
 800967c:	4c6a      	ldr	r4, [pc, #424]	; (8009828 <_strtod_l+0x590>)
 800967e:	4642      	mov	r2, r8
 8009680:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009684:	464b      	mov	r3, r9
 8009686:	e9d4 0100 	ldrd	r0, r1, [r4]
 800968a:	f7f6 ff25 	bl	80004d8 <__aeabi_dmul>
 800968e:	e7c3      	b.n	8009618 <_strtod_l+0x380>
 8009690:	9a07      	ldr	r2, [sp, #28]
 8009692:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009696:	4293      	cmp	r3, r2
 8009698:	db20      	blt.n	80096dc <_strtod_l+0x444>
 800969a:	4d63      	ldr	r5, [pc, #396]	; (8009828 <_strtod_l+0x590>)
 800969c:	f1c4 040f 	rsb	r4, r4, #15
 80096a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80096a4:	4642      	mov	r2, r8
 80096a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096aa:	464b      	mov	r3, r9
 80096ac:	f7f6 ff14 	bl	80004d8 <__aeabi_dmul>
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	1b1c      	subs	r4, r3, r4
 80096b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80096b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096bc:	e7e5      	b.n	800968a <_strtod_l+0x3f2>
 80096be:	9b07      	ldr	r3, [sp, #28]
 80096c0:	3316      	adds	r3, #22
 80096c2:	db0b      	blt.n	80096dc <_strtod_l+0x444>
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	4a58      	ldr	r2, [pc, #352]	; (8009828 <_strtod_l+0x590>)
 80096c8:	1b5d      	subs	r5, r3, r5
 80096ca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80096ce:	4640      	mov	r0, r8
 80096d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096d4:	4649      	mov	r1, r9
 80096d6:	f7f7 f829 	bl	800072c <__aeabi_ddiv>
 80096da:	e79d      	b.n	8009618 <_strtod_l+0x380>
 80096dc:	9b07      	ldr	r3, [sp, #28]
 80096de:	1ba6      	subs	r6, r4, r6
 80096e0:	441e      	add	r6, r3
 80096e2:	2e00      	cmp	r6, #0
 80096e4:	dd71      	ble.n	80097ca <_strtod_l+0x532>
 80096e6:	f016 030f 	ands.w	r3, r6, #15
 80096ea:	d00a      	beq.n	8009702 <_strtod_l+0x46a>
 80096ec:	494e      	ldr	r1, [pc, #312]	; (8009828 <_strtod_l+0x590>)
 80096ee:	4642      	mov	r2, r8
 80096f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f8:	464b      	mov	r3, r9
 80096fa:	f7f6 feed 	bl	80004d8 <__aeabi_dmul>
 80096fe:	4680      	mov	r8, r0
 8009700:	4689      	mov	r9, r1
 8009702:	f036 060f 	bics.w	r6, r6, #15
 8009706:	d050      	beq.n	80097aa <_strtod_l+0x512>
 8009708:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800970c:	dd27      	ble.n	800975e <_strtod_l+0x4c6>
 800970e:	f04f 0b00 	mov.w	fp, #0
 8009712:	f8cd b010 	str.w	fp, [sp, #16]
 8009716:	f8cd b020 	str.w	fp, [sp, #32]
 800971a:	f8cd b018 	str.w	fp, [sp, #24]
 800971e:	2322      	movs	r3, #34	; 0x22
 8009720:	f04f 0800 	mov.w	r8, #0
 8009724:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009830 <_strtod_l+0x598>
 8009728:	f8ca 3000 	str.w	r3, [sl]
 800972c:	9b08      	ldr	r3, [sp, #32]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f43f adf3 	beq.w	800931a <_strtod_l+0x82>
 8009734:	4650      	mov	r0, sl
 8009736:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009738:	f001 f89a 	bl	800a870 <_Bfree>
 800973c:	4650      	mov	r0, sl
 800973e:	9906      	ldr	r1, [sp, #24]
 8009740:	f001 f896 	bl	800a870 <_Bfree>
 8009744:	4650      	mov	r0, sl
 8009746:	9904      	ldr	r1, [sp, #16]
 8009748:	f001 f892 	bl	800a870 <_Bfree>
 800974c:	4650      	mov	r0, sl
 800974e:	9908      	ldr	r1, [sp, #32]
 8009750:	f001 f88e 	bl	800a870 <_Bfree>
 8009754:	4659      	mov	r1, fp
 8009756:	4650      	mov	r0, sl
 8009758:	f001 f88a 	bl	800a870 <_Bfree>
 800975c:	e5dd      	b.n	800931a <_strtod_l+0x82>
 800975e:	2300      	movs	r3, #0
 8009760:	4640      	mov	r0, r8
 8009762:	4649      	mov	r1, r9
 8009764:	461f      	mov	r7, r3
 8009766:	1136      	asrs	r6, r6, #4
 8009768:	2e01      	cmp	r6, #1
 800976a:	dc21      	bgt.n	80097b0 <_strtod_l+0x518>
 800976c:	b10b      	cbz	r3, 8009772 <_strtod_l+0x4da>
 800976e:	4680      	mov	r8, r0
 8009770:	4689      	mov	r9, r1
 8009772:	4b2e      	ldr	r3, [pc, #184]	; (800982c <_strtod_l+0x594>)
 8009774:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009778:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800977c:	4642      	mov	r2, r8
 800977e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009782:	464b      	mov	r3, r9
 8009784:	f7f6 fea8 	bl	80004d8 <__aeabi_dmul>
 8009788:	4b29      	ldr	r3, [pc, #164]	; (8009830 <_strtod_l+0x598>)
 800978a:	460a      	mov	r2, r1
 800978c:	400b      	ands	r3, r1
 800978e:	4929      	ldr	r1, [pc, #164]	; (8009834 <_strtod_l+0x59c>)
 8009790:	4680      	mov	r8, r0
 8009792:	428b      	cmp	r3, r1
 8009794:	d8bb      	bhi.n	800970e <_strtod_l+0x476>
 8009796:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800979a:	428b      	cmp	r3, r1
 800979c:	bf86      	itte	hi
 800979e:	f04f 38ff 	movhi.w	r8, #4294967295
 80097a2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009838 <_strtod_l+0x5a0>
 80097a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80097aa:	2300      	movs	r3, #0
 80097ac:	9305      	str	r3, [sp, #20]
 80097ae:	e07e      	b.n	80098ae <_strtod_l+0x616>
 80097b0:	07f2      	lsls	r2, r6, #31
 80097b2:	d507      	bpl.n	80097c4 <_strtod_l+0x52c>
 80097b4:	4b1d      	ldr	r3, [pc, #116]	; (800982c <_strtod_l+0x594>)
 80097b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fe8b 	bl	80004d8 <__aeabi_dmul>
 80097c2:	2301      	movs	r3, #1
 80097c4:	3701      	adds	r7, #1
 80097c6:	1076      	asrs	r6, r6, #1
 80097c8:	e7ce      	b.n	8009768 <_strtod_l+0x4d0>
 80097ca:	d0ee      	beq.n	80097aa <_strtod_l+0x512>
 80097cc:	4276      	negs	r6, r6
 80097ce:	f016 020f 	ands.w	r2, r6, #15
 80097d2:	d00a      	beq.n	80097ea <_strtod_l+0x552>
 80097d4:	4b14      	ldr	r3, [pc, #80]	; (8009828 <_strtod_l+0x590>)
 80097d6:	4640      	mov	r0, r8
 80097d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097dc:	4649      	mov	r1, r9
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 ffa3 	bl	800072c <__aeabi_ddiv>
 80097e6:	4680      	mov	r8, r0
 80097e8:	4689      	mov	r9, r1
 80097ea:	1136      	asrs	r6, r6, #4
 80097ec:	d0dd      	beq.n	80097aa <_strtod_l+0x512>
 80097ee:	2e1f      	cmp	r6, #31
 80097f0:	dd24      	ble.n	800983c <_strtod_l+0x5a4>
 80097f2:	f04f 0b00 	mov.w	fp, #0
 80097f6:	f8cd b010 	str.w	fp, [sp, #16]
 80097fa:	f8cd b020 	str.w	fp, [sp, #32]
 80097fe:	f8cd b018 	str.w	fp, [sp, #24]
 8009802:	2322      	movs	r3, #34	; 0x22
 8009804:	f04f 0800 	mov.w	r8, #0
 8009808:	f04f 0900 	mov.w	r9, #0
 800980c:	f8ca 3000 	str.w	r3, [sl]
 8009810:	e78c      	b.n	800972c <_strtod_l+0x494>
 8009812:	bf00      	nop
 8009814:	0800c23d 	.word	0x0800c23d
 8009818:	0800c254 	.word	0x0800c254
 800981c:	0800c234 	.word	0x0800c234
 8009820:	0800c237 	.word	0x0800c237
 8009824:	0800c562 	.word	0x0800c562
 8009828:	0800c420 	.word	0x0800c420
 800982c:	0800c3f8 	.word	0x0800c3f8
 8009830:	7ff00000 	.word	0x7ff00000
 8009834:	7ca00000 	.word	0x7ca00000
 8009838:	7fefffff 	.word	0x7fefffff
 800983c:	f016 0310 	ands.w	r3, r6, #16
 8009840:	bf18      	it	ne
 8009842:	236a      	movne	r3, #106	; 0x6a
 8009844:	4640      	mov	r0, r8
 8009846:	9305      	str	r3, [sp, #20]
 8009848:	4649      	mov	r1, r9
 800984a:	2300      	movs	r3, #0
 800984c:	4fb2      	ldr	r7, [pc, #712]	; (8009b18 <_strtod_l+0x880>)
 800984e:	07f2      	lsls	r2, r6, #31
 8009850:	d504      	bpl.n	800985c <_strtod_l+0x5c4>
 8009852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009856:	f7f6 fe3f 	bl	80004d8 <__aeabi_dmul>
 800985a:	2301      	movs	r3, #1
 800985c:	1076      	asrs	r6, r6, #1
 800985e:	f107 0708 	add.w	r7, r7, #8
 8009862:	d1f4      	bne.n	800984e <_strtod_l+0x5b6>
 8009864:	b10b      	cbz	r3, 800986a <_strtod_l+0x5d2>
 8009866:	4680      	mov	r8, r0
 8009868:	4689      	mov	r9, r1
 800986a:	9b05      	ldr	r3, [sp, #20]
 800986c:	b1bb      	cbz	r3, 800989e <_strtod_l+0x606>
 800986e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8009872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009876:	2b00      	cmp	r3, #0
 8009878:	4649      	mov	r1, r9
 800987a:	dd10      	ble.n	800989e <_strtod_l+0x606>
 800987c:	2b1f      	cmp	r3, #31
 800987e:	f340 812b 	ble.w	8009ad8 <_strtod_l+0x840>
 8009882:	2b34      	cmp	r3, #52	; 0x34
 8009884:	bfd8      	it	le
 8009886:	f04f 32ff 	movle.w	r2, #4294967295
 800988a:	f04f 0800 	mov.w	r8, #0
 800988e:	bfcf      	iteee	gt
 8009890:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009894:	3b20      	suble	r3, #32
 8009896:	fa02 f303 	lslle.w	r3, r2, r3
 800989a:	ea03 0901 	andle.w	r9, r3, r1
 800989e:	2200      	movs	r2, #0
 80098a0:	2300      	movs	r3, #0
 80098a2:	4640      	mov	r0, r8
 80098a4:	4649      	mov	r1, r9
 80098a6:	f7f7 f87f 	bl	80009a8 <__aeabi_dcmpeq>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d1a1      	bne.n	80097f2 <_strtod_l+0x55a>
 80098ae:	9b06      	ldr	r3, [sp, #24]
 80098b0:	465a      	mov	r2, fp
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4650      	mov	r0, sl
 80098b6:	4623      	mov	r3, r4
 80098b8:	9908      	ldr	r1, [sp, #32]
 80098ba:	f001 f845 	bl	800a948 <__s2b>
 80098be:	9008      	str	r0, [sp, #32]
 80098c0:	2800      	cmp	r0, #0
 80098c2:	f43f af24 	beq.w	800970e <_strtod_l+0x476>
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	f04f 0b00 	mov.w	fp, #0
 80098cc:	1b5d      	subs	r5, r3, r5
 80098ce:	9b07      	ldr	r3, [sp, #28]
 80098d0:	f8cd b010 	str.w	fp, [sp, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	bfb4      	ite	lt
 80098d8:	462b      	movlt	r3, r5
 80098da:	2300      	movge	r3, #0
 80098dc:	930e      	str	r3, [sp, #56]	; 0x38
 80098de:	9b07      	ldr	r3, [sp, #28]
 80098e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098e4:	9316      	str	r3, [sp, #88]	; 0x58
 80098e6:	9b08      	ldr	r3, [sp, #32]
 80098e8:	4650      	mov	r0, sl
 80098ea:	6859      	ldr	r1, [r3, #4]
 80098ec:	f000 ff80 	bl	800a7f0 <_Balloc>
 80098f0:	9006      	str	r0, [sp, #24]
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f43f af13 	beq.w	800971e <_strtod_l+0x486>
 80098f8:	9b08      	ldr	r3, [sp, #32]
 80098fa:	300c      	adds	r0, #12
 80098fc:	691a      	ldr	r2, [r3, #16]
 80098fe:	f103 010c 	add.w	r1, r3, #12
 8009902:	3202      	adds	r2, #2
 8009904:	0092      	lsls	r2, r2, #2
 8009906:	f000 ff58 	bl	800a7ba <memcpy>
 800990a:	ab1e      	add	r3, sp, #120	; 0x78
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	ab1d      	add	r3, sp, #116	; 0x74
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	4642      	mov	r2, r8
 8009914:	464b      	mov	r3, r9
 8009916:	4650      	mov	r0, sl
 8009918:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800991c:	f001 fb52 	bl	800afc4 <__d2b>
 8009920:	901c      	str	r0, [sp, #112]	; 0x70
 8009922:	2800      	cmp	r0, #0
 8009924:	f43f aefb 	beq.w	800971e <_strtod_l+0x486>
 8009928:	2101      	movs	r1, #1
 800992a:	4650      	mov	r0, sl
 800992c:	f001 f8a4 	bl	800aa78 <__i2b>
 8009930:	4603      	mov	r3, r0
 8009932:	9004      	str	r0, [sp, #16]
 8009934:	2800      	cmp	r0, #0
 8009936:	f43f aef2 	beq.w	800971e <_strtod_l+0x486>
 800993a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800993c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800993e:	2d00      	cmp	r5, #0
 8009940:	bfab      	itete	ge
 8009942:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009944:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009946:	18ee      	addge	r6, r5, r3
 8009948:	1b5c      	sublt	r4, r3, r5
 800994a:	9b05      	ldr	r3, [sp, #20]
 800994c:	bfa8      	it	ge
 800994e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009950:	eba5 0503 	sub.w	r5, r5, r3
 8009954:	4415      	add	r5, r2
 8009956:	4b71      	ldr	r3, [pc, #452]	; (8009b1c <_strtod_l+0x884>)
 8009958:	f105 35ff 	add.w	r5, r5, #4294967295
 800995c:	bfb8      	it	lt
 800995e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009960:	429d      	cmp	r5, r3
 8009962:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009966:	f280 80c9 	bge.w	8009afc <_strtod_l+0x864>
 800996a:	1b5b      	subs	r3, r3, r5
 800996c:	2b1f      	cmp	r3, #31
 800996e:	f04f 0701 	mov.w	r7, #1
 8009972:	eba2 0203 	sub.w	r2, r2, r3
 8009976:	f300 80b6 	bgt.w	8009ae6 <_strtod_l+0x84e>
 800997a:	2500      	movs	r5, #0
 800997c:	fa07 f303 	lsl.w	r3, r7, r3
 8009980:	930f      	str	r3, [sp, #60]	; 0x3c
 8009982:	18b7      	adds	r7, r6, r2
 8009984:	9b05      	ldr	r3, [sp, #20]
 8009986:	42be      	cmp	r6, r7
 8009988:	4414      	add	r4, r2
 800998a:	441c      	add	r4, r3
 800998c:	4633      	mov	r3, r6
 800998e:	bfa8      	it	ge
 8009990:	463b      	movge	r3, r7
 8009992:	42a3      	cmp	r3, r4
 8009994:	bfa8      	it	ge
 8009996:	4623      	movge	r3, r4
 8009998:	2b00      	cmp	r3, #0
 800999a:	bfc2      	ittt	gt
 800999c:	1aff      	subgt	r7, r7, r3
 800999e:	1ae4      	subgt	r4, r4, r3
 80099a0:	1af6      	subgt	r6, r6, r3
 80099a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dd17      	ble.n	80099d8 <_strtod_l+0x740>
 80099a8:	461a      	mov	r2, r3
 80099aa:	4650      	mov	r0, sl
 80099ac:	9904      	ldr	r1, [sp, #16]
 80099ae:	f001 f91d 	bl	800abec <__pow5mult>
 80099b2:	9004      	str	r0, [sp, #16]
 80099b4:	2800      	cmp	r0, #0
 80099b6:	f43f aeb2 	beq.w	800971e <_strtod_l+0x486>
 80099ba:	4601      	mov	r1, r0
 80099bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80099be:	4650      	mov	r0, sl
 80099c0:	f001 f870 	bl	800aaa4 <__multiply>
 80099c4:	9009      	str	r0, [sp, #36]	; 0x24
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f43f aea9 	beq.w	800971e <_strtod_l+0x486>
 80099cc:	4650      	mov	r0, sl
 80099ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099d0:	f000 ff4e 	bl	800a870 <_Bfree>
 80099d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d6:	931c      	str	r3, [sp, #112]	; 0x70
 80099d8:	2f00      	cmp	r7, #0
 80099da:	f300 8093 	bgt.w	8009b04 <_strtod_l+0x86c>
 80099de:	9b07      	ldr	r3, [sp, #28]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	dd08      	ble.n	80099f6 <_strtod_l+0x75e>
 80099e4:	4650      	mov	r0, sl
 80099e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80099e8:	9906      	ldr	r1, [sp, #24]
 80099ea:	f001 f8ff 	bl	800abec <__pow5mult>
 80099ee:	9006      	str	r0, [sp, #24]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	f43f ae94 	beq.w	800971e <_strtod_l+0x486>
 80099f6:	2c00      	cmp	r4, #0
 80099f8:	dd08      	ble.n	8009a0c <_strtod_l+0x774>
 80099fa:	4622      	mov	r2, r4
 80099fc:	4650      	mov	r0, sl
 80099fe:	9906      	ldr	r1, [sp, #24]
 8009a00:	f001 f94e 	bl	800aca0 <__lshift>
 8009a04:	9006      	str	r0, [sp, #24]
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f43f ae89 	beq.w	800971e <_strtod_l+0x486>
 8009a0c:	2e00      	cmp	r6, #0
 8009a0e:	dd08      	ble.n	8009a22 <_strtod_l+0x78a>
 8009a10:	4632      	mov	r2, r6
 8009a12:	4650      	mov	r0, sl
 8009a14:	9904      	ldr	r1, [sp, #16]
 8009a16:	f001 f943 	bl	800aca0 <__lshift>
 8009a1a:	9004      	str	r0, [sp, #16]
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	f43f ae7e 	beq.w	800971e <_strtod_l+0x486>
 8009a22:	4650      	mov	r0, sl
 8009a24:	9a06      	ldr	r2, [sp, #24]
 8009a26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a28:	f001 f9c2 	bl	800adb0 <__mdiff>
 8009a2c:	4683      	mov	fp, r0
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f43f ae75 	beq.w	800971e <_strtod_l+0x486>
 8009a34:	2400      	movs	r4, #0
 8009a36:	68c3      	ldr	r3, [r0, #12]
 8009a38:	9904      	ldr	r1, [sp, #16]
 8009a3a:	60c4      	str	r4, [r0, #12]
 8009a3c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a3e:	f001 f99b 	bl	800ad78 <__mcmp>
 8009a42:	42a0      	cmp	r0, r4
 8009a44:	da70      	bge.n	8009b28 <_strtod_l+0x890>
 8009a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a48:	ea53 0308 	orrs.w	r3, r3, r8
 8009a4c:	f040 8096 	bne.w	8009b7c <_strtod_l+0x8e4>
 8009a50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f040 8091 	bne.w	8009b7c <_strtod_l+0x8e4>
 8009a5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a5e:	0d1b      	lsrs	r3, r3, #20
 8009a60:	051b      	lsls	r3, r3, #20
 8009a62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a66:	f240 8089 	bls.w	8009b7c <_strtod_l+0x8e4>
 8009a6a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009a6e:	b923      	cbnz	r3, 8009a7a <_strtod_l+0x7e2>
 8009a70:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	f340 8081 	ble.w	8009b7c <_strtod_l+0x8e4>
 8009a7a:	4659      	mov	r1, fp
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	4650      	mov	r0, sl
 8009a80:	f001 f90e 	bl	800aca0 <__lshift>
 8009a84:	9904      	ldr	r1, [sp, #16]
 8009a86:	4683      	mov	fp, r0
 8009a88:	f001 f976 	bl	800ad78 <__mcmp>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	dd75      	ble.n	8009b7c <_strtod_l+0x8e4>
 8009a90:	9905      	ldr	r1, [sp, #20]
 8009a92:	464b      	mov	r3, r9
 8009a94:	4a22      	ldr	r2, [pc, #136]	; (8009b20 <_strtod_l+0x888>)
 8009a96:	2900      	cmp	r1, #0
 8009a98:	f000 8091 	beq.w	8009bbe <_strtod_l+0x926>
 8009a9c:	ea02 0109 	and.w	r1, r2, r9
 8009aa0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009aa4:	f300 808b 	bgt.w	8009bbe <_strtod_l+0x926>
 8009aa8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009aac:	f77f aea9 	ble.w	8009802 <_strtod_l+0x56a>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4a1c      	ldr	r2, [pc, #112]	; (8009b24 <_strtod_l+0x88c>)
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009aba:	4649      	mov	r1, r9
 8009abc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009ac0:	f7f6 fd0a 	bl	80004d8 <__aeabi_dmul>
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4303      	orrs	r3, r0
 8009ac8:	bf08      	it	eq
 8009aca:	2322      	moveq	r3, #34	; 0x22
 8009acc:	4680      	mov	r8, r0
 8009ace:	4689      	mov	r9, r1
 8009ad0:	bf08      	it	eq
 8009ad2:	f8ca 3000 	streq.w	r3, [sl]
 8009ad6:	e62d      	b.n	8009734 <_strtod_l+0x49c>
 8009ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8009adc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae0:	ea03 0808 	and.w	r8, r3, r8
 8009ae4:	e6db      	b.n	800989e <_strtod_l+0x606>
 8009ae6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009aea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009aee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009af2:	35e2      	adds	r5, #226	; 0xe2
 8009af4:	fa07 f505 	lsl.w	r5, r7, r5
 8009af8:	970f      	str	r7, [sp, #60]	; 0x3c
 8009afa:	e742      	b.n	8009982 <_strtod_l+0x6ea>
 8009afc:	2301      	movs	r3, #1
 8009afe:	2500      	movs	r5, #0
 8009b00:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b02:	e73e      	b.n	8009982 <_strtod_l+0x6ea>
 8009b04:	463a      	mov	r2, r7
 8009b06:	4650      	mov	r0, sl
 8009b08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b0a:	f001 f8c9 	bl	800aca0 <__lshift>
 8009b0e:	901c      	str	r0, [sp, #112]	; 0x70
 8009b10:	2800      	cmp	r0, #0
 8009b12:	f47f af64 	bne.w	80099de <_strtod_l+0x746>
 8009b16:	e602      	b.n	800971e <_strtod_l+0x486>
 8009b18:	0800c268 	.word	0x0800c268
 8009b1c:	fffffc02 	.word	0xfffffc02
 8009b20:	7ff00000 	.word	0x7ff00000
 8009b24:	39500000 	.word	0x39500000
 8009b28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b2c:	d166      	bne.n	8009bfc <_strtod_l+0x964>
 8009b2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b34:	b35a      	cbz	r2, 8009b8e <_strtod_l+0x8f6>
 8009b36:	4a9c      	ldr	r2, [pc, #624]	; (8009da8 <_strtod_l+0xb10>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d12c      	bne.n	8009b96 <_strtod_l+0x8fe>
 8009b3c:	9b05      	ldr	r3, [sp, #20]
 8009b3e:	4640      	mov	r0, r8
 8009b40:	b303      	cbz	r3, 8009b84 <_strtod_l+0x8ec>
 8009b42:	464b      	mov	r3, r9
 8009b44:	4a99      	ldr	r2, [pc, #612]	; (8009dac <_strtod_l+0xb14>)
 8009b46:	f04f 31ff 	mov.w	r1, #4294967295
 8009b4a:	401a      	ands	r2, r3
 8009b4c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009b50:	d81b      	bhi.n	8009b8a <_strtod_l+0x8f2>
 8009b52:	0d12      	lsrs	r2, r2, #20
 8009b54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b58:	fa01 f303 	lsl.w	r3, r1, r3
 8009b5c:	4298      	cmp	r0, r3
 8009b5e:	d11a      	bne.n	8009b96 <_strtod_l+0x8fe>
 8009b60:	4b93      	ldr	r3, [pc, #588]	; (8009db0 <_strtod_l+0xb18>)
 8009b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d102      	bne.n	8009b6e <_strtod_l+0x8d6>
 8009b68:	3001      	adds	r0, #1
 8009b6a:	f43f add8 	beq.w	800971e <_strtod_l+0x486>
 8009b6e:	f04f 0800 	mov.w	r8, #0
 8009b72:	4b8e      	ldr	r3, [pc, #568]	; (8009dac <_strtod_l+0xb14>)
 8009b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b76:	401a      	ands	r2, r3
 8009b78:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009b7c:	9b05      	ldr	r3, [sp, #20]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d196      	bne.n	8009ab0 <_strtod_l+0x818>
 8009b82:	e5d7      	b.n	8009734 <_strtod_l+0x49c>
 8009b84:	f04f 33ff 	mov.w	r3, #4294967295
 8009b88:	e7e8      	b.n	8009b5c <_strtod_l+0x8c4>
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	e7e6      	b.n	8009b5c <_strtod_l+0x8c4>
 8009b8e:	ea53 0308 	orrs.w	r3, r3, r8
 8009b92:	f43f af7d 	beq.w	8009a90 <_strtod_l+0x7f8>
 8009b96:	b1e5      	cbz	r5, 8009bd2 <_strtod_l+0x93a>
 8009b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9a:	421d      	tst	r5, r3
 8009b9c:	d0ee      	beq.n	8009b7c <_strtod_l+0x8e4>
 8009b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	4649      	mov	r1, r9
 8009ba4:	9a05      	ldr	r2, [sp, #20]
 8009ba6:	b1c3      	cbz	r3, 8009bda <_strtod_l+0x942>
 8009ba8:	f7ff fb55 	bl	8009256 <sulp>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bb4:	f7f6 fada 	bl	800016c <__adddf3>
 8009bb8:	4680      	mov	r8, r0
 8009bba:	4689      	mov	r9, r1
 8009bbc:	e7de      	b.n	8009b7c <_strtod_l+0x8e4>
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bc4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009bc8:	f04f 38ff 	mov.w	r8, #4294967295
 8009bcc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009bd0:	e7d4      	b.n	8009b7c <_strtod_l+0x8e4>
 8009bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bd4:	ea13 0f08 	tst.w	r3, r8
 8009bd8:	e7e0      	b.n	8009b9c <_strtod_l+0x904>
 8009bda:	f7ff fb3c 	bl	8009256 <sulp>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009be6:	f7f6 fabf 	bl	8000168 <__aeabi_dsub>
 8009bea:	2200      	movs	r2, #0
 8009bec:	2300      	movs	r3, #0
 8009bee:	4680      	mov	r8, r0
 8009bf0:	4689      	mov	r9, r1
 8009bf2:	f7f6 fed9 	bl	80009a8 <__aeabi_dcmpeq>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d0c0      	beq.n	8009b7c <_strtod_l+0x8e4>
 8009bfa:	e602      	b.n	8009802 <_strtod_l+0x56a>
 8009bfc:	4658      	mov	r0, fp
 8009bfe:	9904      	ldr	r1, [sp, #16]
 8009c00:	f001 fa3c 	bl	800b07c <__ratio>
 8009c04:	2200      	movs	r2, #0
 8009c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	460f      	mov	r7, r1
 8009c0e:	f7f6 fedf 	bl	80009d0 <__aeabi_dcmple>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d075      	beq.n	8009d02 <_strtod_l+0xa6a>
 8009c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d047      	beq.n	8009cac <_strtod_l+0xa14>
 8009c1c:	2600      	movs	r6, #0
 8009c1e:	4f65      	ldr	r7, [pc, #404]	; (8009db4 <_strtod_l+0xb1c>)
 8009c20:	4d64      	ldr	r5, [pc, #400]	; (8009db4 <_strtod_l+0xb1c>)
 8009c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c28:	0d1b      	lsrs	r3, r3, #20
 8009c2a:	051b      	lsls	r3, r3, #20
 8009c2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c30:	4b61      	ldr	r3, [pc, #388]	; (8009db8 <_strtod_l+0xb20>)
 8009c32:	429a      	cmp	r2, r3
 8009c34:	f040 80c8 	bne.w	8009dc8 <_strtod_l+0xb30>
 8009c38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c3c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c42:	4640      	mov	r0, r8
 8009c44:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009c48:	4649      	mov	r1, r9
 8009c4a:	f001 f941 	bl	800aed0 <__ulp>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4630      	mov	r0, r6
 8009c54:	4639      	mov	r1, r7
 8009c56:	f7f6 fc3f 	bl	80004d8 <__aeabi_dmul>
 8009c5a:	4642      	mov	r2, r8
 8009c5c:	464b      	mov	r3, r9
 8009c5e:	f7f6 fa85 	bl	800016c <__adddf3>
 8009c62:	460b      	mov	r3, r1
 8009c64:	4951      	ldr	r1, [pc, #324]	; (8009dac <_strtod_l+0xb14>)
 8009c66:	4a55      	ldr	r2, [pc, #340]	; (8009dbc <_strtod_l+0xb24>)
 8009c68:	4019      	ands	r1, r3
 8009c6a:	4291      	cmp	r1, r2
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	d95e      	bls.n	8009d2e <_strtod_l+0xa96>
 8009c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d103      	bne.n	8009c82 <_strtod_l+0x9ea>
 8009c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	f43f ad4e 	beq.w	800971e <_strtod_l+0x486>
 8009c82:	f04f 38ff 	mov.w	r8, #4294967295
 8009c86:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009db0 <_strtod_l+0xb18>
 8009c8a:	4650      	mov	r0, sl
 8009c8c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c8e:	f000 fdef 	bl	800a870 <_Bfree>
 8009c92:	4650      	mov	r0, sl
 8009c94:	9906      	ldr	r1, [sp, #24]
 8009c96:	f000 fdeb 	bl	800a870 <_Bfree>
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	9904      	ldr	r1, [sp, #16]
 8009c9e:	f000 fde7 	bl	800a870 <_Bfree>
 8009ca2:	4659      	mov	r1, fp
 8009ca4:	4650      	mov	r0, sl
 8009ca6:	f000 fde3 	bl	800a870 <_Bfree>
 8009caa:	e61c      	b.n	80098e6 <_strtod_l+0x64e>
 8009cac:	f1b8 0f00 	cmp.w	r8, #0
 8009cb0:	d119      	bne.n	8009ce6 <_strtod_l+0xa4e>
 8009cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cb8:	b9e3      	cbnz	r3, 8009cf4 <_strtod_l+0xa5c>
 8009cba:	2200      	movs	r2, #0
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	4b3c      	ldr	r3, [pc, #240]	; (8009db4 <_strtod_l+0xb1c>)
 8009cc2:	f7f6 fe7b 	bl	80009bc <__aeabi_dcmplt>
 8009cc6:	b9c8      	cbnz	r0, 8009cfc <_strtod_l+0xa64>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4630      	mov	r0, r6
 8009ccc:	4639      	mov	r1, r7
 8009cce:	4b3c      	ldr	r3, [pc, #240]	; (8009dc0 <_strtod_l+0xb28>)
 8009cd0:	f7f6 fc02 	bl	80004d8 <__aeabi_dmul>
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	460d      	mov	r5, r1
 8009cd8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009cdc:	9418      	str	r4, [sp, #96]	; 0x60
 8009cde:	9319      	str	r3, [sp, #100]	; 0x64
 8009ce0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009ce4:	e79d      	b.n	8009c22 <_strtod_l+0x98a>
 8009ce6:	f1b8 0f01 	cmp.w	r8, #1
 8009cea:	d103      	bne.n	8009cf4 <_strtod_l+0xa5c>
 8009cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f43f ad87 	beq.w	8009802 <_strtod_l+0x56a>
 8009cf4:	2600      	movs	r6, #0
 8009cf6:	2400      	movs	r4, #0
 8009cf8:	4f32      	ldr	r7, [pc, #200]	; (8009dc4 <_strtod_l+0xb2c>)
 8009cfa:	e791      	b.n	8009c20 <_strtod_l+0x988>
 8009cfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009cfe:	4d30      	ldr	r5, [pc, #192]	; (8009dc0 <_strtod_l+0xb28>)
 8009d00:	e7ea      	b.n	8009cd8 <_strtod_l+0xa40>
 8009d02:	4b2f      	ldr	r3, [pc, #188]	; (8009dc0 <_strtod_l+0xb28>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	4630      	mov	r0, r6
 8009d08:	4639      	mov	r1, r7
 8009d0a:	f7f6 fbe5 	bl	80004d8 <__aeabi_dmul>
 8009d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	b933      	cbnz	r3, 8009d24 <_strtod_l+0xa8c>
 8009d16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d1a:	9010      	str	r0, [sp, #64]	; 0x40
 8009d1c:	9311      	str	r3, [sp, #68]	; 0x44
 8009d1e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d22:	e77e      	b.n	8009c22 <_strtod_l+0x98a>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009d2c:	e7f7      	b.n	8009d1e <_strtod_l+0xa86>
 8009d2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009d32:	9b05      	ldr	r3, [sp, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1a8      	bne.n	8009c8a <_strtod_l+0x9f2>
 8009d38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d3e:	0d1b      	lsrs	r3, r3, #20
 8009d40:	051b      	lsls	r3, r3, #20
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d1a1      	bne.n	8009c8a <_strtod_l+0x9f2>
 8009d46:	4620      	mov	r0, r4
 8009d48:	4629      	mov	r1, r5
 8009d4a:	f7f6 fe7f 	bl	8000a4c <__aeabi_d2lz>
 8009d4e:	f7f6 fb95 	bl	800047c <__aeabi_l2d>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fa05 	bl	8000168 <__aeabi_dsub>
 8009d5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d64:	ea43 0308 	orr.w	r3, r3, r8
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	460d      	mov	r5, r1
 8009d6e:	d066      	beq.n	8009e3e <_strtod_l+0xba6>
 8009d70:	a309      	add	r3, pc, #36	; (adr r3, 8009d98 <_strtod_l+0xb00>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 fe21 	bl	80009bc <__aeabi_dcmplt>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f47f acda 	bne.w	8009734 <_strtod_l+0x49c>
 8009d80:	a307      	add	r3, pc, #28	; (adr r3, 8009da0 <_strtod_l+0xb08>)
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	4620      	mov	r0, r4
 8009d88:	4629      	mov	r1, r5
 8009d8a:	f7f6 fe35 	bl	80009f8 <__aeabi_dcmpgt>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f43f af7b 	beq.w	8009c8a <_strtod_l+0x9f2>
 8009d94:	e4ce      	b.n	8009734 <_strtod_l+0x49c>
 8009d96:	bf00      	nop
 8009d98:	94a03595 	.word	0x94a03595
 8009d9c:	3fdfffff 	.word	0x3fdfffff
 8009da0:	35afe535 	.word	0x35afe535
 8009da4:	3fe00000 	.word	0x3fe00000
 8009da8:	000fffff 	.word	0x000fffff
 8009dac:	7ff00000 	.word	0x7ff00000
 8009db0:	7fefffff 	.word	0x7fefffff
 8009db4:	3ff00000 	.word	0x3ff00000
 8009db8:	7fe00000 	.word	0x7fe00000
 8009dbc:	7c9fffff 	.word	0x7c9fffff
 8009dc0:	3fe00000 	.word	0x3fe00000
 8009dc4:	bff00000 	.word	0xbff00000
 8009dc8:	9b05      	ldr	r3, [sp, #20]
 8009dca:	b313      	cbz	r3, 8009e12 <_strtod_l+0xb7a>
 8009dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009dd2:	d81e      	bhi.n	8009e12 <_strtod_l+0xb7a>
 8009dd4:	a326      	add	r3, pc, #152	; (adr r3, 8009e70 <_strtod_l+0xbd8>)
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4629      	mov	r1, r5
 8009dde:	f7f6 fdf7 	bl	80009d0 <__aeabi_dcmple>
 8009de2:	b190      	cbz	r0, 8009e0a <_strtod_l+0xb72>
 8009de4:	4629      	mov	r1, r5
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7f6 fe10 	bl	8000a0c <__aeabi_d2uiz>
 8009dec:	2801      	cmp	r0, #1
 8009dee:	bf38      	it	cc
 8009df0:	2001      	movcc	r0, #1
 8009df2:	f7f6 faf7 	bl	80003e4 <__aeabi_ui2d>
 8009df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009df8:	4604      	mov	r4, r0
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	b9d3      	cbnz	r3, 8009e34 <_strtod_l+0xb9c>
 8009dfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e02:	9012      	str	r0, [sp, #72]	; 0x48
 8009e04:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e06:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009e0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e0c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009e10:	1a9f      	subs	r7, r3, r2
 8009e12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e16:	f001 f85b 	bl	800aed0 <__ulp>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 fb59 	bl	80004d8 <__aeabi_dmul>
 8009e26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e2a:	f7f6 f99f 	bl	800016c <__adddf3>
 8009e2e:	4680      	mov	r8, r0
 8009e30:	4689      	mov	r9, r1
 8009e32:	e77e      	b.n	8009d32 <_strtod_l+0xa9a>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009e3c:	e7e3      	b.n	8009e06 <_strtod_l+0xb6e>
 8009e3e:	a30e      	add	r3, pc, #56	; (adr r3, 8009e78 <_strtod_l+0xbe0>)
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	f7f6 fdba 	bl	80009bc <__aeabi_dcmplt>
 8009e48:	e7a1      	b.n	8009d8e <_strtod_l+0xaf6>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	930c      	str	r3, [sp, #48]	; 0x30
 8009e4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	f7ff ba65 	b.w	8009322 <_strtod_l+0x8a>
 8009e58:	2b65      	cmp	r3, #101	; 0x65
 8009e5a:	f43f ab5c 	beq.w	8009516 <_strtod_l+0x27e>
 8009e5e:	2b45      	cmp	r3, #69	; 0x45
 8009e60:	f43f ab59 	beq.w	8009516 <_strtod_l+0x27e>
 8009e64:	2201      	movs	r2, #1
 8009e66:	f7ff bb8d 	b.w	8009584 <_strtod_l+0x2ec>
 8009e6a:	bf00      	nop
 8009e6c:	f3af 8000 	nop.w
 8009e70:	ffc00000 	.word	0xffc00000
 8009e74:	41dfffff 	.word	0x41dfffff
 8009e78:	94a03595 	.word	0x94a03595
 8009e7c:	3fcfffff 	.word	0x3fcfffff

08009e80 <strtod>:
 8009e80:	460a      	mov	r2, r1
 8009e82:	4601      	mov	r1, r0
 8009e84:	4802      	ldr	r0, [pc, #8]	; (8009e90 <strtod+0x10>)
 8009e86:	4b03      	ldr	r3, [pc, #12]	; (8009e94 <strtod+0x14>)
 8009e88:	6800      	ldr	r0, [r0, #0]
 8009e8a:	f7ff ba05 	b.w	8009298 <_strtod_l>
 8009e8e:	bf00      	nop
 8009e90:	2000018c 	.word	0x2000018c
 8009e94:	200001f4 	.word	0x200001f4

08009e98 <_vsiprintf_r>:
 8009e98:	b500      	push	{lr}
 8009e9a:	b09b      	sub	sp, #108	; 0x6c
 8009e9c:	9100      	str	r1, [sp, #0]
 8009e9e:	9104      	str	r1, [sp, #16]
 8009ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ea4:	9105      	str	r1, [sp, #20]
 8009ea6:	9102      	str	r1, [sp, #8]
 8009ea8:	4905      	ldr	r1, [pc, #20]	; (8009ec0 <_vsiprintf_r+0x28>)
 8009eaa:	9103      	str	r1, [sp, #12]
 8009eac:	4669      	mov	r1, sp
 8009eae:	f001 f9c1 	bl	800b234 <_svfiprintf_r>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	9b00      	ldr	r3, [sp, #0]
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	b01b      	add	sp, #108	; 0x6c
 8009eba:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ebe:	bf00      	nop
 8009ec0:	ffff0208 	.word	0xffff0208

08009ec4 <vsiprintf>:
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	460a      	mov	r2, r1
 8009ec8:	4601      	mov	r1, r0
 8009eca:	4802      	ldr	r0, [pc, #8]	; (8009ed4 <vsiprintf+0x10>)
 8009ecc:	6800      	ldr	r0, [r0, #0]
 8009ece:	f7ff bfe3 	b.w	8009e98 <_vsiprintf_r>
 8009ed2:	bf00      	nop
 8009ed4:	2000018c 	.word	0x2000018c

08009ed8 <std>:
 8009ed8:	2300      	movs	r3, #0
 8009eda:	b510      	push	{r4, lr}
 8009edc:	4604      	mov	r4, r0
 8009ede:	e9c0 3300 	strd	r3, r3, [r0]
 8009ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ee6:	6083      	str	r3, [r0, #8]
 8009ee8:	8181      	strh	r1, [r0, #12]
 8009eea:	6643      	str	r3, [r0, #100]	; 0x64
 8009eec:	81c2      	strh	r2, [r0, #14]
 8009eee:	6183      	str	r3, [r0, #24]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	2208      	movs	r2, #8
 8009ef4:	305c      	adds	r0, #92	; 0x5c
 8009ef6:	f7ff f8cb 	bl	8009090 <memset>
 8009efa:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <std+0x38>)
 8009efc:	6224      	str	r4, [r4, #32]
 8009efe:	6263      	str	r3, [r4, #36]	; 0x24
 8009f00:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <std+0x3c>)
 8009f02:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f04:	4b04      	ldr	r3, [pc, #16]	; (8009f18 <std+0x40>)
 8009f06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f08:	4b04      	ldr	r3, [pc, #16]	; (8009f1c <std+0x44>)
 8009f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	bf00      	nop
 8009f10:	0800ba1d 	.word	0x0800ba1d
 8009f14:	0800ba3f 	.word	0x0800ba3f
 8009f18:	0800ba77 	.word	0x0800ba77
 8009f1c:	0800ba9b 	.word	0x0800ba9b

08009f20 <_cleanup_r>:
 8009f20:	4901      	ldr	r1, [pc, #4]	; (8009f28 <_cleanup_r+0x8>)
 8009f22:	f000 b8af 	b.w	800a084 <_fwalk_reent>
 8009f26:	bf00      	nop
 8009f28:	0800bdcd 	.word	0x0800bdcd

08009f2c <__sfmoreglue>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	2568      	movs	r5, #104	; 0x68
 8009f30:	1e4a      	subs	r2, r1, #1
 8009f32:	4355      	muls	r5, r2
 8009f34:	460e      	mov	r6, r1
 8009f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f3a:	f7ff f8fd 	bl	8009138 <_malloc_r>
 8009f3e:	4604      	mov	r4, r0
 8009f40:	b140      	cbz	r0, 8009f54 <__sfmoreglue+0x28>
 8009f42:	2100      	movs	r1, #0
 8009f44:	e9c0 1600 	strd	r1, r6, [r0]
 8009f48:	300c      	adds	r0, #12
 8009f4a:	60a0      	str	r0, [r4, #8]
 8009f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f50:	f7ff f89e 	bl	8009090 <memset>
 8009f54:	4620      	mov	r0, r4
 8009f56:	bd70      	pop	{r4, r5, r6, pc}

08009f58 <__sfp_lock_acquire>:
 8009f58:	4801      	ldr	r0, [pc, #4]	; (8009f60 <__sfp_lock_acquire+0x8>)
 8009f5a:	f000 bc1a 	b.w	800a792 <__retarget_lock_acquire_recursive>
 8009f5e:	bf00      	nop
 8009f60:	20001114 	.word	0x20001114

08009f64 <__sfp_lock_release>:
 8009f64:	4801      	ldr	r0, [pc, #4]	; (8009f6c <__sfp_lock_release+0x8>)
 8009f66:	f000 bc15 	b.w	800a794 <__retarget_lock_release_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	20001114 	.word	0x20001114

08009f70 <__sinit_lock_acquire>:
 8009f70:	4801      	ldr	r0, [pc, #4]	; (8009f78 <__sinit_lock_acquire+0x8>)
 8009f72:	f000 bc0e 	b.w	800a792 <__retarget_lock_acquire_recursive>
 8009f76:	bf00      	nop
 8009f78:	2000110f 	.word	0x2000110f

08009f7c <__sinit_lock_release>:
 8009f7c:	4801      	ldr	r0, [pc, #4]	; (8009f84 <__sinit_lock_release+0x8>)
 8009f7e:	f000 bc09 	b.w	800a794 <__retarget_lock_release_recursive>
 8009f82:	bf00      	nop
 8009f84:	2000110f 	.word	0x2000110f

08009f88 <__sinit>:
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	f7ff fff0 	bl	8009f70 <__sinit_lock_acquire>
 8009f90:	69a3      	ldr	r3, [r4, #24]
 8009f92:	b11b      	cbz	r3, 8009f9c <__sinit+0x14>
 8009f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f98:	f7ff bff0 	b.w	8009f7c <__sinit_lock_release>
 8009f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8009fa2:	4b13      	ldr	r3, [pc, #76]	; (8009ff0 <__sinit+0x68>)
 8009fa4:	4a13      	ldr	r2, [pc, #76]	; (8009ff4 <__sinit+0x6c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009faa:	42a3      	cmp	r3, r4
 8009fac:	bf08      	it	eq
 8009fae:	2301      	moveq	r3, #1
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	bf08      	it	eq
 8009fb4:	61a3      	streq	r3, [r4, #24]
 8009fb6:	f000 f81f 	bl	8009ff8 <__sfp>
 8009fba:	6060      	str	r0, [r4, #4]
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f000 f81b 	bl	8009ff8 <__sfp>
 8009fc2:	60a0      	str	r0, [r4, #8]
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 f817 	bl	8009ff8 <__sfp>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2104      	movs	r1, #4
 8009fce:	60e0      	str	r0, [r4, #12]
 8009fd0:	6860      	ldr	r0, [r4, #4]
 8009fd2:	f7ff ff81 	bl	8009ed8 <std>
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	2109      	movs	r1, #9
 8009fda:	68a0      	ldr	r0, [r4, #8]
 8009fdc:	f7ff ff7c 	bl	8009ed8 <std>
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	2112      	movs	r1, #18
 8009fe4:	68e0      	ldr	r0, [r4, #12]
 8009fe6:	f7ff ff77 	bl	8009ed8 <std>
 8009fea:	2301      	movs	r3, #1
 8009fec:	61a3      	str	r3, [r4, #24]
 8009fee:	e7d1      	b.n	8009f94 <__sinit+0xc>
 8009ff0:	0800c230 	.word	0x0800c230
 8009ff4:	08009f21 	.word	0x08009f21

08009ff8 <__sfp>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	f7ff ffac 	bl	8009f58 <__sfp_lock_acquire>
 800a000:	4b1e      	ldr	r3, [pc, #120]	; (800a07c <__sfp+0x84>)
 800a002:	681e      	ldr	r6, [r3, #0]
 800a004:	69b3      	ldr	r3, [r6, #24]
 800a006:	b913      	cbnz	r3, 800a00e <__sfp+0x16>
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff ffbd 	bl	8009f88 <__sinit>
 800a00e:	3648      	adds	r6, #72	; 0x48
 800a010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a014:	3b01      	subs	r3, #1
 800a016:	d503      	bpl.n	800a020 <__sfp+0x28>
 800a018:	6833      	ldr	r3, [r6, #0]
 800a01a:	b30b      	cbz	r3, 800a060 <__sfp+0x68>
 800a01c:	6836      	ldr	r6, [r6, #0]
 800a01e:	e7f7      	b.n	800a010 <__sfp+0x18>
 800a020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a024:	b9d5      	cbnz	r5, 800a05c <__sfp+0x64>
 800a026:	4b16      	ldr	r3, [pc, #88]	; (800a080 <__sfp+0x88>)
 800a028:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a02c:	60e3      	str	r3, [r4, #12]
 800a02e:	6665      	str	r5, [r4, #100]	; 0x64
 800a030:	f000 fbae 	bl	800a790 <__retarget_lock_init_recursive>
 800a034:	f7ff ff96 	bl	8009f64 <__sfp_lock_release>
 800a038:	2208      	movs	r2, #8
 800a03a:	4629      	mov	r1, r5
 800a03c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a044:	6025      	str	r5, [r4, #0]
 800a046:	61a5      	str	r5, [r4, #24]
 800a048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a04c:	f7ff f820 	bl	8009090 <memset>
 800a050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a058:	4620      	mov	r0, r4
 800a05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a05c:	3468      	adds	r4, #104	; 0x68
 800a05e:	e7d9      	b.n	800a014 <__sfp+0x1c>
 800a060:	2104      	movs	r1, #4
 800a062:	4638      	mov	r0, r7
 800a064:	f7ff ff62 	bl	8009f2c <__sfmoreglue>
 800a068:	4604      	mov	r4, r0
 800a06a:	6030      	str	r0, [r6, #0]
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d1d5      	bne.n	800a01c <__sfp+0x24>
 800a070:	f7ff ff78 	bl	8009f64 <__sfp_lock_release>
 800a074:	230c      	movs	r3, #12
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	e7ee      	b.n	800a058 <__sfp+0x60>
 800a07a:	bf00      	nop
 800a07c:	0800c230 	.word	0x0800c230
 800a080:	ffff0001 	.word	0xffff0001

0800a084 <_fwalk_reent>:
 800a084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a088:	4606      	mov	r6, r0
 800a08a:	4688      	mov	r8, r1
 800a08c:	2700      	movs	r7, #0
 800a08e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a096:	f1b9 0901 	subs.w	r9, r9, #1
 800a09a:	d505      	bpl.n	800a0a8 <_fwalk_reent+0x24>
 800a09c:	6824      	ldr	r4, [r4, #0]
 800a09e:	2c00      	cmp	r4, #0
 800a0a0:	d1f7      	bne.n	800a092 <_fwalk_reent+0xe>
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0a8:	89ab      	ldrh	r3, [r5, #12]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d907      	bls.n	800a0be <_fwalk_reent+0x3a>
 800a0ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	d003      	beq.n	800a0be <_fwalk_reent+0x3a>
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	47c0      	blx	r8
 800a0bc:	4307      	orrs	r7, r0
 800a0be:	3568      	adds	r5, #104	; 0x68
 800a0c0:	e7e9      	b.n	800a096 <_fwalk_reent+0x12>

0800a0c2 <rshift>:
 800a0c2:	6903      	ldr	r3, [r0, #16]
 800a0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0cc:	f100 0414 	add.w	r4, r0, #20
 800a0d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0d4:	dd46      	ble.n	800a164 <rshift+0xa2>
 800a0d6:	f011 011f 	ands.w	r1, r1, #31
 800a0da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0e2:	d10c      	bne.n	800a0fe <rshift+0x3c>
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	f100 0710 	add.w	r7, r0, #16
 800a0ea:	42b1      	cmp	r1, r6
 800a0ec:	d335      	bcc.n	800a15a <rshift+0x98>
 800a0ee:	1a9b      	subs	r3, r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	1eea      	subs	r2, r5, #3
 800a0f4:	4296      	cmp	r6, r2
 800a0f6:	bf38      	it	cc
 800a0f8:	2300      	movcc	r3, #0
 800a0fa:	4423      	add	r3, r4
 800a0fc:	e015      	b.n	800a12a <rshift+0x68>
 800a0fe:	46a1      	mov	r9, r4
 800a100:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a104:	f1c1 0820 	rsb	r8, r1, #32
 800a108:	40cf      	lsrs	r7, r1
 800a10a:	f105 0e04 	add.w	lr, r5, #4
 800a10e:	4576      	cmp	r6, lr
 800a110:	46f4      	mov	ip, lr
 800a112:	d816      	bhi.n	800a142 <rshift+0x80>
 800a114:	1a9b      	subs	r3, r3, r2
 800a116:	009a      	lsls	r2, r3, #2
 800a118:	3a04      	subs	r2, #4
 800a11a:	3501      	adds	r5, #1
 800a11c:	42ae      	cmp	r6, r5
 800a11e:	bf38      	it	cc
 800a120:	2200      	movcc	r2, #0
 800a122:	18a3      	adds	r3, r4, r2
 800a124:	50a7      	str	r7, [r4, r2]
 800a126:	b107      	cbz	r7, 800a12a <rshift+0x68>
 800a128:	3304      	adds	r3, #4
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	eba3 0204 	sub.w	r2, r3, r4
 800a130:	bf08      	it	eq
 800a132:	2300      	moveq	r3, #0
 800a134:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a138:	6102      	str	r2, [r0, #16]
 800a13a:	bf08      	it	eq
 800a13c:	6143      	streq	r3, [r0, #20]
 800a13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a142:	f8dc c000 	ldr.w	ip, [ip]
 800a146:	fa0c fc08 	lsl.w	ip, ip, r8
 800a14a:	ea4c 0707 	orr.w	r7, ip, r7
 800a14e:	f849 7b04 	str.w	r7, [r9], #4
 800a152:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a156:	40cf      	lsrs	r7, r1
 800a158:	e7d9      	b.n	800a10e <rshift+0x4c>
 800a15a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a15e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a162:	e7c2      	b.n	800a0ea <rshift+0x28>
 800a164:	4623      	mov	r3, r4
 800a166:	e7e0      	b.n	800a12a <rshift+0x68>

0800a168 <__hexdig_fun>:
 800a168:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a16c:	2b09      	cmp	r3, #9
 800a16e:	d802      	bhi.n	800a176 <__hexdig_fun+0xe>
 800a170:	3820      	subs	r0, #32
 800a172:	b2c0      	uxtb	r0, r0
 800a174:	4770      	bx	lr
 800a176:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a17a:	2b05      	cmp	r3, #5
 800a17c:	d801      	bhi.n	800a182 <__hexdig_fun+0x1a>
 800a17e:	3847      	subs	r0, #71	; 0x47
 800a180:	e7f7      	b.n	800a172 <__hexdig_fun+0xa>
 800a182:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a186:	2b05      	cmp	r3, #5
 800a188:	d801      	bhi.n	800a18e <__hexdig_fun+0x26>
 800a18a:	3827      	subs	r0, #39	; 0x27
 800a18c:	e7f1      	b.n	800a172 <__hexdig_fun+0xa>
 800a18e:	2000      	movs	r0, #0
 800a190:	4770      	bx	lr
	...

0800a194 <__gethex>:
 800a194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	b08b      	sub	sp, #44	; 0x2c
 800a19a:	9306      	str	r3, [sp, #24]
 800a19c:	4bb9      	ldr	r3, [pc, #740]	; (800a484 <__gethex+0x2f0>)
 800a19e:	9002      	str	r0, [sp, #8]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	468b      	mov	fp, r1
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	4690      	mov	r8, r2
 800a1a8:	9303      	str	r3, [sp, #12]
 800a1aa:	f7f5 ffd1 	bl	8000150 <strlen>
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	9b03      	ldr	r3, [sp, #12]
 800a1b2:	f8db 2000 	ldr.w	r2, [fp]
 800a1b6:	4403      	add	r3, r0
 800a1b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a1bc:	9307      	str	r3, [sp, #28]
 800a1be:	1c93      	adds	r3, r2, #2
 800a1c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a1c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a1c8:	32fe      	adds	r2, #254	; 0xfe
 800a1ca:	18d1      	adds	r1, r2, r3
 800a1cc:	461f      	mov	r7, r3
 800a1ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1d2:	9101      	str	r1, [sp, #4]
 800a1d4:	2830      	cmp	r0, #48	; 0x30
 800a1d6:	d0f8      	beq.n	800a1ca <__gethex+0x36>
 800a1d8:	f7ff ffc6 	bl	800a168 <__hexdig_fun>
 800a1dc:	4604      	mov	r4, r0
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d13a      	bne.n	800a258 <__gethex+0xc4>
 800a1e2:	4652      	mov	r2, sl
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	9903      	ldr	r1, [sp, #12]
 800a1e8:	f7ff f810 	bl	800920c <strncmp>
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d166      	bne.n	800a2c0 <__gethex+0x12c>
 800a1f2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a1f6:	eb07 060a 	add.w	r6, r7, sl
 800a1fa:	f7ff ffb5 	bl	800a168 <__hexdig_fun>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d060      	beq.n	800a2c4 <__gethex+0x130>
 800a202:	4633      	mov	r3, r6
 800a204:	7818      	ldrb	r0, [r3, #0]
 800a206:	461f      	mov	r7, r3
 800a208:	2830      	cmp	r0, #48	; 0x30
 800a20a:	f103 0301 	add.w	r3, r3, #1
 800a20e:	d0f9      	beq.n	800a204 <__gethex+0x70>
 800a210:	f7ff ffaa 	bl	800a168 <__hexdig_fun>
 800a214:	2301      	movs	r3, #1
 800a216:	fab0 f480 	clz	r4, r0
 800a21a:	4635      	mov	r5, r6
 800a21c:	0964      	lsrs	r4, r4, #5
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	463a      	mov	r2, r7
 800a222:	4616      	mov	r6, r2
 800a224:	7830      	ldrb	r0, [r6, #0]
 800a226:	3201      	adds	r2, #1
 800a228:	f7ff ff9e 	bl	800a168 <__hexdig_fun>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d1f8      	bne.n	800a222 <__gethex+0x8e>
 800a230:	4652      	mov	r2, sl
 800a232:	4630      	mov	r0, r6
 800a234:	9903      	ldr	r1, [sp, #12]
 800a236:	f7fe ffe9 	bl	800920c <strncmp>
 800a23a:	b980      	cbnz	r0, 800a25e <__gethex+0xca>
 800a23c:	b94d      	cbnz	r5, 800a252 <__gethex+0xbe>
 800a23e:	eb06 050a 	add.w	r5, r6, sl
 800a242:	462a      	mov	r2, r5
 800a244:	4616      	mov	r6, r2
 800a246:	7830      	ldrb	r0, [r6, #0]
 800a248:	3201      	adds	r2, #1
 800a24a:	f7ff ff8d 	bl	800a168 <__hexdig_fun>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d1f8      	bne.n	800a244 <__gethex+0xb0>
 800a252:	1bad      	subs	r5, r5, r6
 800a254:	00ad      	lsls	r5, r5, #2
 800a256:	e004      	b.n	800a262 <__gethex+0xce>
 800a258:	2400      	movs	r4, #0
 800a25a:	4625      	mov	r5, r4
 800a25c:	e7e0      	b.n	800a220 <__gethex+0x8c>
 800a25e:	2d00      	cmp	r5, #0
 800a260:	d1f7      	bne.n	800a252 <__gethex+0xbe>
 800a262:	7833      	ldrb	r3, [r6, #0]
 800a264:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a268:	2b50      	cmp	r3, #80	; 0x50
 800a26a:	d139      	bne.n	800a2e0 <__gethex+0x14c>
 800a26c:	7873      	ldrb	r3, [r6, #1]
 800a26e:	2b2b      	cmp	r3, #43	; 0x2b
 800a270:	d02a      	beq.n	800a2c8 <__gethex+0x134>
 800a272:	2b2d      	cmp	r3, #45	; 0x2d
 800a274:	d02c      	beq.n	800a2d0 <__gethex+0x13c>
 800a276:	f04f 0900 	mov.w	r9, #0
 800a27a:	1c71      	adds	r1, r6, #1
 800a27c:	7808      	ldrb	r0, [r1, #0]
 800a27e:	f7ff ff73 	bl	800a168 <__hexdig_fun>
 800a282:	1e43      	subs	r3, r0, #1
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b18      	cmp	r3, #24
 800a288:	d82a      	bhi.n	800a2e0 <__gethex+0x14c>
 800a28a:	f1a0 0210 	sub.w	r2, r0, #16
 800a28e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a292:	f7ff ff69 	bl	800a168 <__hexdig_fun>
 800a296:	1e43      	subs	r3, r0, #1
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b18      	cmp	r3, #24
 800a29c:	d91b      	bls.n	800a2d6 <__gethex+0x142>
 800a29e:	f1b9 0f00 	cmp.w	r9, #0
 800a2a2:	d000      	beq.n	800a2a6 <__gethex+0x112>
 800a2a4:	4252      	negs	r2, r2
 800a2a6:	4415      	add	r5, r2
 800a2a8:	f8cb 1000 	str.w	r1, [fp]
 800a2ac:	b1d4      	cbz	r4, 800a2e4 <__gethex+0x150>
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	bf14      	ite	ne
 800a2b4:	2700      	movne	r7, #0
 800a2b6:	2706      	moveq	r7, #6
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	b00b      	add	sp, #44	; 0x2c
 800a2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c0:	463e      	mov	r6, r7
 800a2c2:	4625      	mov	r5, r4
 800a2c4:	2401      	movs	r4, #1
 800a2c6:	e7cc      	b.n	800a262 <__gethex+0xce>
 800a2c8:	f04f 0900 	mov.w	r9, #0
 800a2cc:	1cb1      	adds	r1, r6, #2
 800a2ce:	e7d5      	b.n	800a27c <__gethex+0xe8>
 800a2d0:	f04f 0901 	mov.w	r9, #1
 800a2d4:	e7fa      	b.n	800a2cc <__gethex+0x138>
 800a2d6:	230a      	movs	r3, #10
 800a2d8:	fb03 0202 	mla	r2, r3, r2, r0
 800a2dc:	3a10      	subs	r2, #16
 800a2de:	e7d6      	b.n	800a28e <__gethex+0xfa>
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	e7e1      	b.n	800a2a8 <__gethex+0x114>
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	1bf3      	subs	r3, r6, r7
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	2b07      	cmp	r3, #7
 800a2ec:	dc0a      	bgt.n	800a304 <__gethex+0x170>
 800a2ee:	9802      	ldr	r0, [sp, #8]
 800a2f0:	f000 fa7e 	bl	800a7f0 <_Balloc>
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	b940      	cbnz	r0, 800a30a <__gethex+0x176>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	21de      	movs	r1, #222	; 0xde
 800a2fc:	4b62      	ldr	r3, [pc, #392]	; (800a488 <__gethex+0x2f4>)
 800a2fe:	4863      	ldr	r0, [pc, #396]	; (800a48c <__gethex+0x2f8>)
 800a300:	f001 fcb0 	bl	800bc64 <__assert_func>
 800a304:	3101      	adds	r1, #1
 800a306:	105b      	asrs	r3, r3, #1
 800a308:	e7ef      	b.n	800a2ea <__gethex+0x156>
 800a30a:	f04f 0b00 	mov.w	fp, #0
 800a30e:	f100 0914 	add.w	r9, r0, #20
 800a312:	f1ca 0301 	rsb	r3, sl, #1
 800a316:	f8cd 9010 	str.w	r9, [sp, #16]
 800a31a:	f8cd b004 	str.w	fp, [sp, #4]
 800a31e:	9308      	str	r3, [sp, #32]
 800a320:	42b7      	cmp	r7, r6
 800a322:	d33f      	bcc.n	800a3a4 <__gethex+0x210>
 800a324:	9f04      	ldr	r7, [sp, #16]
 800a326:	9b01      	ldr	r3, [sp, #4]
 800a328:	f847 3b04 	str.w	r3, [r7], #4
 800a32c:	eba7 0709 	sub.w	r7, r7, r9
 800a330:	10bf      	asrs	r7, r7, #2
 800a332:	6127      	str	r7, [r4, #16]
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fb51 	bl	800a9dc <__hi0bits>
 800a33a:	017f      	lsls	r7, r7, #5
 800a33c:	f8d8 6000 	ldr.w	r6, [r8]
 800a340:	1a3f      	subs	r7, r7, r0
 800a342:	42b7      	cmp	r7, r6
 800a344:	dd62      	ble.n	800a40c <__gethex+0x278>
 800a346:	1bbf      	subs	r7, r7, r6
 800a348:	4639      	mov	r1, r7
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 fee7 	bl	800b11e <__any_on>
 800a350:	4682      	mov	sl, r0
 800a352:	b1a8      	cbz	r0, 800a380 <__gethex+0x1ec>
 800a354:	f04f 0a01 	mov.w	sl, #1
 800a358:	1e7b      	subs	r3, r7, #1
 800a35a:	1159      	asrs	r1, r3, #5
 800a35c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a360:	f003 021f 	and.w	r2, r3, #31
 800a364:	fa0a f202 	lsl.w	r2, sl, r2
 800a368:	420a      	tst	r2, r1
 800a36a:	d009      	beq.n	800a380 <__gethex+0x1ec>
 800a36c:	4553      	cmp	r3, sl
 800a36e:	dd05      	ble.n	800a37c <__gethex+0x1e8>
 800a370:	4620      	mov	r0, r4
 800a372:	1eb9      	subs	r1, r7, #2
 800a374:	f000 fed3 	bl	800b11e <__any_on>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d144      	bne.n	800a406 <__gethex+0x272>
 800a37c:	f04f 0a02 	mov.w	sl, #2
 800a380:	4639      	mov	r1, r7
 800a382:	4620      	mov	r0, r4
 800a384:	f7ff fe9d 	bl	800a0c2 <rshift>
 800a388:	443d      	add	r5, r7
 800a38a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a38e:	42ab      	cmp	r3, r5
 800a390:	da4a      	bge.n	800a428 <__gethex+0x294>
 800a392:	4621      	mov	r1, r4
 800a394:	9802      	ldr	r0, [sp, #8]
 800a396:	f000 fa6b 	bl	800a870 <_Bfree>
 800a39a:	2300      	movs	r3, #0
 800a39c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a39e:	27a3      	movs	r7, #163	; 0xa3
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	e789      	b.n	800a2b8 <__gethex+0x124>
 800a3a4:	1e73      	subs	r3, r6, #1
 800a3a6:	9a07      	ldr	r2, [sp, #28]
 800a3a8:	9305      	str	r3, [sp, #20]
 800a3aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d019      	beq.n	800a3e6 <__gethex+0x252>
 800a3b2:	f1bb 0f20 	cmp.w	fp, #32
 800a3b6:	d107      	bne.n	800a3c8 <__gethex+0x234>
 800a3b8:	9b04      	ldr	r3, [sp, #16]
 800a3ba:	9a01      	ldr	r2, [sp, #4]
 800a3bc:	f843 2b04 	str.w	r2, [r3], #4
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	469b      	mov	fp, r3
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a3cc:	f7ff fecc 	bl	800a168 <__hexdig_fun>
 800a3d0:	9b01      	ldr	r3, [sp, #4]
 800a3d2:	f000 000f 	and.w	r0, r0, #15
 800a3d6:	fa00 f00b 	lsl.w	r0, r0, fp
 800a3da:	4303      	orrs	r3, r0
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	f10b 0b04 	add.w	fp, fp, #4
 800a3e2:	9b05      	ldr	r3, [sp, #20]
 800a3e4:	e00d      	b.n	800a402 <__gethex+0x26e>
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	9a08      	ldr	r2, [sp, #32]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	42bb      	cmp	r3, r7
 800a3ee:	d3e0      	bcc.n	800a3b2 <__gethex+0x21e>
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	4652      	mov	r2, sl
 800a3f4:	9903      	ldr	r1, [sp, #12]
 800a3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f8:	f7fe ff08 	bl	800920c <strncmp>
 800a3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d1d7      	bne.n	800a3b2 <__gethex+0x21e>
 800a402:	461e      	mov	r6, r3
 800a404:	e78c      	b.n	800a320 <__gethex+0x18c>
 800a406:	f04f 0a03 	mov.w	sl, #3
 800a40a:	e7b9      	b.n	800a380 <__gethex+0x1ec>
 800a40c:	da09      	bge.n	800a422 <__gethex+0x28e>
 800a40e:	1bf7      	subs	r7, r6, r7
 800a410:	4621      	mov	r1, r4
 800a412:	463a      	mov	r2, r7
 800a414:	9802      	ldr	r0, [sp, #8]
 800a416:	f000 fc43 	bl	800aca0 <__lshift>
 800a41a:	4604      	mov	r4, r0
 800a41c:	1bed      	subs	r5, r5, r7
 800a41e:	f100 0914 	add.w	r9, r0, #20
 800a422:	f04f 0a00 	mov.w	sl, #0
 800a426:	e7b0      	b.n	800a38a <__gethex+0x1f6>
 800a428:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a42c:	42a8      	cmp	r0, r5
 800a42e:	dd71      	ble.n	800a514 <__gethex+0x380>
 800a430:	1b45      	subs	r5, r0, r5
 800a432:	42ae      	cmp	r6, r5
 800a434:	dc34      	bgt.n	800a4a0 <__gethex+0x30c>
 800a436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d028      	beq.n	800a490 <__gethex+0x2fc>
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d02a      	beq.n	800a498 <__gethex+0x304>
 800a442:	2b01      	cmp	r3, #1
 800a444:	d115      	bne.n	800a472 <__gethex+0x2de>
 800a446:	42ae      	cmp	r6, r5
 800a448:	d113      	bne.n	800a472 <__gethex+0x2de>
 800a44a:	2e01      	cmp	r6, #1
 800a44c:	d10b      	bne.n	800a466 <__gethex+0x2d2>
 800a44e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a452:	9a06      	ldr	r2, [sp, #24]
 800a454:	2762      	movs	r7, #98	; 0x62
 800a456:	6013      	str	r3, [r2, #0]
 800a458:	2301      	movs	r3, #1
 800a45a:	6123      	str	r3, [r4, #16]
 800a45c:	f8c9 3000 	str.w	r3, [r9]
 800a460:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a462:	601c      	str	r4, [r3, #0]
 800a464:	e728      	b.n	800a2b8 <__gethex+0x124>
 800a466:	4620      	mov	r0, r4
 800a468:	1e71      	subs	r1, r6, #1
 800a46a:	f000 fe58 	bl	800b11e <__any_on>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d1ed      	bne.n	800a44e <__gethex+0x2ba>
 800a472:	4621      	mov	r1, r4
 800a474:	9802      	ldr	r0, [sp, #8]
 800a476:	f000 f9fb 	bl	800a870 <_Bfree>
 800a47a:	2300      	movs	r3, #0
 800a47c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a47e:	2750      	movs	r7, #80	; 0x50
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	e719      	b.n	800a2b8 <__gethex+0x124>
 800a484:	0800c36c 	.word	0x0800c36c
 800a488:	0800c2f0 	.word	0x0800c2f0
 800a48c:	0800c301 	.word	0x0800c301
 800a490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1ed      	bne.n	800a472 <__gethex+0x2de>
 800a496:	e7da      	b.n	800a44e <__gethex+0x2ba>
 800a498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1d7      	bne.n	800a44e <__gethex+0x2ba>
 800a49e:	e7e8      	b.n	800a472 <__gethex+0x2de>
 800a4a0:	1e6f      	subs	r7, r5, #1
 800a4a2:	f1ba 0f00 	cmp.w	sl, #0
 800a4a6:	d132      	bne.n	800a50e <__gethex+0x37a>
 800a4a8:	b127      	cbz	r7, 800a4b4 <__gethex+0x320>
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 fe36 	bl	800b11e <__any_on>
 800a4b2:	4682      	mov	sl, r0
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	117b      	asrs	r3, r7, #5
 800a4b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a4bc:	f007 071f 	and.w	r7, r7, #31
 800a4c0:	fa01 f707 	lsl.w	r7, r1, r7
 800a4c4:	421f      	tst	r7, r3
 800a4c6:	f04f 0702 	mov.w	r7, #2
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	bf18      	it	ne
 800a4d0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a4d4:	1b76      	subs	r6, r6, r5
 800a4d6:	f7ff fdf4 	bl	800a0c2 <rshift>
 800a4da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4de:	f1ba 0f00 	cmp.w	sl, #0
 800a4e2:	d048      	beq.n	800a576 <__gethex+0x3e2>
 800a4e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d015      	beq.n	800a518 <__gethex+0x384>
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	d017      	beq.n	800a520 <__gethex+0x38c>
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d109      	bne.n	800a508 <__gethex+0x374>
 800a4f4:	f01a 0f02 	tst.w	sl, #2
 800a4f8:	d006      	beq.n	800a508 <__gethex+0x374>
 800a4fa:	f8d9 0000 	ldr.w	r0, [r9]
 800a4fe:	ea4a 0a00 	orr.w	sl, sl, r0
 800a502:	f01a 0f01 	tst.w	sl, #1
 800a506:	d10e      	bne.n	800a526 <__gethex+0x392>
 800a508:	f047 0710 	orr.w	r7, r7, #16
 800a50c:	e033      	b.n	800a576 <__gethex+0x3e2>
 800a50e:	f04f 0a01 	mov.w	sl, #1
 800a512:	e7cf      	b.n	800a4b4 <__gethex+0x320>
 800a514:	2701      	movs	r7, #1
 800a516:	e7e2      	b.n	800a4de <__gethex+0x34a>
 800a518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a51a:	f1c3 0301 	rsb	r3, r3, #1
 800a51e:	9315      	str	r3, [sp, #84]	; 0x54
 800a520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f0      	beq.n	800a508 <__gethex+0x374>
 800a526:	f04f 0c00 	mov.w	ip, #0
 800a52a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a52e:	f104 0314 	add.w	r3, r4, #20
 800a532:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a536:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a53a:	4618      	mov	r0, r3
 800a53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a540:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a544:	d01c      	beq.n	800a580 <__gethex+0x3ec>
 800a546:	3201      	adds	r2, #1
 800a548:	6002      	str	r2, [r0, #0]
 800a54a:	2f02      	cmp	r7, #2
 800a54c:	f104 0314 	add.w	r3, r4, #20
 800a550:	d13d      	bne.n	800a5ce <__gethex+0x43a>
 800a552:	f8d8 2000 	ldr.w	r2, [r8]
 800a556:	3a01      	subs	r2, #1
 800a558:	42b2      	cmp	r2, r6
 800a55a:	d10a      	bne.n	800a572 <__gethex+0x3de>
 800a55c:	2201      	movs	r2, #1
 800a55e:	1171      	asrs	r1, r6, #5
 800a560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a564:	f006 061f 	and.w	r6, r6, #31
 800a568:	fa02 f606 	lsl.w	r6, r2, r6
 800a56c:	421e      	tst	r6, r3
 800a56e:	bf18      	it	ne
 800a570:	4617      	movne	r7, r2
 800a572:	f047 0720 	orr.w	r7, r7, #32
 800a576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a578:	601c      	str	r4, [r3, #0]
 800a57a:	9b06      	ldr	r3, [sp, #24]
 800a57c:	601d      	str	r5, [r3, #0]
 800a57e:	e69b      	b.n	800a2b8 <__gethex+0x124>
 800a580:	4299      	cmp	r1, r3
 800a582:	f843 cc04 	str.w	ip, [r3, #-4]
 800a586:	d8d8      	bhi.n	800a53a <__gethex+0x3a6>
 800a588:	68a3      	ldr	r3, [r4, #8]
 800a58a:	459b      	cmp	fp, r3
 800a58c:	db17      	blt.n	800a5be <__gethex+0x42a>
 800a58e:	6861      	ldr	r1, [r4, #4]
 800a590:	9802      	ldr	r0, [sp, #8]
 800a592:	3101      	adds	r1, #1
 800a594:	f000 f92c 	bl	800a7f0 <_Balloc>
 800a598:	4681      	mov	r9, r0
 800a59a:	b918      	cbnz	r0, 800a5a4 <__gethex+0x410>
 800a59c:	4602      	mov	r2, r0
 800a59e:	2184      	movs	r1, #132	; 0x84
 800a5a0:	4b19      	ldr	r3, [pc, #100]	; (800a608 <__gethex+0x474>)
 800a5a2:	e6ac      	b.n	800a2fe <__gethex+0x16a>
 800a5a4:	6922      	ldr	r2, [r4, #16]
 800a5a6:	f104 010c 	add.w	r1, r4, #12
 800a5aa:	3202      	adds	r2, #2
 800a5ac:	0092      	lsls	r2, r2, #2
 800a5ae:	300c      	adds	r0, #12
 800a5b0:	f000 f903 	bl	800a7ba <memcpy>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	9802      	ldr	r0, [sp, #8]
 800a5b8:	f000 f95a 	bl	800a870 <_Bfree>
 800a5bc:	464c      	mov	r4, r9
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	6122      	str	r2, [r4, #16]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5ca:	615a      	str	r2, [r3, #20]
 800a5cc:	e7bd      	b.n	800a54a <__gethex+0x3b6>
 800a5ce:	6922      	ldr	r2, [r4, #16]
 800a5d0:	455a      	cmp	r2, fp
 800a5d2:	dd0b      	ble.n	800a5ec <__gethex+0x458>
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f7ff fd73 	bl	800a0c2 <rshift>
 800a5dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5e0:	3501      	adds	r5, #1
 800a5e2:	42ab      	cmp	r3, r5
 800a5e4:	f6ff aed5 	blt.w	800a392 <__gethex+0x1fe>
 800a5e8:	2701      	movs	r7, #1
 800a5ea:	e7c2      	b.n	800a572 <__gethex+0x3de>
 800a5ec:	f016 061f 	ands.w	r6, r6, #31
 800a5f0:	d0fa      	beq.n	800a5e8 <__gethex+0x454>
 800a5f2:	449a      	add	sl, r3
 800a5f4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a5f8:	f000 f9f0 	bl	800a9dc <__hi0bits>
 800a5fc:	f1c6 0620 	rsb	r6, r6, #32
 800a600:	42b0      	cmp	r0, r6
 800a602:	dbe7      	blt.n	800a5d4 <__gethex+0x440>
 800a604:	e7f0      	b.n	800a5e8 <__gethex+0x454>
 800a606:	bf00      	nop
 800a608:	0800c2f0 	.word	0x0800c2f0

0800a60c <L_shift>:
 800a60c:	f1c2 0208 	rsb	r2, r2, #8
 800a610:	0092      	lsls	r2, r2, #2
 800a612:	b570      	push	{r4, r5, r6, lr}
 800a614:	f1c2 0620 	rsb	r6, r2, #32
 800a618:	6843      	ldr	r3, [r0, #4]
 800a61a:	6804      	ldr	r4, [r0, #0]
 800a61c:	fa03 f506 	lsl.w	r5, r3, r6
 800a620:	432c      	orrs	r4, r5
 800a622:	40d3      	lsrs	r3, r2
 800a624:	6004      	str	r4, [r0, #0]
 800a626:	f840 3f04 	str.w	r3, [r0, #4]!
 800a62a:	4288      	cmp	r0, r1
 800a62c:	d3f4      	bcc.n	800a618 <L_shift+0xc>
 800a62e:	bd70      	pop	{r4, r5, r6, pc}

0800a630 <__match>:
 800a630:	b530      	push	{r4, r5, lr}
 800a632:	6803      	ldr	r3, [r0, #0]
 800a634:	3301      	adds	r3, #1
 800a636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a63a:	b914      	cbnz	r4, 800a642 <__match+0x12>
 800a63c:	6003      	str	r3, [r0, #0]
 800a63e:	2001      	movs	r0, #1
 800a640:	bd30      	pop	{r4, r5, pc}
 800a642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a646:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a64a:	2d19      	cmp	r5, #25
 800a64c:	bf98      	it	ls
 800a64e:	3220      	addls	r2, #32
 800a650:	42a2      	cmp	r2, r4
 800a652:	d0f0      	beq.n	800a636 <__match+0x6>
 800a654:	2000      	movs	r0, #0
 800a656:	e7f3      	b.n	800a640 <__match+0x10>

0800a658 <__hexnan>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	2500      	movs	r5, #0
 800a65e:	680b      	ldr	r3, [r1, #0]
 800a660:	4682      	mov	sl, r0
 800a662:	115e      	asrs	r6, r3, #5
 800a664:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a668:	f013 031f 	ands.w	r3, r3, #31
 800a66c:	bf18      	it	ne
 800a66e:	3604      	addne	r6, #4
 800a670:	1f37      	subs	r7, r6, #4
 800a672:	4690      	mov	r8, r2
 800a674:	46b9      	mov	r9, r7
 800a676:	463c      	mov	r4, r7
 800a678:	46ab      	mov	fp, r5
 800a67a:	b087      	sub	sp, #28
 800a67c:	6801      	ldr	r1, [r0, #0]
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	f846 5c04 	str.w	r5, [r6, #-4]
 800a684:	9502      	str	r5, [sp, #8]
 800a686:	784a      	ldrb	r2, [r1, #1]
 800a688:	1c4b      	adds	r3, r1, #1
 800a68a:	9303      	str	r3, [sp, #12]
 800a68c:	b342      	cbz	r2, 800a6e0 <__hexnan+0x88>
 800a68e:	4610      	mov	r0, r2
 800a690:	9105      	str	r1, [sp, #20]
 800a692:	9204      	str	r2, [sp, #16]
 800a694:	f7ff fd68 	bl	800a168 <__hexdig_fun>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d14f      	bne.n	800a73c <__hexnan+0xe4>
 800a69c:	9a04      	ldr	r2, [sp, #16]
 800a69e:	9905      	ldr	r1, [sp, #20]
 800a6a0:	2a20      	cmp	r2, #32
 800a6a2:	d818      	bhi.n	800a6d6 <__hexnan+0x7e>
 800a6a4:	9b02      	ldr	r3, [sp, #8]
 800a6a6:	459b      	cmp	fp, r3
 800a6a8:	dd13      	ble.n	800a6d2 <__hexnan+0x7a>
 800a6aa:	454c      	cmp	r4, r9
 800a6ac:	d206      	bcs.n	800a6bc <__hexnan+0x64>
 800a6ae:	2d07      	cmp	r5, #7
 800a6b0:	dc04      	bgt.n	800a6bc <__hexnan+0x64>
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f7ff ffa8 	bl	800a60c <L_shift>
 800a6bc:	4544      	cmp	r4, r8
 800a6be:	d950      	bls.n	800a762 <__hexnan+0x10a>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f1a4 0904 	sub.w	r9, r4, #4
 800a6c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6ca:	461d      	mov	r5, r3
 800a6cc:	464c      	mov	r4, r9
 800a6ce:	f8cd b008 	str.w	fp, [sp, #8]
 800a6d2:	9903      	ldr	r1, [sp, #12]
 800a6d4:	e7d7      	b.n	800a686 <__hexnan+0x2e>
 800a6d6:	2a29      	cmp	r2, #41	; 0x29
 800a6d8:	d156      	bne.n	800a788 <__hexnan+0x130>
 800a6da:	3102      	adds	r1, #2
 800a6dc:	f8ca 1000 	str.w	r1, [sl]
 800a6e0:	f1bb 0f00 	cmp.w	fp, #0
 800a6e4:	d050      	beq.n	800a788 <__hexnan+0x130>
 800a6e6:	454c      	cmp	r4, r9
 800a6e8:	d206      	bcs.n	800a6f8 <__hexnan+0xa0>
 800a6ea:	2d07      	cmp	r5, #7
 800a6ec:	dc04      	bgt.n	800a6f8 <__hexnan+0xa0>
 800a6ee:	462a      	mov	r2, r5
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7ff ff8a 	bl	800a60c <L_shift>
 800a6f8:	4544      	cmp	r4, r8
 800a6fa:	d934      	bls.n	800a766 <__hexnan+0x10e>
 800a6fc:	4623      	mov	r3, r4
 800a6fe:	f1a8 0204 	sub.w	r2, r8, #4
 800a702:	f853 1b04 	ldr.w	r1, [r3], #4
 800a706:	429f      	cmp	r7, r3
 800a708:	f842 1f04 	str.w	r1, [r2, #4]!
 800a70c:	d2f9      	bcs.n	800a702 <__hexnan+0xaa>
 800a70e:	1b3b      	subs	r3, r7, r4
 800a710:	f023 0303 	bic.w	r3, r3, #3
 800a714:	3304      	adds	r3, #4
 800a716:	3401      	adds	r4, #1
 800a718:	3e03      	subs	r6, #3
 800a71a:	42b4      	cmp	r4, r6
 800a71c:	bf88      	it	hi
 800a71e:	2304      	movhi	r3, #4
 800a720:	2200      	movs	r2, #0
 800a722:	4443      	add	r3, r8
 800a724:	f843 2b04 	str.w	r2, [r3], #4
 800a728:	429f      	cmp	r7, r3
 800a72a:	d2fb      	bcs.n	800a724 <__hexnan+0xcc>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	b91b      	cbnz	r3, 800a738 <__hexnan+0xe0>
 800a730:	4547      	cmp	r7, r8
 800a732:	d127      	bne.n	800a784 <__hexnan+0x12c>
 800a734:	2301      	movs	r3, #1
 800a736:	603b      	str	r3, [r7, #0]
 800a738:	2005      	movs	r0, #5
 800a73a:	e026      	b.n	800a78a <__hexnan+0x132>
 800a73c:	3501      	adds	r5, #1
 800a73e:	2d08      	cmp	r5, #8
 800a740:	f10b 0b01 	add.w	fp, fp, #1
 800a744:	dd06      	ble.n	800a754 <__hexnan+0xfc>
 800a746:	4544      	cmp	r4, r8
 800a748:	d9c3      	bls.n	800a6d2 <__hexnan+0x7a>
 800a74a:	2300      	movs	r3, #0
 800a74c:	2501      	movs	r5, #1
 800a74e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a752:	3c04      	subs	r4, #4
 800a754:	6822      	ldr	r2, [r4, #0]
 800a756:	f000 000f 	and.w	r0, r0, #15
 800a75a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a75e:	6022      	str	r2, [r4, #0]
 800a760:	e7b7      	b.n	800a6d2 <__hexnan+0x7a>
 800a762:	2508      	movs	r5, #8
 800a764:	e7b5      	b.n	800a6d2 <__hexnan+0x7a>
 800a766:	9b01      	ldr	r3, [sp, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0df      	beq.n	800a72c <__hexnan+0xd4>
 800a76c:	f04f 32ff 	mov.w	r2, #4294967295
 800a770:	f1c3 0320 	rsb	r3, r3, #32
 800a774:	fa22 f303 	lsr.w	r3, r2, r3
 800a778:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a77c:	401a      	ands	r2, r3
 800a77e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a782:	e7d3      	b.n	800a72c <__hexnan+0xd4>
 800a784:	3f04      	subs	r7, #4
 800a786:	e7d1      	b.n	800a72c <__hexnan+0xd4>
 800a788:	2004      	movs	r0, #4
 800a78a:	b007      	add	sp, #28
 800a78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a790 <__retarget_lock_init_recursive>:
 800a790:	4770      	bx	lr

0800a792 <__retarget_lock_acquire_recursive>:
 800a792:	4770      	bx	lr

0800a794 <__retarget_lock_release_recursive>:
 800a794:	4770      	bx	lr

0800a796 <__ascii_mbtowc>:
 800a796:	b082      	sub	sp, #8
 800a798:	b901      	cbnz	r1, 800a79c <__ascii_mbtowc+0x6>
 800a79a:	a901      	add	r1, sp, #4
 800a79c:	b142      	cbz	r2, 800a7b0 <__ascii_mbtowc+0x1a>
 800a79e:	b14b      	cbz	r3, 800a7b4 <__ascii_mbtowc+0x1e>
 800a7a0:	7813      	ldrb	r3, [r2, #0]
 800a7a2:	600b      	str	r3, [r1, #0]
 800a7a4:	7812      	ldrb	r2, [r2, #0]
 800a7a6:	1e10      	subs	r0, r2, #0
 800a7a8:	bf18      	it	ne
 800a7aa:	2001      	movne	r0, #1
 800a7ac:	b002      	add	sp, #8
 800a7ae:	4770      	bx	lr
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	e7fb      	b.n	800a7ac <__ascii_mbtowc+0x16>
 800a7b4:	f06f 0001 	mvn.w	r0, #1
 800a7b8:	e7f8      	b.n	800a7ac <__ascii_mbtowc+0x16>

0800a7ba <memcpy>:
 800a7ba:	440a      	add	r2, r1
 800a7bc:	4291      	cmp	r1, r2
 800a7be:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7c2:	d100      	bne.n	800a7c6 <memcpy+0xc>
 800a7c4:	4770      	bx	lr
 800a7c6:	b510      	push	{r4, lr}
 800a7c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7cc:	4291      	cmp	r1, r2
 800a7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7d2:	d1f9      	bne.n	800a7c8 <memcpy+0xe>
 800a7d4:	bd10      	pop	{r4, pc}
	...

0800a7d8 <__malloc_lock>:
 800a7d8:	4801      	ldr	r0, [pc, #4]	; (800a7e0 <__malloc_lock+0x8>)
 800a7da:	f7ff bfda 	b.w	800a792 <__retarget_lock_acquire_recursive>
 800a7de:	bf00      	nop
 800a7e0:	20001110 	.word	0x20001110

0800a7e4 <__malloc_unlock>:
 800a7e4:	4801      	ldr	r0, [pc, #4]	; (800a7ec <__malloc_unlock+0x8>)
 800a7e6:	f7ff bfd5 	b.w	800a794 <__retarget_lock_release_recursive>
 800a7ea:	bf00      	nop
 800a7ec:	20001110 	.word	0x20001110

0800a7f0 <_Balloc>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	b976      	cbnz	r6, 800a818 <_Balloc+0x28>
 800a7fa:	2010      	movs	r0, #16
 800a7fc:	f7fe fc40 	bl	8009080 <malloc>
 800a800:	4602      	mov	r2, r0
 800a802:	6260      	str	r0, [r4, #36]	; 0x24
 800a804:	b920      	cbnz	r0, 800a810 <_Balloc+0x20>
 800a806:	2166      	movs	r1, #102	; 0x66
 800a808:	4b17      	ldr	r3, [pc, #92]	; (800a868 <_Balloc+0x78>)
 800a80a:	4818      	ldr	r0, [pc, #96]	; (800a86c <_Balloc+0x7c>)
 800a80c:	f001 fa2a 	bl	800bc64 <__assert_func>
 800a810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a814:	6006      	str	r6, [r0, #0]
 800a816:	60c6      	str	r6, [r0, #12]
 800a818:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a81a:	68f3      	ldr	r3, [r6, #12]
 800a81c:	b183      	cbz	r3, 800a840 <_Balloc+0x50>
 800a81e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a826:	b9b8      	cbnz	r0, 800a858 <_Balloc+0x68>
 800a828:	2101      	movs	r1, #1
 800a82a:	fa01 f605 	lsl.w	r6, r1, r5
 800a82e:	1d72      	adds	r2, r6, #5
 800a830:	4620      	mov	r0, r4
 800a832:	0092      	lsls	r2, r2, #2
 800a834:	f000 fc94 	bl	800b160 <_calloc_r>
 800a838:	b160      	cbz	r0, 800a854 <_Balloc+0x64>
 800a83a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a83e:	e00e      	b.n	800a85e <_Balloc+0x6e>
 800a840:	2221      	movs	r2, #33	; 0x21
 800a842:	2104      	movs	r1, #4
 800a844:	4620      	mov	r0, r4
 800a846:	f000 fc8b 	bl	800b160 <_calloc_r>
 800a84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a84c:	60f0      	str	r0, [r6, #12]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e4      	bne.n	800a81e <_Balloc+0x2e>
 800a854:	2000      	movs	r0, #0
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	6802      	ldr	r2, [r0, #0]
 800a85a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a85e:	2300      	movs	r3, #0
 800a860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a864:	e7f7      	b.n	800a856 <_Balloc+0x66>
 800a866:	bf00      	nop
 800a868:	0800c380 	.word	0x0800c380
 800a86c:	0800c397 	.word	0x0800c397

0800a870 <_Bfree>:
 800a870:	b570      	push	{r4, r5, r6, lr}
 800a872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a874:	4605      	mov	r5, r0
 800a876:	460c      	mov	r4, r1
 800a878:	b976      	cbnz	r6, 800a898 <_Bfree+0x28>
 800a87a:	2010      	movs	r0, #16
 800a87c:	f7fe fc00 	bl	8009080 <malloc>
 800a880:	4602      	mov	r2, r0
 800a882:	6268      	str	r0, [r5, #36]	; 0x24
 800a884:	b920      	cbnz	r0, 800a890 <_Bfree+0x20>
 800a886:	218a      	movs	r1, #138	; 0x8a
 800a888:	4b08      	ldr	r3, [pc, #32]	; (800a8ac <_Bfree+0x3c>)
 800a88a:	4809      	ldr	r0, [pc, #36]	; (800a8b0 <_Bfree+0x40>)
 800a88c:	f001 f9ea 	bl	800bc64 <__assert_func>
 800a890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a894:	6006      	str	r6, [r0, #0]
 800a896:	60c6      	str	r6, [r0, #12]
 800a898:	b13c      	cbz	r4, 800a8aa <_Bfree+0x3a>
 800a89a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a89c:	6862      	ldr	r2, [r4, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8a4:	6021      	str	r1, [r4, #0]
 800a8a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	0800c380 	.word	0x0800c380
 800a8b0:	0800c397 	.word	0x0800c397

0800a8b4 <__multadd>:
 800a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b8:	4698      	mov	r8, r3
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	2300      	movs	r3, #0
 800a8be:	690e      	ldr	r6, [r1, #16]
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	f101 0014 	add.w	r0, r1, #20
 800a8c6:	6805      	ldr	r5, [r0, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	b2a9      	uxth	r1, r5
 800a8cc:	fb02 8101 	mla	r1, r2, r1, r8
 800a8d0:	0c2d      	lsrs	r5, r5, #16
 800a8d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a8d6:	fb02 c505 	mla	r5, r2, r5, ip
 800a8da:	b289      	uxth	r1, r1
 800a8dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a8e0:	429e      	cmp	r6, r3
 800a8e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a8e6:	f840 1b04 	str.w	r1, [r0], #4
 800a8ea:	dcec      	bgt.n	800a8c6 <__multadd+0x12>
 800a8ec:	f1b8 0f00 	cmp.w	r8, #0
 800a8f0:	d022      	beq.n	800a938 <__multadd+0x84>
 800a8f2:	68a3      	ldr	r3, [r4, #8]
 800a8f4:	42b3      	cmp	r3, r6
 800a8f6:	dc19      	bgt.n	800a92c <__multadd+0x78>
 800a8f8:	6861      	ldr	r1, [r4, #4]
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	3101      	adds	r1, #1
 800a8fe:	f7ff ff77 	bl	800a7f0 <_Balloc>
 800a902:	4605      	mov	r5, r0
 800a904:	b928      	cbnz	r0, 800a912 <__multadd+0x5e>
 800a906:	4602      	mov	r2, r0
 800a908:	21b5      	movs	r1, #181	; 0xb5
 800a90a:	4b0d      	ldr	r3, [pc, #52]	; (800a940 <__multadd+0x8c>)
 800a90c:	480d      	ldr	r0, [pc, #52]	; (800a944 <__multadd+0x90>)
 800a90e:	f001 f9a9 	bl	800bc64 <__assert_func>
 800a912:	6922      	ldr	r2, [r4, #16]
 800a914:	f104 010c 	add.w	r1, r4, #12
 800a918:	3202      	adds	r2, #2
 800a91a:	0092      	lsls	r2, r2, #2
 800a91c:	300c      	adds	r0, #12
 800a91e:	f7ff ff4c 	bl	800a7ba <memcpy>
 800a922:	4621      	mov	r1, r4
 800a924:	4638      	mov	r0, r7
 800a926:	f7ff ffa3 	bl	800a870 <_Bfree>
 800a92a:	462c      	mov	r4, r5
 800a92c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a930:	3601      	adds	r6, #1
 800a932:	f8c3 8014 	str.w	r8, [r3, #20]
 800a936:	6126      	str	r6, [r4, #16]
 800a938:	4620      	mov	r0, r4
 800a93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a93e:	bf00      	nop
 800a940:	0800c2f0 	.word	0x0800c2f0
 800a944:	0800c397 	.word	0x0800c397

0800a948 <__s2b>:
 800a948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a94c:	4615      	mov	r5, r2
 800a94e:	2209      	movs	r2, #9
 800a950:	461f      	mov	r7, r3
 800a952:	3308      	adds	r3, #8
 800a954:	460c      	mov	r4, r1
 800a956:	fb93 f3f2 	sdiv	r3, r3, r2
 800a95a:	4606      	mov	r6, r0
 800a95c:	2201      	movs	r2, #1
 800a95e:	2100      	movs	r1, #0
 800a960:	429a      	cmp	r2, r3
 800a962:	db09      	blt.n	800a978 <__s2b+0x30>
 800a964:	4630      	mov	r0, r6
 800a966:	f7ff ff43 	bl	800a7f0 <_Balloc>
 800a96a:	b940      	cbnz	r0, 800a97e <__s2b+0x36>
 800a96c:	4602      	mov	r2, r0
 800a96e:	21ce      	movs	r1, #206	; 0xce
 800a970:	4b18      	ldr	r3, [pc, #96]	; (800a9d4 <__s2b+0x8c>)
 800a972:	4819      	ldr	r0, [pc, #100]	; (800a9d8 <__s2b+0x90>)
 800a974:	f001 f976 	bl	800bc64 <__assert_func>
 800a978:	0052      	lsls	r2, r2, #1
 800a97a:	3101      	adds	r1, #1
 800a97c:	e7f0      	b.n	800a960 <__s2b+0x18>
 800a97e:	9b08      	ldr	r3, [sp, #32]
 800a980:	2d09      	cmp	r5, #9
 800a982:	6143      	str	r3, [r0, #20]
 800a984:	f04f 0301 	mov.w	r3, #1
 800a988:	6103      	str	r3, [r0, #16]
 800a98a:	dd16      	ble.n	800a9ba <__s2b+0x72>
 800a98c:	f104 0909 	add.w	r9, r4, #9
 800a990:	46c8      	mov	r8, r9
 800a992:	442c      	add	r4, r5
 800a994:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a998:	4601      	mov	r1, r0
 800a99a:	220a      	movs	r2, #10
 800a99c:	4630      	mov	r0, r6
 800a99e:	3b30      	subs	r3, #48	; 0x30
 800a9a0:	f7ff ff88 	bl	800a8b4 <__multadd>
 800a9a4:	45a0      	cmp	r8, r4
 800a9a6:	d1f5      	bne.n	800a994 <__s2b+0x4c>
 800a9a8:	f1a5 0408 	sub.w	r4, r5, #8
 800a9ac:	444c      	add	r4, r9
 800a9ae:	1b2d      	subs	r5, r5, r4
 800a9b0:	1963      	adds	r3, r4, r5
 800a9b2:	42bb      	cmp	r3, r7
 800a9b4:	db04      	blt.n	800a9c0 <__s2b+0x78>
 800a9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ba:	2509      	movs	r5, #9
 800a9bc:	340a      	adds	r4, #10
 800a9be:	e7f6      	b.n	800a9ae <__s2b+0x66>
 800a9c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9c4:	4601      	mov	r1, r0
 800a9c6:	220a      	movs	r2, #10
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	3b30      	subs	r3, #48	; 0x30
 800a9cc:	f7ff ff72 	bl	800a8b4 <__multadd>
 800a9d0:	e7ee      	b.n	800a9b0 <__s2b+0x68>
 800a9d2:	bf00      	nop
 800a9d4:	0800c2f0 	.word	0x0800c2f0
 800a9d8:	0800c397 	.word	0x0800c397

0800a9dc <__hi0bits>:
 800a9dc:	0c02      	lsrs	r2, r0, #16
 800a9de:	0412      	lsls	r2, r2, #16
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	b9ca      	cbnz	r2, 800aa18 <__hi0bits+0x3c>
 800a9e4:	0403      	lsls	r3, r0, #16
 800a9e6:	2010      	movs	r0, #16
 800a9e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a9ec:	bf04      	itt	eq
 800a9ee:	021b      	lsleq	r3, r3, #8
 800a9f0:	3008      	addeq	r0, #8
 800a9f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a9f6:	bf04      	itt	eq
 800a9f8:	011b      	lsleq	r3, r3, #4
 800a9fa:	3004      	addeq	r0, #4
 800a9fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aa00:	bf04      	itt	eq
 800aa02:	009b      	lsleq	r3, r3, #2
 800aa04:	3002      	addeq	r0, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	db05      	blt.n	800aa16 <__hi0bits+0x3a>
 800aa0a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aa0e:	f100 0001 	add.w	r0, r0, #1
 800aa12:	bf08      	it	eq
 800aa14:	2020      	moveq	r0, #32
 800aa16:	4770      	bx	lr
 800aa18:	2000      	movs	r0, #0
 800aa1a:	e7e5      	b.n	800a9e8 <__hi0bits+0xc>

0800aa1c <__lo0bits>:
 800aa1c:	6803      	ldr	r3, [r0, #0]
 800aa1e:	4602      	mov	r2, r0
 800aa20:	f013 0007 	ands.w	r0, r3, #7
 800aa24:	d00b      	beq.n	800aa3e <__lo0bits+0x22>
 800aa26:	07d9      	lsls	r1, r3, #31
 800aa28:	d422      	bmi.n	800aa70 <__lo0bits+0x54>
 800aa2a:	0798      	lsls	r0, r3, #30
 800aa2c:	bf49      	itett	mi
 800aa2e:	085b      	lsrmi	r3, r3, #1
 800aa30:	089b      	lsrpl	r3, r3, #2
 800aa32:	2001      	movmi	r0, #1
 800aa34:	6013      	strmi	r3, [r2, #0]
 800aa36:	bf5c      	itt	pl
 800aa38:	2002      	movpl	r0, #2
 800aa3a:	6013      	strpl	r3, [r2, #0]
 800aa3c:	4770      	bx	lr
 800aa3e:	b299      	uxth	r1, r3
 800aa40:	b909      	cbnz	r1, 800aa46 <__lo0bits+0x2a>
 800aa42:	2010      	movs	r0, #16
 800aa44:	0c1b      	lsrs	r3, r3, #16
 800aa46:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aa4a:	bf04      	itt	eq
 800aa4c:	0a1b      	lsreq	r3, r3, #8
 800aa4e:	3008      	addeq	r0, #8
 800aa50:	0719      	lsls	r1, r3, #28
 800aa52:	bf04      	itt	eq
 800aa54:	091b      	lsreq	r3, r3, #4
 800aa56:	3004      	addeq	r0, #4
 800aa58:	0799      	lsls	r1, r3, #30
 800aa5a:	bf04      	itt	eq
 800aa5c:	089b      	lsreq	r3, r3, #2
 800aa5e:	3002      	addeq	r0, #2
 800aa60:	07d9      	lsls	r1, r3, #31
 800aa62:	d403      	bmi.n	800aa6c <__lo0bits+0x50>
 800aa64:	085b      	lsrs	r3, r3, #1
 800aa66:	f100 0001 	add.w	r0, r0, #1
 800aa6a:	d003      	beq.n	800aa74 <__lo0bits+0x58>
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	4770      	bx	lr
 800aa70:	2000      	movs	r0, #0
 800aa72:	4770      	bx	lr
 800aa74:	2020      	movs	r0, #32
 800aa76:	4770      	bx	lr

0800aa78 <__i2b>:
 800aa78:	b510      	push	{r4, lr}
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	f7ff feb7 	bl	800a7f0 <_Balloc>
 800aa82:	4602      	mov	r2, r0
 800aa84:	b928      	cbnz	r0, 800aa92 <__i2b+0x1a>
 800aa86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa8a:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <__i2b+0x24>)
 800aa8c:	4804      	ldr	r0, [pc, #16]	; (800aaa0 <__i2b+0x28>)
 800aa8e:	f001 f8e9 	bl	800bc64 <__assert_func>
 800aa92:	2301      	movs	r3, #1
 800aa94:	6144      	str	r4, [r0, #20]
 800aa96:	6103      	str	r3, [r0, #16]
 800aa98:	bd10      	pop	{r4, pc}
 800aa9a:	bf00      	nop
 800aa9c:	0800c2f0 	.word	0x0800c2f0
 800aaa0:	0800c397 	.word	0x0800c397

0800aaa4 <__multiply>:
 800aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	690a      	ldr	r2, [r1, #16]
 800aaac:	6923      	ldr	r3, [r4, #16]
 800aaae:	460d      	mov	r5, r1
 800aab0:	429a      	cmp	r2, r3
 800aab2:	bfbe      	ittt	lt
 800aab4:	460b      	movlt	r3, r1
 800aab6:	4625      	movlt	r5, r4
 800aab8:	461c      	movlt	r4, r3
 800aaba:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800aabe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aac2:	68ab      	ldr	r3, [r5, #8]
 800aac4:	6869      	ldr	r1, [r5, #4]
 800aac6:	eb0a 0709 	add.w	r7, sl, r9
 800aaca:	42bb      	cmp	r3, r7
 800aacc:	b085      	sub	sp, #20
 800aace:	bfb8      	it	lt
 800aad0:	3101      	addlt	r1, #1
 800aad2:	f7ff fe8d 	bl	800a7f0 <_Balloc>
 800aad6:	b930      	cbnz	r0, 800aae6 <__multiply+0x42>
 800aad8:	4602      	mov	r2, r0
 800aada:	f240 115d 	movw	r1, #349	; 0x15d
 800aade:	4b41      	ldr	r3, [pc, #260]	; (800abe4 <__multiply+0x140>)
 800aae0:	4841      	ldr	r0, [pc, #260]	; (800abe8 <__multiply+0x144>)
 800aae2:	f001 f8bf 	bl	800bc64 <__assert_func>
 800aae6:	f100 0614 	add.w	r6, r0, #20
 800aaea:	4633      	mov	r3, r6
 800aaec:	2200      	movs	r2, #0
 800aaee:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aaf2:	4543      	cmp	r3, r8
 800aaf4:	d31e      	bcc.n	800ab34 <__multiply+0x90>
 800aaf6:	f105 0c14 	add.w	ip, r5, #20
 800aafa:	f104 0314 	add.w	r3, r4, #20
 800aafe:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ab02:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ab06:	9202      	str	r2, [sp, #8]
 800ab08:	ebac 0205 	sub.w	r2, ip, r5
 800ab0c:	3a15      	subs	r2, #21
 800ab0e:	f022 0203 	bic.w	r2, r2, #3
 800ab12:	3204      	adds	r2, #4
 800ab14:	f105 0115 	add.w	r1, r5, #21
 800ab18:	458c      	cmp	ip, r1
 800ab1a:	bf38      	it	cc
 800ab1c:	2204      	movcc	r2, #4
 800ab1e:	9201      	str	r2, [sp, #4]
 800ab20:	9a02      	ldr	r2, [sp, #8]
 800ab22:	9303      	str	r3, [sp, #12]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d808      	bhi.n	800ab3a <__multiply+0x96>
 800ab28:	2f00      	cmp	r7, #0
 800ab2a:	dc55      	bgt.n	800abd8 <__multiply+0x134>
 800ab2c:	6107      	str	r7, [r0, #16]
 800ab2e:	b005      	add	sp, #20
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab34:	f843 2b04 	str.w	r2, [r3], #4
 800ab38:	e7db      	b.n	800aaf2 <__multiply+0x4e>
 800ab3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab3e:	f1ba 0f00 	cmp.w	sl, #0
 800ab42:	d020      	beq.n	800ab86 <__multiply+0xe2>
 800ab44:	46b1      	mov	r9, r6
 800ab46:	2200      	movs	r2, #0
 800ab48:	f105 0e14 	add.w	lr, r5, #20
 800ab4c:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ab50:	f8d9 b000 	ldr.w	fp, [r9]
 800ab54:	b2a1      	uxth	r1, r4
 800ab56:	fa1f fb8b 	uxth.w	fp, fp
 800ab5a:	fb0a b101 	mla	r1, sl, r1, fp
 800ab5e:	4411      	add	r1, r2
 800ab60:	f8d9 2000 	ldr.w	r2, [r9]
 800ab64:	0c24      	lsrs	r4, r4, #16
 800ab66:	0c12      	lsrs	r2, r2, #16
 800ab68:	fb0a 2404 	mla	r4, sl, r4, r2
 800ab6c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ab70:	b289      	uxth	r1, r1
 800ab72:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ab76:	45f4      	cmp	ip, lr
 800ab78:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ab7c:	f849 1b04 	str.w	r1, [r9], #4
 800ab80:	d8e4      	bhi.n	800ab4c <__multiply+0xa8>
 800ab82:	9901      	ldr	r1, [sp, #4]
 800ab84:	5072      	str	r2, [r6, r1]
 800ab86:	9a03      	ldr	r2, [sp, #12]
 800ab88:	3304      	adds	r3, #4
 800ab8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab8e:	f1b9 0f00 	cmp.w	r9, #0
 800ab92:	d01f      	beq.n	800abd4 <__multiply+0x130>
 800ab94:	46b6      	mov	lr, r6
 800ab96:	f04f 0a00 	mov.w	sl, #0
 800ab9a:	6834      	ldr	r4, [r6, #0]
 800ab9c:	f105 0114 	add.w	r1, r5, #20
 800aba0:	880a      	ldrh	r2, [r1, #0]
 800aba2:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aba6:	b2a4      	uxth	r4, r4
 800aba8:	fb09 b202 	mla	r2, r9, r2, fp
 800abac:	4492      	add	sl, r2
 800abae:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800abb2:	f84e 4b04 	str.w	r4, [lr], #4
 800abb6:	f851 4b04 	ldr.w	r4, [r1], #4
 800abba:	f8be 2000 	ldrh.w	r2, [lr]
 800abbe:	0c24      	lsrs	r4, r4, #16
 800abc0:	fb09 2404 	mla	r4, r9, r4, r2
 800abc4:	458c      	cmp	ip, r1
 800abc6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800abca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800abce:	d8e7      	bhi.n	800aba0 <__multiply+0xfc>
 800abd0:	9a01      	ldr	r2, [sp, #4]
 800abd2:	50b4      	str	r4, [r6, r2]
 800abd4:	3604      	adds	r6, #4
 800abd6:	e7a3      	b.n	800ab20 <__multiply+0x7c>
 800abd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1a5      	bne.n	800ab2c <__multiply+0x88>
 800abe0:	3f01      	subs	r7, #1
 800abe2:	e7a1      	b.n	800ab28 <__multiply+0x84>
 800abe4:	0800c2f0 	.word	0x0800c2f0
 800abe8:	0800c397 	.word	0x0800c397

0800abec <__pow5mult>:
 800abec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf0:	4615      	mov	r5, r2
 800abf2:	f012 0203 	ands.w	r2, r2, #3
 800abf6:	4606      	mov	r6, r0
 800abf8:	460f      	mov	r7, r1
 800abfa:	d007      	beq.n	800ac0c <__pow5mult+0x20>
 800abfc:	4c25      	ldr	r4, [pc, #148]	; (800ac94 <__pow5mult+0xa8>)
 800abfe:	3a01      	subs	r2, #1
 800ac00:	2300      	movs	r3, #0
 800ac02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac06:	f7ff fe55 	bl	800a8b4 <__multadd>
 800ac0a:	4607      	mov	r7, r0
 800ac0c:	10ad      	asrs	r5, r5, #2
 800ac0e:	d03d      	beq.n	800ac8c <__pow5mult+0xa0>
 800ac10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac12:	b97c      	cbnz	r4, 800ac34 <__pow5mult+0x48>
 800ac14:	2010      	movs	r0, #16
 800ac16:	f7fe fa33 	bl	8009080 <malloc>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	6270      	str	r0, [r6, #36]	; 0x24
 800ac1e:	b928      	cbnz	r0, 800ac2c <__pow5mult+0x40>
 800ac20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac24:	4b1c      	ldr	r3, [pc, #112]	; (800ac98 <__pow5mult+0xac>)
 800ac26:	481d      	ldr	r0, [pc, #116]	; (800ac9c <__pow5mult+0xb0>)
 800ac28:	f001 f81c 	bl	800bc64 <__assert_func>
 800ac2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac30:	6004      	str	r4, [r0, #0]
 800ac32:	60c4      	str	r4, [r0, #12]
 800ac34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac3c:	b94c      	cbnz	r4, 800ac52 <__pow5mult+0x66>
 800ac3e:	f240 2171 	movw	r1, #625	; 0x271
 800ac42:	4630      	mov	r0, r6
 800ac44:	f7ff ff18 	bl	800aa78 <__i2b>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac50:	6003      	str	r3, [r0, #0]
 800ac52:	f04f 0900 	mov.w	r9, #0
 800ac56:	07eb      	lsls	r3, r5, #31
 800ac58:	d50a      	bpl.n	800ac70 <__pow5mult+0x84>
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	4622      	mov	r2, r4
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f7ff ff20 	bl	800aaa4 <__multiply>
 800ac64:	4680      	mov	r8, r0
 800ac66:	4639      	mov	r1, r7
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f7ff fe01 	bl	800a870 <_Bfree>
 800ac6e:	4647      	mov	r7, r8
 800ac70:	106d      	asrs	r5, r5, #1
 800ac72:	d00b      	beq.n	800ac8c <__pow5mult+0xa0>
 800ac74:	6820      	ldr	r0, [r4, #0]
 800ac76:	b938      	cbnz	r0, 800ac88 <__pow5mult+0x9c>
 800ac78:	4622      	mov	r2, r4
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff ff11 	bl	800aaa4 <__multiply>
 800ac82:	6020      	str	r0, [r4, #0]
 800ac84:	f8c0 9000 	str.w	r9, [r0]
 800ac88:	4604      	mov	r4, r0
 800ac8a:	e7e4      	b.n	800ac56 <__pow5mult+0x6a>
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac92:	bf00      	nop
 800ac94:	0800c4e8 	.word	0x0800c4e8
 800ac98:	0800c380 	.word	0x0800c380
 800ac9c:	0800c397 	.word	0x0800c397

0800aca0 <__lshift>:
 800aca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca4:	460c      	mov	r4, r1
 800aca6:	4607      	mov	r7, r0
 800aca8:	4691      	mov	r9, r2
 800acaa:	6923      	ldr	r3, [r4, #16]
 800acac:	6849      	ldr	r1, [r1, #4]
 800acae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acb8:	f108 0601 	add.w	r6, r8, #1
 800acbc:	42b3      	cmp	r3, r6
 800acbe:	db0b      	blt.n	800acd8 <__lshift+0x38>
 800acc0:	4638      	mov	r0, r7
 800acc2:	f7ff fd95 	bl	800a7f0 <_Balloc>
 800acc6:	4605      	mov	r5, r0
 800acc8:	b948      	cbnz	r0, 800acde <__lshift+0x3e>
 800acca:	4602      	mov	r2, r0
 800accc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800acd0:	4b27      	ldr	r3, [pc, #156]	; (800ad70 <__lshift+0xd0>)
 800acd2:	4828      	ldr	r0, [pc, #160]	; (800ad74 <__lshift+0xd4>)
 800acd4:	f000 ffc6 	bl	800bc64 <__assert_func>
 800acd8:	3101      	adds	r1, #1
 800acda:	005b      	lsls	r3, r3, #1
 800acdc:	e7ee      	b.n	800acbc <__lshift+0x1c>
 800acde:	2300      	movs	r3, #0
 800ace0:	f100 0114 	add.w	r1, r0, #20
 800ace4:	f100 0210 	add.w	r2, r0, #16
 800ace8:	4618      	mov	r0, r3
 800acea:	4553      	cmp	r3, sl
 800acec:	db33      	blt.n	800ad56 <__lshift+0xb6>
 800acee:	6920      	ldr	r0, [r4, #16]
 800acf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acf4:	f104 0314 	add.w	r3, r4, #20
 800acf8:	f019 091f 	ands.w	r9, r9, #31
 800acfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad04:	d02b      	beq.n	800ad5e <__lshift+0xbe>
 800ad06:	468a      	mov	sl, r1
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ad0e:	6818      	ldr	r0, [r3, #0]
 800ad10:	fa00 f009 	lsl.w	r0, r0, r9
 800ad14:	4302      	orrs	r2, r0
 800ad16:	f84a 2b04 	str.w	r2, [sl], #4
 800ad1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad1e:	459c      	cmp	ip, r3
 800ad20:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad24:	d8f3      	bhi.n	800ad0e <__lshift+0x6e>
 800ad26:	ebac 0304 	sub.w	r3, ip, r4
 800ad2a:	3b15      	subs	r3, #21
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	3304      	adds	r3, #4
 800ad32:	f104 0015 	add.w	r0, r4, #21
 800ad36:	4584      	cmp	ip, r0
 800ad38:	bf38      	it	cc
 800ad3a:	2304      	movcc	r3, #4
 800ad3c:	50ca      	str	r2, [r1, r3]
 800ad3e:	b10a      	cbz	r2, 800ad44 <__lshift+0xa4>
 800ad40:	f108 0602 	add.w	r6, r8, #2
 800ad44:	3e01      	subs	r6, #1
 800ad46:	4638      	mov	r0, r7
 800ad48:	4621      	mov	r1, r4
 800ad4a:	612e      	str	r6, [r5, #16]
 800ad4c:	f7ff fd90 	bl	800a870 <_Bfree>
 800ad50:	4628      	mov	r0, r5
 800ad52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad56:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	e7c5      	b.n	800acea <__lshift+0x4a>
 800ad5e:	3904      	subs	r1, #4
 800ad60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad64:	459c      	cmp	ip, r3
 800ad66:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad6a:	d8f9      	bhi.n	800ad60 <__lshift+0xc0>
 800ad6c:	e7ea      	b.n	800ad44 <__lshift+0xa4>
 800ad6e:	bf00      	nop
 800ad70:	0800c2f0 	.word	0x0800c2f0
 800ad74:	0800c397 	.word	0x0800c397

0800ad78 <__mcmp>:
 800ad78:	4603      	mov	r3, r0
 800ad7a:	690a      	ldr	r2, [r1, #16]
 800ad7c:	6900      	ldr	r0, [r0, #16]
 800ad7e:	b530      	push	{r4, r5, lr}
 800ad80:	1a80      	subs	r0, r0, r2
 800ad82:	d10d      	bne.n	800ada0 <__mcmp+0x28>
 800ad84:	3314      	adds	r3, #20
 800ad86:	3114      	adds	r1, #20
 800ad88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad98:	4295      	cmp	r5, r2
 800ad9a:	d002      	beq.n	800ada2 <__mcmp+0x2a>
 800ad9c:	d304      	bcc.n	800ada8 <__mcmp+0x30>
 800ad9e:	2001      	movs	r0, #1
 800ada0:	bd30      	pop	{r4, r5, pc}
 800ada2:	42a3      	cmp	r3, r4
 800ada4:	d3f4      	bcc.n	800ad90 <__mcmp+0x18>
 800ada6:	e7fb      	b.n	800ada0 <__mcmp+0x28>
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	e7f8      	b.n	800ada0 <__mcmp+0x28>
	...

0800adb0 <__mdiff>:
 800adb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	460c      	mov	r4, r1
 800adb6:	4606      	mov	r6, r0
 800adb8:	4611      	mov	r1, r2
 800adba:	4620      	mov	r0, r4
 800adbc:	4692      	mov	sl, r2
 800adbe:	f7ff ffdb 	bl	800ad78 <__mcmp>
 800adc2:	1e05      	subs	r5, r0, #0
 800adc4:	d111      	bne.n	800adea <__mdiff+0x3a>
 800adc6:	4629      	mov	r1, r5
 800adc8:	4630      	mov	r0, r6
 800adca:	f7ff fd11 	bl	800a7f0 <_Balloc>
 800adce:	4602      	mov	r2, r0
 800add0:	b928      	cbnz	r0, 800adde <__mdiff+0x2e>
 800add2:	f240 2132 	movw	r1, #562	; 0x232
 800add6:	4b3c      	ldr	r3, [pc, #240]	; (800aec8 <__mdiff+0x118>)
 800add8:	483c      	ldr	r0, [pc, #240]	; (800aecc <__mdiff+0x11c>)
 800adda:	f000 ff43 	bl	800bc64 <__assert_func>
 800adde:	2301      	movs	r3, #1
 800ade0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ade4:	4610      	mov	r0, r2
 800ade6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adea:	bfa4      	itt	ge
 800adec:	4653      	movge	r3, sl
 800adee:	46a2      	movge	sl, r4
 800adf0:	4630      	mov	r0, r6
 800adf2:	f8da 1004 	ldr.w	r1, [sl, #4]
 800adf6:	bfa6      	itte	ge
 800adf8:	461c      	movge	r4, r3
 800adfa:	2500      	movge	r5, #0
 800adfc:	2501      	movlt	r5, #1
 800adfe:	f7ff fcf7 	bl	800a7f0 <_Balloc>
 800ae02:	4602      	mov	r2, r0
 800ae04:	b918      	cbnz	r0, 800ae0e <__mdiff+0x5e>
 800ae06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae0a:	4b2f      	ldr	r3, [pc, #188]	; (800aec8 <__mdiff+0x118>)
 800ae0c:	e7e4      	b.n	800add8 <__mdiff+0x28>
 800ae0e:	f100 0814 	add.w	r8, r0, #20
 800ae12:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ae16:	60c5      	str	r5, [r0, #12]
 800ae18:	f04f 0c00 	mov.w	ip, #0
 800ae1c:	f10a 0514 	add.w	r5, sl, #20
 800ae20:	f10a 0010 	add.w	r0, sl, #16
 800ae24:	46c2      	mov	sl, r8
 800ae26:	6926      	ldr	r6, [r4, #16]
 800ae28:	f104 0914 	add.w	r9, r4, #20
 800ae2c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ae30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae34:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800ae38:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae3c:	fa1f f18b 	uxth.w	r1, fp
 800ae40:	4461      	add	r1, ip
 800ae42:	fa1f fc83 	uxth.w	ip, r3
 800ae46:	0c1b      	lsrs	r3, r3, #16
 800ae48:	eba1 010c 	sub.w	r1, r1, ip
 800ae4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae50:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ae54:	b289      	uxth	r1, r1
 800ae56:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ae5a:	454e      	cmp	r6, r9
 800ae5c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ae60:	f84a 3b04 	str.w	r3, [sl], #4
 800ae64:	d8e6      	bhi.n	800ae34 <__mdiff+0x84>
 800ae66:	1b33      	subs	r3, r6, r4
 800ae68:	3b15      	subs	r3, #21
 800ae6a:	f023 0303 	bic.w	r3, r3, #3
 800ae6e:	3415      	adds	r4, #21
 800ae70:	3304      	adds	r3, #4
 800ae72:	42a6      	cmp	r6, r4
 800ae74:	bf38      	it	cc
 800ae76:	2304      	movcc	r3, #4
 800ae78:	441d      	add	r5, r3
 800ae7a:	4443      	add	r3, r8
 800ae7c:	461e      	mov	r6, r3
 800ae7e:	462c      	mov	r4, r5
 800ae80:	4574      	cmp	r4, lr
 800ae82:	d30e      	bcc.n	800aea2 <__mdiff+0xf2>
 800ae84:	f10e 0103 	add.w	r1, lr, #3
 800ae88:	1b49      	subs	r1, r1, r5
 800ae8a:	f021 0103 	bic.w	r1, r1, #3
 800ae8e:	3d03      	subs	r5, #3
 800ae90:	45ae      	cmp	lr, r5
 800ae92:	bf38      	it	cc
 800ae94:	2100      	movcc	r1, #0
 800ae96:	4419      	add	r1, r3
 800ae98:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ae9c:	b18b      	cbz	r3, 800aec2 <__mdiff+0x112>
 800ae9e:	6117      	str	r7, [r2, #16]
 800aea0:	e7a0      	b.n	800ade4 <__mdiff+0x34>
 800aea2:	f854 8b04 	ldr.w	r8, [r4], #4
 800aea6:	fa1f f188 	uxth.w	r1, r8
 800aeaa:	4461      	add	r1, ip
 800aeac:	1408      	asrs	r0, r1, #16
 800aeae:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800aeb2:	b289      	uxth	r1, r1
 800aeb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aeb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aebc:	f846 1b04 	str.w	r1, [r6], #4
 800aec0:	e7de      	b.n	800ae80 <__mdiff+0xd0>
 800aec2:	3f01      	subs	r7, #1
 800aec4:	e7e8      	b.n	800ae98 <__mdiff+0xe8>
 800aec6:	bf00      	nop
 800aec8:	0800c2f0 	.word	0x0800c2f0
 800aecc:	0800c397 	.word	0x0800c397

0800aed0 <__ulp>:
 800aed0:	4b11      	ldr	r3, [pc, #68]	; (800af18 <__ulp+0x48>)
 800aed2:	400b      	ands	r3, r1
 800aed4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	dd02      	ble.n	800aee2 <__ulp+0x12>
 800aedc:	2000      	movs	r0, #0
 800aede:	4619      	mov	r1, r3
 800aee0:	4770      	bx	lr
 800aee2:	425b      	negs	r3, r3
 800aee4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aee8:	f04f 0000 	mov.w	r0, #0
 800aeec:	f04f 0100 	mov.w	r1, #0
 800aef0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aef4:	da04      	bge.n	800af00 <__ulp+0x30>
 800aef6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aefa:	fa43 f102 	asr.w	r1, r3, r2
 800aefe:	4770      	bx	lr
 800af00:	f1a2 0314 	sub.w	r3, r2, #20
 800af04:	2b1e      	cmp	r3, #30
 800af06:	bfd6      	itet	le
 800af08:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800af0c:	2301      	movgt	r3, #1
 800af0e:	fa22 f303 	lsrle.w	r3, r2, r3
 800af12:	4618      	mov	r0, r3
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	7ff00000 	.word	0x7ff00000

0800af1c <__b2d>:
 800af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af20:	6907      	ldr	r7, [r0, #16]
 800af22:	f100 0914 	add.w	r9, r0, #20
 800af26:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800af2a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800af2e:	f1a7 0804 	sub.w	r8, r7, #4
 800af32:	4630      	mov	r0, r6
 800af34:	f7ff fd52 	bl	800a9dc <__hi0bits>
 800af38:	f1c0 0320 	rsb	r3, r0, #32
 800af3c:	280a      	cmp	r0, #10
 800af3e:	600b      	str	r3, [r1, #0]
 800af40:	491f      	ldr	r1, [pc, #124]	; (800afc0 <__b2d+0xa4>)
 800af42:	dc17      	bgt.n	800af74 <__b2d+0x58>
 800af44:	45c1      	cmp	r9, r8
 800af46:	bf28      	it	cs
 800af48:	2200      	movcs	r2, #0
 800af4a:	f1c0 0c0b 	rsb	ip, r0, #11
 800af4e:	fa26 f30c 	lsr.w	r3, r6, ip
 800af52:	bf38      	it	cc
 800af54:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800af58:	ea43 0501 	orr.w	r5, r3, r1
 800af5c:	f100 0315 	add.w	r3, r0, #21
 800af60:	fa06 f303 	lsl.w	r3, r6, r3
 800af64:	fa22 f20c 	lsr.w	r2, r2, ip
 800af68:	ea43 0402 	orr.w	r4, r3, r2
 800af6c:	4620      	mov	r0, r4
 800af6e:	4629      	mov	r1, r5
 800af70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af74:	45c1      	cmp	r9, r8
 800af76:	bf2e      	itee	cs
 800af78:	2200      	movcs	r2, #0
 800af7a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800af7e:	f1a7 0808 	subcc.w	r8, r7, #8
 800af82:	f1b0 030b 	subs.w	r3, r0, #11
 800af86:	d016      	beq.n	800afb6 <__b2d+0x9a>
 800af88:	f1c3 0720 	rsb	r7, r3, #32
 800af8c:	fa22 f107 	lsr.w	r1, r2, r7
 800af90:	45c8      	cmp	r8, r9
 800af92:	fa06 f603 	lsl.w	r6, r6, r3
 800af96:	ea46 0601 	orr.w	r6, r6, r1
 800af9a:	bf94      	ite	ls
 800af9c:	2100      	movls	r1, #0
 800af9e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800afa2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800afa6:	fa02 f003 	lsl.w	r0, r2, r3
 800afaa:	40f9      	lsrs	r1, r7
 800afac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800afb0:	ea40 0401 	orr.w	r4, r0, r1
 800afb4:	e7da      	b.n	800af6c <__b2d+0x50>
 800afb6:	4614      	mov	r4, r2
 800afb8:	ea46 0501 	orr.w	r5, r6, r1
 800afbc:	e7d6      	b.n	800af6c <__b2d+0x50>
 800afbe:	bf00      	nop
 800afc0:	3ff00000 	.word	0x3ff00000

0800afc4 <__d2b>:
 800afc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800afc8:	2101      	movs	r1, #1
 800afca:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800afce:	4690      	mov	r8, r2
 800afd0:	461d      	mov	r5, r3
 800afd2:	f7ff fc0d 	bl	800a7f0 <_Balloc>
 800afd6:	4604      	mov	r4, r0
 800afd8:	b930      	cbnz	r0, 800afe8 <__d2b+0x24>
 800afda:	4602      	mov	r2, r0
 800afdc:	f240 310a 	movw	r1, #778	; 0x30a
 800afe0:	4b24      	ldr	r3, [pc, #144]	; (800b074 <__d2b+0xb0>)
 800afe2:	4825      	ldr	r0, [pc, #148]	; (800b078 <__d2b+0xb4>)
 800afe4:	f000 fe3e 	bl	800bc64 <__assert_func>
 800afe8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800afec:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aff0:	bb2d      	cbnz	r5, 800b03e <__d2b+0x7a>
 800aff2:	9301      	str	r3, [sp, #4]
 800aff4:	f1b8 0300 	subs.w	r3, r8, #0
 800aff8:	d026      	beq.n	800b048 <__d2b+0x84>
 800affa:	4668      	mov	r0, sp
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	f7ff fd0d 	bl	800aa1c <__lo0bits>
 800b002:	9900      	ldr	r1, [sp, #0]
 800b004:	b1f0      	cbz	r0, 800b044 <__d2b+0x80>
 800b006:	9a01      	ldr	r2, [sp, #4]
 800b008:	f1c0 0320 	rsb	r3, r0, #32
 800b00c:	fa02 f303 	lsl.w	r3, r2, r3
 800b010:	430b      	orrs	r3, r1
 800b012:	40c2      	lsrs	r2, r0
 800b014:	6163      	str	r3, [r4, #20]
 800b016:	9201      	str	r2, [sp, #4]
 800b018:	9b01      	ldr	r3, [sp, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	bf14      	ite	ne
 800b01e:	2102      	movne	r1, #2
 800b020:	2101      	moveq	r1, #1
 800b022:	61a3      	str	r3, [r4, #24]
 800b024:	6121      	str	r1, [r4, #16]
 800b026:	b1c5      	cbz	r5, 800b05a <__d2b+0x96>
 800b028:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b02c:	4405      	add	r5, r0
 800b02e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b032:	603d      	str	r5, [r7, #0]
 800b034:	6030      	str	r0, [r6, #0]
 800b036:	4620      	mov	r0, r4
 800b038:	b002      	add	sp, #8
 800b03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b03e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b042:	e7d6      	b.n	800aff2 <__d2b+0x2e>
 800b044:	6161      	str	r1, [r4, #20]
 800b046:	e7e7      	b.n	800b018 <__d2b+0x54>
 800b048:	a801      	add	r0, sp, #4
 800b04a:	f7ff fce7 	bl	800aa1c <__lo0bits>
 800b04e:	2101      	movs	r1, #1
 800b050:	9b01      	ldr	r3, [sp, #4]
 800b052:	6121      	str	r1, [r4, #16]
 800b054:	6163      	str	r3, [r4, #20]
 800b056:	3020      	adds	r0, #32
 800b058:	e7e5      	b.n	800b026 <__d2b+0x62>
 800b05a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b05e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b062:	6038      	str	r0, [r7, #0]
 800b064:	6918      	ldr	r0, [r3, #16]
 800b066:	f7ff fcb9 	bl	800a9dc <__hi0bits>
 800b06a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b06e:	6031      	str	r1, [r6, #0]
 800b070:	e7e1      	b.n	800b036 <__d2b+0x72>
 800b072:	bf00      	nop
 800b074:	0800c2f0 	.word	0x0800c2f0
 800b078:	0800c397 	.word	0x0800c397

0800b07c <__ratio>:
 800b07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b080:	4688      	mov	r8, r1
 800b082:	4669      	mov	r1, sp
 800b084:	4681      	mov	r9, r0
 800b086:	f7ff ff49 	bl	800af1c <__b2d>
 800b08a:	460f      	mov	r7, r1
 800b08c:	4604      	mov	r4, r0
 800b08e:	460d      	mov	r5, r1
 800b090:	4640      	mov	r0, r8
 800b092:	a901      	add	r1, sp, #4
 800b094:	f7ff ff42 	bl	800af1c <__b2d>
 800b098:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b09c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b0a0:	468b      	mov	fp, r1
 800b0a2:	eba3 0c02 	sub.w	ip, r3, r2
 800b0a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b0aa:	1a9b      	subs	r3, r3, r2
 800b0ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	bfd5      	itete	le
 800b0b4:	460a      	movle	r2, r1
 800b0b6:	462a      	movgt	r2, r5
 800b0b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b0bc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0c0:	bfd8      	it	le
 800b0c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b0c6:	465b      	mov	r3, fp
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f7f5 fb2d 	bl	800072c <__aeabi_ddiv>
 800b0d2:	b003      	add	sp, #12
 800b0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0d8 <__copybits>:
 800b0d8:	3901      	subs	r1, #1
 800b0da:	b570      	push	{r4, r5, r6, lr}
 800b0dc:	1149      	asrs	r1, r1, #5
 800b0de:	6914      	ldr	r4, [r2, #16]
 800b0e0:	3101      	adds	r1, #1
 800b0e2:	f102 0314 	add.w	r3, r2, #20
 800b0e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0ee:	1f05      	subs	r5, r0, #4
 800b0f0:	42a3      	cmp	r3, r4
 800b0f2:	d30c      	bcc.n	800b10e <__copybits+0x36>
 800b0f4:	1aa3      	subs	r3, r4, r2
 800b0f6:	3b11      	subs	r3, #17
 800b0f8:	f023 0303 	bic.w	r3, r3, #3
 800b0fc:	3211      	adds	r2, #17
 800b0fe:	42a2      	cmp	r2, r4
 800b100:	bf88      	it	hi
 800b102:	2300      	movhi	r3, #0
 800b104:	4418      	add	r0, r3
 800b106:	2300      	movs	r3, #0
 800b108:	4288      	cmp	r0, r1
 800b10a:	d305      	bcc.n	800b118 <__copybits+0x40>
 800b10c:	bd70      	pop	{r4, r5, r6, pc}
 800b10e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b112:	f845 6f04 	str.w	r6, [r5, #4]!
 800b116:	e7eb      	b.n	800b0f0 <__copybits+0x18>
 800b118:	f840 3b04 	str.w	r3, [r0], #4
 800b11c:	e7f4      	b.n	800b108 <__copybits+0x30>

0800b11e <__any_on>:
 800b11e:	f100 0214 	add.w	r2, r0, #20
 800b122:	6900      	ldr	r0, [r0, #16]
 800b124:	114b      	asrs	r3, r1, #5
 800b126:	4298      	cmp	r0, r3
 800b128:	b510      	push	{r4, lr}
 800b12a:	db11      	blt.n	800b150 <__any_on+0x32>
 800b12c:	dd0a      	ble.n	800b144 <__any_on+0x26>
 800b12e:	f011 011f 	ands.w	r1, r1, #31
 800b132:	d007      	beq.n	800b144 <__any_on+0x26>
 800b134:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b138:	fa24 f001 	lsr.w	r0, r4, r1
 800b13c:	fa00 f101 	lsl.w	r1, r0, r1
 800b140:	428c      	cmp	r4, r1
 800b142:	d10b      	bne.n	800b15c <__any_on+0x3e>
 800b144:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b148:	4293      	cmp	r3, r2
 800b14a:	d803      	bhi.n	800b154 <__any_on+0x36>
 800b14c:	2000      	movs	r0, #0
 800b14e:	bd10      	pop	{r4, pc}
 800b150:	4603      	mov	r3, r0
 800b152:	e7f7      	b.n	800b144 <__any_on+0x26>
 800b154:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b158:	2900      	cmp	r1, #0
 800b15a:	d0f5      	beq.n	800b148 <__any_on+0x2a>
 800b15c:	2001      	movs	r0, #1
 800b15e:	e7f6      	b.n	800b14e <__any_on+0x30>

0800b160 <_calloc_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	fb02 f501 	mul.w	r5, r2, r1
 800b166:	4629      	mov	r1, r5
 800b168:	f7fd ffe6 	bl	8009138 <_malloc_r>
 800b16c:	4604      	mov	r4, r0
 800b16e:	b118      	cbz	r0, 800b178 <_calloc_r+0x18>
 800b170:	462a      	mov	r2, r5
 800b172:	2100      	movs	r1, #0
 800b174:	f7fd ff8c 	bl	8009090 <memset>
 800b178:	4620      	mov	r0, r4
 800b17a:	bd38      	pop	{r3, r4, r5, pc}

0800b17c <__ssputs_r>:
 800b17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b180:	688e      	ldr	r6, [r1, #8]
 800b182:	4682      	mov	sl, r0
 800b184:	429e      	cmp	r6, r3
 800b186:	460c      	mov	r4, r1
 800b188:	4690      	mov	r8, r2
 800b18a:	461f      	mov	r7, r3
 800b18c:	d838      	bhi.n	800b200 <__ssputs_r+0x84>
 800b18e:	898a      	ldrh	r2, [r1, #12]
 800b190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b194:	d032      	beq.n	800b1fc <__ssputs_r+0x80>
 800b196:	6825      	ldr	r5, [r4, #0]
 800b198:	6909      	ldr	r1, [r1, #16]
 800b19a:	3301      	adds	r3, #1
 800b19c:	eba5 0901 	sub.w	r9, r5, r1
 800b1a0:	6965      	ldr	r5, [r4, #20]
 800b1a2:	444b      	add	r3, r9
 800b1a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1ac:	106d      	asrs	r5, r5, #1
 800b1ae:	429d      	cmp	r5, r3
 800b1b0:	bf38      	it	cc
 800b1b2:	461d      	movcc	r5, r3
 800b1b4:	0553      	lsls	r3, r2, #21
 800b1b6:	d531      	bpl.n	800b21c <__ssputs_r+0xa0>
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	f7fd ffbd 	bl	8009138 <_malloc_r>
 800b1be:	4606      	mov	r6, r0
 800b1c0:	b950      	cbnz	r0, 800b1d8 <__ssputs_r+0x5c>
 800b1c2:	230c      	movs	r3, #12
 800b1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c8:	f8ca 3000 	str.w	r3, [sl]
 800b1cc:	89a3      	ldrh	r3, [r4, #12]
 800b1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d8:	464a      	mov	r2, r9
 800b1da:	6921      	ldr	r1, [r4, #16]
 800b1dc:	f7ff faed 	bl	800a7ba <memcpy>
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ea:	81a3      	strh	r3, [r4, #12]
 800b1ec:	6126      	str	r6, [r4, #16]
 800b1ee:	444e      	add	r6, r9
 800b1f0:	6026      	str	r6, [r4, #0]
 800b1f2:	463e      	mov	r6, r7
 800b1f4:	6165      	str	r5, [r4, #20]
 800b1f6:	eba5 0509 	sub.w	r5, r5, r9
 800b1fa:	60a5      	str	r5, [r4, #8]
 800b1fc:	42be      	cmp	r6, r7
 800b1fe:	d900      	bls.n	800b202 <__ssputs_r+0x86>
 800b200:	463e      	mov	r6, r7
 800b202:	4632      	mov	r2, r6
 800b204:	4641      	mov	r1, r8
 800b206:	6820      	ldr	r0, [r4, #0]
 800b208:	f000 feb2 	bl	800bf70 <memmove>
 800b20c:	68a3      	ldr	r3, [r4, #8]
 800b20e:	6822      	ldr	r2, [r4, #0]
 800b210:	1b9b      	subs	r3, r3, r6
 800b212:	4432      	add	r2, r6
 800b214:	2000      	movs	r0, #0
 800b216:	60a3      	str	r3, [r4, #8]
 800b218:	6022      	str	r2, [r4, #0]
 800b21a:	e7db      	b.n	800b1d4 <__ssputs_r+0x58>
 800b21c:	462a      	mov	r2, r5
 800b21e:	f000 fec1 	bl	800bfa4 <_realloc_r>
 800b222:	4606      	mov	r6, r0
 800b224:	2800      	cmp	r0, #0
 800b226:	d1e1      	bne.n	800b1ec <__ssputs_r+0x70>
 800b228:	4650      	mov	r0, sl
 800b22a:	6921      	ldr	r1, [r4, #16]
 800b22c:	f7fd ff38 	bl	80090a0 <_free_r>
 800b230:	e7c7      	b.n	800b1c2 <__ssputs_r+0x46>
	...

0800b234 <_svfiprintf_r>:
 800b234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b238:	4698      	mov	r8, r3
 800b23a:	898b      	ldrh	r3, [r1, #12]
 800b23c:	4607      	mov	r7, r0
 800b23e:	061b      	lsls	r3, r3, #24
 800b240:	460d      	mov	r5, r1
 800b242:	4614      	mov	r4, r2
 800b244:	b09d      	sub	sp, #116	; 0x74
 800b246:	d50e      	bpl.n	800b266 <_svfiprintf_r+0x32>
 800b248:	690b      	ldr	r3, [r1, #16]
 800b24a:	b963      	cbnz	r3, 800b266 <_svfiprintf_r+0x32>
 800b24c:	2140      	movs	r1, #64	; 0x40
 800b24e:	f7fd ff73 	bl	8009138 <_malloc_r>
 800b252:	6028      	str	r0, [r5, #0]
 800b254:	6128      	str	r0, [r5, #16]
 800b256:	b920      	cbnz	r0, 800b262 <_svfiprintf_r+0x2e>
 800b258:	230c      	movs	r3, #12
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	e0d1      	b.n	800b406 <_svfiprintf_r+0x1d2>
 800b262:	2340      	movs	r3, #64	; 0x40
 800b264:	616b      	str	r3, [r5, #20]
 800b266:	2300      	movs	r3, #0
 800b268:	9309      	str	r3, [sp, #36]	; 0x24
 800b26a:	2320      	movs	r3, #32
 800b26c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b270:	2330      	movs	r3, #48	; 0x30
 800b272:	f04f 0901 	mov.w	r9, #1
 800b276:	f8cd 800c 	str.w	r8, [sp, #12]
 800b27a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b420 <_svfiprintf_r+0x1ec>
 800b27e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b282:	4623      	mov	r3, r4
 800b284:	469a      	mov	sl, r3
 800b286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b28a:	b10a      	cbz	r2, 800b290 <_svfiprintf_r+0x5c>
 800b28c:	2a25      	cmp	r2, #37	; 0x25
 800b28e:	d1f9      	bne.n	800b284 <_svfiprintf_r+0x50>
 800b290:	ebba 0b04 	subs.w	fp, sl, r4
 800b294:	d00b      	beq.n	800b2ae <_svfiprintf_r+0x7a>
 800b296:	465b      	mov	r3, fp
 800b298:	4622      	mov	r2, r4
 800b29a:	4629      	mov	r1, r5
 800b29c:	4638      	mov	r0, r7
 800b29e:	f7ff ff6d 	bl	800b17c <__ssputs_r>
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f000 80aa 	beq.w	800b3fc <_svfiprintf_r+0x1c8>
 800b2a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2aa:	445a      	add	r2, fp
 800b2ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f000 80a2 	beq.w	800b3fc <_svfiprintf_r+0x1c8>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b2be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2c2:	f10a 0a01 	add.w	sl, sl, #1
 800b2c6:	9304      	str	r3, [sp, #16]
 800b2c8:	9307      	str	r3, [sp, #28]
 800b2ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b2d0:	4654      	mov	r4, sl
 800b2d2:	2205      	movs	r2, #5
 800b2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d8:	4851      	ldr	r0, [pc, #324]	; (800b420 <_svfiprintf_r+0x1ec>)
 800b2da:	f000 fe3b 	bl	800bf54 <memchr>
 800b2de:	9a04      	ldr	r2, [sp, #16]
 800b2e0:	b9d8      	cbnz	r0, 800b31a <_svfiprintf_r+0xe6>
 800b2e2:	06d0      	lsls	r0, r2, #27
 800b2e4:	bf44      	itt	mi
 800b2e6:	2320      	movmi	r3, #32
 800b2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ec:	0711      	lsls	r1, r2, #28
 800b2ee:	bf44      	itt	mi
 800b2f0:	232b      	movmi	r3, #43	; 0x2b
 800b2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b2fc:	d015      	beq.n	800b32a <_svfiprintf_r+0xf6>
 800b2fe:	4654      	mov	r4, sl
 800b300:	2000      	movs	r0, #0
 800b302:	f04f 0c0a 	mov.w	ip, #10
 800b306:	9a07      	ldr	r2, [sp, #28]
 800b308:	4621      	mov	r1, r4
 800b30a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b30e:	3b30      	subs	r3, #48	; 0x30
 800b310:	2b09      	cmp	r3, #9
 800b312:	d94e      	bls.n	800b3b2 <_svfiprintf_r+0x17e>
 800b314:	b1b0      	cbz	r0, 800b344 <_svfiprintf_r+0x110>
 800b316:	9207      	str	r2, [sp, #28]
 800b318:	e014      	b.n	800b344 <_svfiprintf_r+0x110>
 800b31a:	eba0 0308 	sub.w	r3, r0, r8
 800b31e:	fa09 f303 	lsl.w	r3, r9, r3
 800b322:	4313      	orrs	r3, r2
 800b324:	46a2      	mov	sl, r4
 800b326:	9304      	str	r3, [sp, #16]
 800b328:	e7d2      	b.n	800b2d0 <_svfiprintf_r+0x9c>
 800b32a:	9b03      	ldr	r3, [sp, #12]
 800b32c:	1d19      	adds	r1, r3, #4
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	9103      	str	r1, [sp, #12]
 800b332:	2b00      	cmp	r3, #0
 800b334:	bfbb      	ittet	lt
 800b336:	425b      	neglt	r3, r3
 800b338:	f042 0202 	orrlt.w	r2, r2, #2
 800b33c:	9307      	strge	r3, [sp, #28]
 800b33e:	9307      	strlt	r3, [sp, #28]
 800b340:	bfb8      	it	lt
 800b342:	9204      	strlt	r2, [sp, #16]
 800b344:	7823      	ldrb	r3, [r4, #0]
 800b346:	2b2e      	cmp	r3, #46	; 0x2e
 800b348:	d10c      	bne.n	800b364 <_svfiprintf_r+0x130>
 800b34a:	7863      	ldrb	r3, [r4, #1]
 800b34c:	2b2a      	cmp	r3, #42	; 0x2a
 800b34e:	d135      	bne.n	800b3bc <_svfiprintf_r+0x188>
 800b350:	9b03      	ldr	r3, [sp, #12]
 800b352:	3402      	adds	r4, #2
 800b354:	1d1a      	adds	r2, r3, #4
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	9203      	str	r2, [sp, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bfb8      	it	lt
 800b35e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b362:	9305      	str	r3, [sp, #20]
 800b364:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b430 <_svfiprintf_r+0x1fc>
 800b368:	2203      	movs	r2, #3
 800b36a:	4650      	mov	r0, sl
 800b36c:	7821      	ldrb	r1, [r4, #0]
 800b36e:	f000 fdf1 	bl	800bf54 <memchr>
 800b372:	b140      	cbz	r0, 800b386 <_svfiprintf_r+0x152>
 800b374:	2340      	movs	r3, #64	; 0x40
 800b376:	eba0 000a 	sub.w	r0, r0, sl
 800b37a:	fa03 f000 	lsl.w	r0, r3, r0
 800b37e:	9b04      	ldr	r3, [sp, #16]
 800b380:	3401      	adds	r4, #1
 800b382:	4303      	orrs	r3, r0
 800b384:	9304      	str	r3, [sp, #16]
 800b386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b38a:	2206      	movs	r2, #6
 800b38c:	4825      	ldr	r0, [pc, #148]	; (800b424 <_svfiprintf_r+0x1f0>)
 800b38e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b392:	f000 fddf 	bl	800bf54 <memchr>
 800b396:	2800      	cmp	r0, #0
 800b398:	d038      	beq.n	800b40c <_svfiprintf_r+0x1d8>
 800b39a:	4b23      	ldr	r3, [pc, #140]	; (800b428 <_svfiprintf_r+0x1f4>)
 800b39c:	bb1b      	cbnz	r3, 800b3e6 <_svfiprintf_r+0x1b2>
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	3307      	adds	r3, #7
 800b3a2:	f023 0307 	bic.w	r3, r3, #7
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	9303      	str	r3, [sp, #12]
 800b3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ac:	4433      	add	r3, r6
 800b3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b0:	e767      	b.n	800b282 <_svfiprintf_r+0x4e>
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	2001      	movs	r0, #1
 800b3b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3ba:	e7a5      	b.n	800b308 <_svfiprintf_r+0xd4>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f04f 0c0a 	mov.w	ip, #10
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	3401      	adds	r4, #1
 800b3c6:	9305      	str	r3, [sp, #20]
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ce:	3a30      	subs	r2, #48	; 0x30
 800b3d0:	2a09      	cmp	r2, #9
 800b3d2:	d903      	bls.n	800b3dc <_svfiprintf_r+0x1a8>
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d0c5      	beq.n	800b364 <_svfiprintf_r+0x130>
 800b3d8:	9105      	str	r1, [sp, #20]
 800b3da:	e7c3      	b.n	800b364 <_svfiprintf_r+0x130>
 800b3dc:	4604      	mov	r4, r0
 800b3de:	2301      	movs	r3, #1
 800b3e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3e4:	e7f0      	b.n	800b3c8 <_svfiprintf_r+0x194>
 800b3e6:	ab03      	add	r3, sp, #12
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <_svfiprintf_r+0x1f8>)
 800b3f0:	a904      	add	r1, sp, #16
 800b3f2:	f3af 8000 	nop.w
 800b3f6:	1c42      	adds	r2, r0, #1
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	d1d6      	bne.n	800b3aa <_svfiprintf_r+0x176>
 800b3fc:	89ab      	ldrh	r3, [r5, #12]
 800b3fe:	065b      	lsls	r3, r3, #25
 800b400:	f53f af2c 	bmi.w	800b25c <_svfiprintf_r+0x28>
 800b404:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b406:	b01d      	add	sp, #116	; 0x74
 800b408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40c:	ab03      	add	r3, sp, #12
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	462a      	mov	r2, r5
 800b412:	4638      	mov	r0, r7
 800b414:	4b05      	ldr	r3, [pc, #20]	; (800b42c <_svfiprintf_r+0x1f8>)
 800b416:	a904      	add	r1, sp, #16
 800b418:	f000 f9d4 	bl	800b7c4 <_printf_i>
 800b41c:	e7eb      	b.n	800b3f6 <_svfiprintf_r+0x1c2>
 800b41e:	bf00      	nop
 800b420:	0800c4f4 	.word	0x0800c4f4
 800b424:	0800c4fe 	.word	0x0800c4fe
 800b428:	00000000 	.word	0x00000000
 800b42c:	0800b17d 	.word	0x0800b17d
 800b430:	0800c4fa 	.word	0x0800c4fa

0800b434 <__sfputc_r>:
 800b434:	6893      	ldr	r3, [r2, #8]
 800b436:	b410      	push	{r4}
 800b438:	3b01      	subs	r3, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	6093      	str	r3, [r2, #8]
 800b43e:	da07      	bge.n	800b450 <__sfputc_r+0x1c>
 800b440:	6994      	ldr	r4, [r2, #24]
 800b442:	42a3      	cmp	r3, r4
 800b444:	db01      	blt.n	800b44a <__sfputc_r+0x16>
 800b446:	290a      	cmp	r1, #10
 800b448:	d102      	bne.n	800b450 <__sfputc_r+0x1c>
 800b44a:	bc10      	pop	{r4}
 800b44c:	f000 bb2a 	b.w	800baa4 <__swbuf_r>
 800b450:	6813      	ldr	r3, [r2, #0]
 800b452:	1c58      	adds	r0, r3, #1
 800b454:	6010      	str	r0, [r2, #0]
 800b456:	7019      	strb	r1, [r3, #0]
 800b458:	4608      	mov	r0, r1
 800b45a:	bc10      	pop	{r4}
 800b45c:	4770      	bx	lr

0800b45e <__sfputs_r>:
 800b45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b460:	4606      	mov	r6, r0
 800b462:	460f      	mov	r7, r1
 800b464:	4614      	mov	r4, r2
 800b466:	18d5      	adds	r5, r2, r3
 800b468:	42ac      	cmp	r4, r5
 800b46a:	d101      	bne.n	800b470 <__sfputs_r+0x12>
 800b46c:	2000      	movs	r0, #0
 800b46e:	e007      	b.n	800b480 <__sfputs_r+0x22>
 800b470:	463a      	mov	r2, r7
 800b472:	4630      	mov	r0, r6
 800b474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b478:	f7ff ffdc 	bl	800b434 <__sfputc_r>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d1f3      	bne.n	800b468 <__sfputs_r+0xa>
 800b480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b484 <_vfiprintf_r>:
 800b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b488:	460d      	mov	r5, r1
 800b48a:	4614      	mov	r4, r2
 800b48c:	4698      	mov	r8, r3
 800b48e:	4606      	mov	r6, r0
 800b490:	b09d      	sub	sp, #116	; 0x74
 800b492:	b118      	cbz	r0, 800b49c <_vfiprintf_r+0x18>
 800b494:	6983      	ldr	r3, [r0, #24]
 800b496:	b90b      	cbnz	r3, 800b49c <_vfiprintf_r+0x18>
 800b498:	f7fe fd76 	bl	8009f88 <__sinit>
 800b49c:	4b89      	ldr	r3, [pc, #548]	; (800b6c4 <_vfiprintf_r+0x240>)
 800b49e:	429d      	cmp	r5, r3
 800b4a0:	d11b      	bne.n	800b4da <_vfiprintf_r+0x56>
 800b4a2:	6875      	ldr	r5, [r6, #4]
 800b4a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4a6:	07d9      	lsls	r1, r3, #31
 800b4a8:	d405      	bmi.n	800b4b6 <_vfiprintf_r+0x32>
 800b4aa:	89ab      	ldrh	r3, [r5, #12]
 800b4ac:	059a      	lsls	r2, r3, #22
 800b4ae:	d402      	bmi.n	800b4b6 <_vfiprintf_r+0x32>
 800b4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4b2:	f7ff f96e 	bl	800a792 <__retarget_lock_acquire_recursive>
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	071b      	lsls	r3, r3, #28
 800b4ba:	d501      	bpl.n	800b4c0 <_vfiprintf_r+0x3c>
 800b4bc:	692b      	ldr	r3, [r5, #16]
 800b4be:	b9eb      	cbnz	r3, 800b4fc <_vfiprintf_r+0x78>
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f000 fb60 	bl	800bb88 <__swsetup_r>
 800b4c8:	b1c0      	cbz	r0, 800b4fc <_vfiprintf_r+0x78>
 800b4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4cc:	07dc      	lsls	r4, r3, #31
 800b4ce:	d50e      	bpl.n	800b4ee <_vfiprintf_r+0x6a>
 800b4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d4:	b01d      	add	sp, #116	; 0x74
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	4b7b      	ldr	r3, [pc, #492]	; (800b6c8 <_vfiprintf_r+0x244>)
 800b4dc:	429d      	cmp	r5, r3
 800b4de:	d101      	bne.n	800b4e4 <_vfiprintf_r+0x60>
 800b4e0:	68b5      	ldr	r5, [r6, #8]
 800b4e2:	e7df      	b.n	800b4a4 <_vfiprintf_r+0x20>
 800b4e4:	4b79      	ldr	r3, [pc, #484]	; (800b6cc <_vfiprintf_r+0x248>)
 800b4e6:	429d      	cmp	r5, r3
 800b4e8:	bf08      	it	eq
 800b4ea:	68f5      	ldreq	r5, [r6, #12]
 800b4ec:	e7da      	b.n	800b4a4 <_vfiprintf_r+0x20>
 800b4ee:	89ab      	ldrh	r3, [r5, #12]
 800b4f0:	0598      	lsls	r0, r3, #22
 800b4f2:	d4ed      	bmi.n	800b4d0 <_vfiprintf_r+0x4c>
 800b4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4f6:	f7ff f94d 	bl	800a794 <__retarget_lock_release_recursive>
 800b4fa:	e7e9      	b.n	800b4d0 <_vfiprintf_r+0x4c>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b500:	2320      	movs	r3, #32
 800b502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b506:	2330      	movs	r3, #48	; 0x30
 800b508:	f04f 0901 	mov.w	r9, #1
 800b50c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b510:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b6d0 <_vfiprintf_r+0x24c>
 800b514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b518:	4623      	mov	r3, r4
 800b51a:	469a      	mov	sl, r3
 800b51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b520:	b10a      	cbz	r2, 800b526 <_vfiprintf_r+0xa2>
 800b522:	2a25      	cmp	r2, #37	; 0x25
 800b524:	d1f9      	bne.n	800b51a <_vfiprintf_r+0x96>
 800b526:	ebba 0b04 	subs.w	fp, sl, r4
 800b52a:	d00b      	beq.n	800b544 <_vfiprintf_r+0xc0>
 800b52c:	465b      	mov	r3, fp
 800b52e:	4622      	mov	r2, r4
 800b530:	4629      	mov	r1, r5
 800b532:	4630      	mov	r0, r6
 800b534:	f7ff ff93 	bl	800b45e <__sfputs_r>
 800b538:	3001      	adds	r0, #1
 800b53a:	f000 80aa 	beq.w	800b692 <_vfiprintf_r+0x20e>
 800b53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b540:	445a      	add	r2, fp
 800b542:	9209      	str	r2, [sp, #36]	; 0x24
 800b544:	f89a 3000 	ldrb.w	r3, [sl]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 80a2 	beq.w	800b692 <_vfiprintf_r+0x20e>
 800b54e:	2300      	movs	r3, #0
 800b550:	f04f 32ff 	mov.w	r2, #4294967295
 800b554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b558:	f10a 0a01 	add.w	sl, sl, #1
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	9307      	str	r3, [sp, #28]
 800b560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b564:	931a      	str	r3, [sp, #104]	; 0x68
 800b566:	4654      	mov	r4, sl
 800b568:	2205      	movs	r2, #5
 800b56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56e:	4858      	ldr	r0, [pc, #352]	; (800b6d0 <_vfiprintf_r+0x24c>)
 800b570:	f000 fcf0 	bl	800bf54 <memchr>
 800b574:	9a04      	ldr	r2, [sp, #16]
 800b576:	b9d8      	cbnz	r0, 800b5b0 <_vfiprintf_r+0x12c>
 800b578:	06d1      	lsls	r1, r2, #27
 800b57a:	bf44      	itt	mi
 800b57c:	2320      	movmi	r3, #32
 800b57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b582:	0713      	lsls	r3, r2, #28
 800b584:	bf44      	itt	mi
 800b586:	232b      	movmi	r3, #43	; 0x2b
 800b588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b58c:	f89a 3000 	ldrb.w	r3, [sl]
 800b590:	2b2a      	cmp	r3, #42	; 0x2a
 800b592:	d015      	beq.n	800b5c0 <_vfiprintf_r+0x13c>
 800b594:	4654      	mov	r4, sl
 800b596:	2000      	movs	r0, #0
 800b598:	f04f 0c0a 	mov.w	ip, #10
 800b59c:	9a07      	ldr	r2, [sp, #28]
 800b59e:	4621      	mov	r1, r4
 800b5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5a4:	3b30      	subs	r3, #48	; 0x30
 800b5a6:	2b09      	cmp	r3, #9
 800b5a8:	d94e      	bls.n	800b648 <_vfiprintf_r+0x1c4>
 800b5aa:	b1b0      	cbz	r0, 800b5da <_vfiprintf_r+0x156>
 800b5ac:	9207      	str	r2, [sp, #28]
 800b5ae:	e014      	b.n	800b5da <_vfiprintf_r+0x156>
 800b5b0:	eba0 0308 	sub.w	r3, r0, r8
 800b5b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	46a2      	mov	sl, r4
 800b5bc:	9304      	str	r3, [sp, #16]
 800b5be:	e7d2      	b.n	800b566 <_vfiprintf_r+0xe2>
 800b5c0:	9b03      	ldr	r3, [sp, #12]
 800b5c2:	1d19      	adds	r1, r3, #4
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	9103      	str	r1, [sp, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	bfbb      	ittet	lt
 800b5cc:	425b      	neglt	r3, r3
 800b5ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b5d2:	9307      	strge	r3, [sp, #28]
 800b5d4:	9307      	strlt	r3, [sp, #28]
 800b5d6:	bfb8      	it	lt
 800b5d8:	9204      	strlt	r2, [sp, #16]
 800b5da:	7823      	ldrb	r3, [r4, #0]
 800b5dc:	2b2e      	cmp	r3, #46	; 0x2e
 800b5de:	d10c      	bne.n	800b5fa <_vfiprintf_r+0x176>
 800b5e0:	7863      	ldrb	r3, [r4, #1]
 800b5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b5e4:	d135      	bne.n	800b652 <_vfiprintf_r+0x1ce>
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	3402      	adds	r4, #2
 800b5ea:	1d1a      	adds	r2, r3, #4
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	9203      	str	r2, [sp, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	bfb8      	it	lt
 800b5f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5f8:	9305      	str	r3, [sp, #20]
 800b5fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b6e0 <_vfiprintf_r+0x25c>
 800b5fe:	2203      	movs	r2, #3
 800b600:	4650      	mov	r0, sl
 800b602:	7821      	ldrb	r1, [r4, #0]
 800b604:	f000 fca6 	bl	800bf54 <memchr>
 800b608:	b140      	cbz	r0, 800b61c <_vfiprintf_r+0x198>
 800b60a:	2340      	movs	r3, #64	; 0x40
 800b60c:	eba0 000a 	sub.w	r0, r0, sl
 800b610:	fa03 f000 	lsl.w	r0, r3, r0
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	3401      	adds	r4, #1
 800b618:	4303      	orrs	r3, r0
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b620:	2206      	movs	r2, #6
 800b622:	482c      	ldr	r0, [pc, #176]	; (800b6d4 <_vfiprintf_r+0x250>)
 800b624:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b628:	f000 fc94 	bl	800bf54 <memchr>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d03f      	beq.n	800b6b0 <_vfiprintf_r+0x22c>
 800b630:	4b29      	ldr	r3, [pc, #164]	; (800b6d8 <_vfiprintf_r+0x254>)
 800b632:	bb1b      	cbnz	r3, 800b67c <_vfiprintf_r+0x1f8>
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	3307      	adds	r3, #7
 800b638:	f023 0307 	bic.w	r3, r3, #7
 800b63c:	3308      	adds	r3, #8
 800b63e:	9303      	str	r3, [sp, #12]
 800b640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b642:	443b      	add	r3, r7
 800b644:	9309      	str	r3, [sp, #36]	; 0x24
 800b646:	e767      	b.n	800b518 <_vfiprintf_r+0x94>
 800b648:	460c      	mov	r4, r1
 800b64a:	2001      	movs	r0, #1
 800b64c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b650:	e7a5      	b.n	800b59e <_vfiprintf_r+0x11a>
 800b652:	2300      	movs	r3, #0
 800b654:	f04f 0c0a 	mov.w	ip, #10
 800b658:	4619      	mov	r1, r3
 800b65a:	3401      	adds	r4, #1
 800b65c:	9305      	str	r3, [sp, #20]
 800b65e:	4620      	mov	r0, r4
 800b660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b664:	3a30      	subs	r2, #48	; 0x30
 800b666:	2a09      	cmp	r2, #9
 800b668:	d903      	bls.n	800b672 <_vfiprintf_r+0x1ee>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0c5      	beq.n	800b5fa <_vfiprintf_r+0x176>
 800b66e:	9105      	str	r1, [sp, #20]
 800b670:	e7c3      	b.n	800b5fa <_vfiprintf_r+0x176>
 800b672:	4604      	mov	r4, r0
 800b674:	2301      	movs	r3, #1
 800b676:	fb0c 2101 	mla	r1, ip, r1, r2
 800b67a:	e7f0      	b.n	800b65e <_vfiprintf_r+0x1da>
 800b67c:	ab03      	add	r3, sp, #12
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	462a      	mov	r2, r5
 800b682:	4630      	mov	r0, r6
 800b684:	4b15      	ldr	r3, [pc, #84]	; (800b6dc <_vfiprintf_r+0x258>)
 800b686:	a904      	add	r1, sp, #16
 800b688:	f3af 8000 	nop.w
 800b68c:	4607      	mov	r7, r0
 800b68e:	1c78      	adds	r0, r7, #1
 800b690:	d1d6      	bne.n	800b640 <_vfiprintf_r+0x1bc>
 800b692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b694:	07d9      	lsls	r1, r3, #31
 800b696:	d405      	bmi.n	800b6a4 <_vfiprintf_r+0x220>
 800b698:	89ab      	ldrh	r3, [r5, #12]
 800b69a:	059a      	lsls	r2, r3, #22
 800b69c:	d402      	bmi.n	800b6a4 <_vfiprintf_r+0x220>
 800b69e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6a0:	f7ff f878 	bl	800a794 <__retarget_lock_release_recursive>
 800b6a4:	89ab      	ldrh	r3, [r5, #12]
 800b6a6:	065b      	lsls	r3, r3, #25
 800b6a8:	f53f af12 	bmi.w	800b4d0 <_vfiprintf_r+0x4c>
 800b6ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ae:	e711      	b.n	800b4d4 <_vfiprintf_r+0x50>
 800b6b0:	ab03      	add	r3, sp, #12
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	462a      	mov	r2, r5
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <_vfiprintf_r+0x258>)
 800b6ba:	a904      	add	r1, sp, #16
 800b6bc:	f000 f882 	bl	800b7c4 <_printf_i>
 800b6c0:	e7e4      	b.n	800b68c <_vfiprintf_r+0x208>
 800b6c2:	bf00      	nop
 800b6c4:	0800c2b0 	.word	0x0800c2b0
 800b6c8:	0800c2d0 	.word	0x0800c2d0
 800b6cc:	0800c290 	.word	0x0800c290
 800b6d0:	0800c4f4 	.word	0x0800c4f4
 800b6d4:	0800c4fe 	.word	0x0800c4fe
 800b6d8:	00000000 	.word	0x00000000
 800b6dc:	0800b45f 	.word	0x0800b45f
 800b6e0:	0800c4fa 	.word	0x0800c4fa

0800b6e4 <_printf_common>:
 800b6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	4616      	mov	r6, r2
 800b6ea:	4699      	mov	r9, r3
 800b6ec:	688a      	ldr	r2, [r1, #8]
 800b6ee:	690b      	ldr	r3, [r1, #16]
 800b6f0:	4607      	mov	r7, r0
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	bfb8      	it	lt
 800b6f6:	4613      	movlt	r3, r2
 800b6f8:	6033      	str	r3, [r6, #0]
 800b6fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6fe:	460c      	mov	r4, r1
 800b700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b704:	b10a      	cbz	r2, 800b70a <_printf_common+0x26>
 800b706:	3301      	adds	r3, #1
 800b708:	6033      	str	r3, [r6, #0]
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	0699      	lsls	r1, r3, #26
 800b70e:	bf42      	ittt	mi
 800b710:	6833      	ldrmi	r3, [r6, #0]
 800b712:	3302      	addmi	r3, #2
 800b714:	6033      	strmi	r3, [r6, #0]
 800b716:	6825      	ldr	r5, [r4, #0]
 800b718:	f015 0506 	ands.w	r5, r5, #6
 800b71c:	d106      	bne.n	800b72c <_printf_common+0x48>
 800b71e:	f104 0a19 	add.w	sl, r4, #25
 800b722:	68e3      	ldr	r3, [r4, #12]
 800b724:	6832      	ldr	r2, [r6, #0]
 800b726:	1a9b      	subs	r3, r3, r2
 800b728:	42ab      	cmp	r3, r5
 800b72a:	dc28      	bgt.n	800b77e <_printf_common+0x9a>
 800b72c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b730:	1e13      	subs	r3, r2, #0
 800b732:	6822      	ldr	r2, [r4, #0]
 800b734:	bf18      	it	ne
 800b736:	2301      	movne	r3, #1
 800b738:	0692      	lsls	r2, r2, #26
 800b73a:	d42d      	bmi.n	800b798 <_printf_common+0xb4>
 800b73c:	4649      	mov	r1, r9
 800b73e:	4638      	mov	r0, r7
 800b740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b744:	47c0      	blx	r8
 800b746:	3001      	adds	r0, #1
 800b748:	d020      	beq.n	800b78c <_printf_common+0xa8>
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	68e5      	ldr	r5, [r4, #12]
 800b74e:	f003 0306 	and.w	r3, r3, #6
 800b752:	2b04      	cmp	r3, #4
 800b754:	bf18      	it	ne
 800b756:	2500      	movne	r5, #0
 800b758:	6832      	ldr	r2, [r6, #0]
 800b75a:	f04f 0600 	mov.w	r6, #0
 800b75e:	68a3      	ldr	r3, [r4, #8]
 800b760:	bf08      	it	eq
 800b762:	1aad      	subeq	r5, r5, r2
 800b764:	6922      	ldr	r2, [r4, #16]
 800b766:	bf08      	it	eq
 800b768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b76c:	4293      	cmp	r3, r2
 800b76e:	bfc4      	itt	gt
 800b770:	1a9b      	subgt	r3, r3, r2
 800b772:	18ed      	addgt	r5, r5, r3
 800b774:	341a      	adds	r4, #26
 800b776:	42b5      	cmp	r5, r6
 800b778:	d11a      	bne.n	800b7b0 <_printf_common+0xcc>
 800b77a:	2000      	movs	r0, #0
 800b77c:	e008      	b.n	800b790 <_printf_common+0xac>
 800b77e:	2301      	movs	r3, #1
 800b780:	4652      	mov	r2, sl
 800b782:	4649      	mov	r1, r9
 800b784:	4638      	mov	r0, r7
 800b786:	47c0      	blx	r8
 800b788:	3001      	adds	r0, #1
 800b78a:	d103      	bne.n	800b794 <_printf_common+0xb0>
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b794:	3501      	adds	r5, #1
 800b796:	e7c4      	b.n	800b722 <_printf_common+0x3e>
 800b798:	2030      	movs	r0, #48	; 0x30
 800b79a:	18e1      	adds	r1, r4, r3
 800b79c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7a6:	4422      	add	r2, r4
 800b7a8:	3302      	adds	r3, #2
 800b7aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7ae:	e7c5      	b.n	800b73c <_printf_common+0x58>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	4649      	mov	r1, r9
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	47c0      	blx	r8
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	d0e6      	beq.n	800b78c <_printf_common+0xa8>
 800b7be:	3601      	adds	r6, #1
 800b7c0:	e7d9      	b.n	800b776 <_printf_common+0x92>
	...

0800b7c4 <_printf_i>:
 800b7c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	7e27      	ldrb	r7, [r4, #24]
 800b7cc:	4691      	mov	r9, r2
 800b7ce:	2f78      	cmp	r7, #120	; 0x78
 800b7d0:	4680      	mov	r8, r0
 800b7d2:	469a      	mov	sl, r3
 800b7d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b7d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7da:	d807      	bhi.n	800b7ec <_printf_i+0x28>
 800b7dc:	2f62      	cmp	r7, #98	; 0x62
 800b7de:	d80a      	bhi.n	800b7f6 <_printf_i+0x32>
 800b7e0:	2f00      	cmp	r7, #0
 800b7e2:	f000 80d9 	beq.w	800b998 <_printf_i+0x1d4>
 800b7e6:	2f58      	cmp	r7, #88	; 0x58
 800b7e8:	f000 80a4 	beq.w	800b934 <_printf_i+0x170>
 800b7ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b7f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7f4:	e03a      	b.n	800b86c <_printf_i+0xa8>
 800b7f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7fa:	2b15      	cmp	r3, #21
 800b7fc:	d8f6      	bhi.n	800b7ec <_printf_i+0x28>
 800b7fe:	a001      	add	r0, pc, #4	; (adr r0, 800b804 <_printf_i+0x40>)
 800b800:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b804:	0800b85d 	.word	0x0800b85d
 800b808:	0800b871 	.word	0x0800b871
 800b80c:	0800b7ed 	.word	0x0800b7ed
 800b810:	0800b7ed 	.word	0x0800b7ed
 800b814:	0800b7ed 	.word	0x0800b7ed
 800b818:	0800b7ed 	.word	0x0800b7ed
 800b81c:	0800b871 	.word	0x0800b871
 800b820:	0800b7ed 	.word	0x0800b7ed
 800b824:	0800b7ed 	.word	0x0800b7ed
 800b828:	0800b7ed 	.word	0x0800b7ed
 800b82c:	0800b7ed 	.word	0x0800b7ed
 800b830:	0800b97f 	.word	0x0800b97f
 800b834:	0800b8a1 	.word	0x0800b8a1
 800b838:	0800b961 	.word	0x0800b961
 800b83c:	0800b7ed 	.word	0x0800b7ed
 800b840:	0800b7ed 	.word	0x0800b7ed
 800b844:	0800b9a1 	.word	0x0800b9a1
 800b848:	0800b7ed 	.word	0x0800b7ed
 800b84c:	0800b8a1 	.word	0x0800b8a1
 800b850:	0800b7ed 	.word	0x0800b7ed
 800b854:	0800b7ed 	.word	0x0800b7ed
 800b858:	0800b969 	.word	0x0800b969
 800b85c:	680b      	ldr	r3, [r1, #0]
 800b85e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b862:	1d1a      	adds	r2, r3, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	600a      	str	r2, [r1, #0]
 800b868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b86c:	2301      	movs	r3, #1
 800b86e:	e0a4      	b.n	800b9ba <_printf_i+0x1f6>
 800b870:	6825      	ldr	r5, [r4, #0]
 800b872:	6808      	ldr	r0, [r1, #0]
 800b874:	062e      	lsls	r6, r5, #24
 800b876:	f100 0304 	add.w	r3, r0, #4
 800b87a:	d50a      	bpl.n	800b892 <_printf_i+0xce>
 800b87c:	6805      	ldr	r5, [r0, #0]
 800b87e:	600b      	str	r3, [r1, #0]
 800b880:	2d00      	cmp	r5, #0
 800b882:	da03      	bge.n	800b88c <_printf_i+0xc8>
 800b884:	232d      	movs	r3, #45	; 0x2d
 800b886:	426d      	negs	r5, r5
 800b888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b88c:	230a      	movs	r3, #10
 800b88e:	485e      	ldr	r0, [pc, #376]	; (800ba08 <_printf_i+0x244>)
 800b890:	e019      	b.n	800b8c6 <_printf_i+0x102>
 800b892:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b896:	6805      	ldr	r5, [r0, #0]
 800b898:	600b      	str	r3, [r1, #0]
 800b89a:	bf18      	it	ne
 800b89c:	b22d      	sxthne	r5, r5
 800b89e:	e7ef      	b.n	800b880 <_printf_i+0xbc>
 800b8a0:	680b      	ldr	r3, [r1, #0]
 800b8a2:	6825      	ldr	r5, [r4, #0]
 800b8a4:	1d18      	adds	r0, r3, #4
 800b8a6:	6008      	str	r0, [r1, #0]
 800b8a8:	0628      	lsls	r0, r5, #24
 800b8aa:	d501      	bpl.n	800b8b0 <_printf_i+0xec>
 800b8ac:	681d      	ldr	r5, [r3, #0]
 800b8ae:	e002      	b.n	800b8b6 <_printf_i+0xf2>
 800b8b0:	0669      	lsls	r1, r5, #25
 800b8b2:	d5fb      	bpl.n	800b8ac <_printf_i+0xe8>
 800b8b4:	881d      	ldrh	r5, [r3, #0]
 800b8b6:	2f6f      	cmp	r7, #111	; 0x6f
 800b8b8:	bf0c      	ite	eq
 800b8ba:	2308      	moveq	r3, #8
 800b8bc:	230a      	movne	r3, #10
 800b8be:	4852      	ldr	r0, [pc, #328]	; (800ba08 <_printf_i+0x244>)
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8c6:	6866      	ldr	r6, [r4, #4]
 800b8c8:	2e00      	cmp	r6, #0
 800b8ca:	bfa8      	it	ge
 800b8cc:	6821      	ldrge	r1, [r4, #0]
 800b8ce:	60a6      	str	r6, [r4, #8]
 800b8d0:	bfa4      	itt	ge
 800b8d2:	f021 0104 	bicge.w	r1, r1, #4
 800b8d6:	6021      	strge	r1, [r4, #0]
 800b8d8:	b90d      	cbnz	r5, 800b8de <_printf_i+0x11a>
 800b8da:	2e00      	cmp	r6, #0
 800b8dc:	d04d      	beq.n	800b97a <_printf_i+0x1b6>
 800b8de:	4616      	mov	r6, r2
 800b8e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8e4:	fb03 5711 	mls	r7, r3, r1, r5
 800b8e8:	5dc7      	ldrb	r7, [r0, r7]
 800b8ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8ee:	462f      	mov	r7, r5
 800b8f0:	42bb      	cmp	r3, r7
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	d9f4      	bls.n	800b8e0 <_printf_i+0x11c>
 800b8f6:	2b08      	cmp	r3, #8
 800b8f8:	d10b      	bne.n	800b912 <_printf_i+0x14e>
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	07df      	lsls	r7, r3, #31
 800b8fe:	d508      	bpl.n	800b912 <_printf_i+0x14e>
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	6861      	ldr	r1, [r4, #4]
 800b904:	4299      	cmp	r1, r3
 800b906:	bfde      	ittt	le
 800b908:	2330      	movle	r3, #48	; 0x30
 800b90a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b90e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b912:	1b92      	subs	r2, r2, r6
 800b914:	6122      	str	r2, [r4, #16]
 800b916:	464b      	mov	r3, r9
 800b918:	4621      	mov	r1, r4
 800b91a:	4640      	mov	r0, r8
 800b91c:	f8cd a000 	str.w	sl, [sp]
 800b920:	aa03      	add	r2, sp, #12
 800b922:	f7ff fedf 	bl	800b6e4 <_printf_common>
 800b926:	3001      	adds	r0, #1
 800b928:	d14c      	bne.n	800b9c4 <_printf_i+0x200>
 800b92a:	f04f 30ff 	mov.w	r0, #4294967295
 800b92e:	b004      	add	sp, #16
 800b930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b934:	4834      	ldr	r0, [pc, #208]	; (800ba08 <_printf_i+0x244>)
 800b936:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b93a:	680e      	ldr	r6, [r1, #0]
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b942:	061f      	lsls	r7, r3, #24
 800b944:	600e      	str	r6, [r1, #0]
 800b946:	d514      	bpl.n	800b972 <_printf_i+0x1ae>
 800b948:	07d9      	lsls	r1, r3, #31
 800b94a:	bf44      	itt	mi
 800b94c:	f043 0320 	orrmi.w	r3, r3, #32
 800b950:	6023      	strmi	r3, [r4, #0]
 800b952:	b91d      	cbnz	r5, 800b95c <_printf_i+0x198>
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	f023 0320 	bic.w	r3, r3, #32
 800b95a:	6023      	str	r3, [r4, #0]
 800b95c:	2310      	movs	r3, #16
 800b95e:	e7af      	b.n	800b8c0 <_printf_i+0xfc>
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	f043 0320 	orr.w	r3, r3, #32
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	2378      	movs	r3, #120	; 0x78
 800b96a:	4828      	ldr	r0, [pc, #160]	; (800ba0c <_printf_i+0x248>)
 800b96c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b970:	e7e3      	b.n	800b93a <_printf_i+0x176>
 800b972:	065e      	lsls	r6, r3, #25
 800b974:	bf48      	it	mi
 800b976:	b2ad      	uxthmi	r5, r5
 800b978:	e7e6      	b.n	800b948 <_printf_i+0x184>
 800b97a:	4616      	mov	r6, r2
 800b97c:	e7bb      	b.n	800b8f6 <_printf_i+0x132>
 800b97e:	680b      	ldr	r3, [r1, #0]
 800b980:	6826      	ldr	r6, [r4, #0]
 800b982:	1d1d      	adds	r5, r3, #4
 800b984:	6960      	ldr	r0, [r4, #20]
 800b986:	600d      	str	r5, [r1, #0]
 800b988:	0635      	lsls	r5, r6, #24
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	d501      	bpl.n	800b992 <_printf_i+0x1ce>
 800b98e:	6018      	str	r0, [r3, #0]
 800b990:	e002      	b.n	800b998 <_printf_i+0x1d4>
 800b992:	0671      	lsls	r1, r6, #25
 800b994:	d5fb      	bpl.n	800b98e <_printf_i+0x1ca>
 800b996:	8018      	strh	r0, [r3, #0]
 800b998:	2300      	movs	r3, #0
 800b99a:	4616      	mov	r6, r2
 800b99c:	6123      	str	r3, [r4, #16]
 800b99e:	e7ba      	b.n	800b916 <_printf_i+0x152>
 800b9a0:	680b      	ldr	r3, [r1, #0]
 800b9a2:	1d1a      	adds	r2, r3, #4
 800b9a4:	600a      	str	r2, [r1, #0]
 800b9a6:	681e      	ldr	r6, [r3, #0]
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	6862      	ldr	r2, [r4, #4]
 800b9ae:	f000 fad1 	bl	800bf54 <memchr>
 800b9b2:	b108      	cbz	r0, 800b9b8 <_printf_i+0x1f4>
 800b9b4:	1b80      	subs	r0, r0, r6
 800b9b6:	6060      	str	r0, [r4, #4]
 800b9b8:	6863      	ldr	r3, [r4, #4]
 800b9ba:	6123      	str	r3, [r4, #16]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9c2:	e7a8      	b.n	800b916 <_printf_i+0x152>
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	4640      	mov	r0, r8
 800b9ca:	6923      	ldr	r3, [r4, #16]
 800b9cc:	47d0      	blx	sl
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	d0ab      	beq.n	800b92a <_printf_i+0x166>
 800b9d2:	6823      	ldr	r3, [r4, #0]
 800b9d4:	079b      	lsls	r3, r3, #30
 800b9d6:	d413      	bmi.n	800ba00 <_printf_i+0x23c>
 800b9d8:	68e0      	ldr	r0, [r4, #12]
 800b9da:	9b03      	ldr	r3, [sp, #12]
 800b9dc:	4298      	cmp	r0, r3
 800b9de:	bfb8      	it	lt
 800b9e0:	4618      	movlt	r0, r3
 800b9e2:	e7a4      	b.n	800b92e <_printf_i+0x16a>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	4632      	mov	r2, r6
 800b9e8:	4649      	mov	r1, r9
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	47d0      	blx	sl
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	d09b      	beq.n	800b92a <_printf_i+0x166>
 800b9f2:	3501      	adds	r5, #1
 800b9f4:	68e3      	ldr	r3, [r4, #12]
 800b9f6:	9903      	ldr	r1, [sp, #12]
 800b9f8:	1a5b      	subs	r3, r3, r1
 800b9fa:	42ab      	cmp	r3, r5
 800b9fc:	dcf2      	bgt.n	800b9e4 <_printf_i+0x220>
 800b9fe:	e7eb      	b.n	800b9d8 <_printf_i+0x214>
 800ba00:	2500      	movs	r5, #0
 800ba02:	f104 0619 	add.w	r6, r4, #25
 800ba06:	e7f5      	b.n	800b9f4 <_printf_i+0x230>
 800ba08:	0800c505 	.word	0x0800c505
 800ba0c:	0800c516 	.word	0x0800c516

0800ba10 <nan>:
 800ba10:	2000      	movs	r0, #0
 800ba12:	4901      	ldr	r1, [pc, #4]	; (800ba18 <nan+0x8>)
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	7ff80000 	.word	0x7ff80000

0800ba1c <__sread>:
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	460c      	mov	r4, r1
 800ba20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba24:	f000 fae4 	bl	800bff0 <_read_r>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	bfab      	itete	ge
 800ba2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba30:	181b      	addge	r3, r3, r0
 800ba32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba36:	bfac      	ite	ge
 800ba38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba3a:	81a3      	strhlt	r3, [r4, #12]
 800ba3c:	bd10      	pop	{r4, pc}

0800ba3e <__swrite>:
 800ba3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba42:	461f      	mov	r7, r3
 800ba44:	898b      	ldrh	r3, [r1, #12]
 800ba46:	4605      	mov	r5, r0
 800ba48:	05db      	lsls	r3, r3, #23
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	4616      	mov	r6, r2
 800ba4e:	d505      	bpl.n	800ba5c <__swrite+0x1e>
 800ba50:	2302      	movs	r3, #2
 800ba52:	2200      	movs	r2, #0
 800ba54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba58:	f000 fa06 	bl	800be68 <_lseek_r>
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	4632      	mov	r2, r6
 800ba60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba64:	81a3      	strh	r3, [r4, #12]
 800ba66:	4628      	mov	r0, r5
 800ba68:	463b      	mov	r3, r7
 800ba6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba72:	f000 b877 	b.w	800bb64 <_write_r>

0800ba76 <__sseek>:
 800ba76:	b510      	push	{r4, lr}
 800ba78:	460c      	mov	r4, r1
 800ba7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7e:	f000 f9f3 	bl	800be68 <_lseek_r>
 800ba82:	1c43      	adds	r3, r0, #1
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	bf15      	itete	ne
 800ba88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba92:	81a3      	strheq	r3, [r4, #12]
 800ba94:	bf18      	it	ne
 800ba96:	81a3      	strhne	r3, [r4, #12]
 800ba98:	bd10      	pop	{r4, pc}

0800ba9a <__sclose>:
 800ba9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba9e:	f000 b8ff 	b.w	800bca0 <_close_r>
	...

0800baa4 <__swbuf_r>:
 800baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa6:	460e      	mov	r6, r1
 800baa8:	4614      	mov	r4, r2
 800baaa:	4605      	mov	r5, r0
 800baac:	b118      	cbz	r0, 800bab6 <__swbuf_r+0x12>
 800baae:	6983      	ldr	r3, [r0, #24]
 800bab0:	b90b      	cbnz	r3, 800bab6 <__swbuf_r+0x12>
 800bab2:	f7fe fa69 	bl	8009f88 <__sinit>
 800bab6:	4b21      	ldr	r3, [pc, #132]	; (800bb3c <__swbuf_r+0x98>)
 800bab8:	429c      	cmp	r4, r3
 800baba:	d12b      	bne.n	800bb14 <__swbuf_r+0x70>
 800babc:	686c      	ldr	r4, [r5, #4]
 800babe:	69a3      	ldr	r3, [r4, #24]
 800bac0:	60a3      	str	r3, [r4, #8]
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	071a      	lsls	r2, r3, #28
 800bac6:	d52f      	bpl.n	800bb28 <__swbuf_r+0x84>
 800bac8:	6923      	ldr	r3, [r4, #16]
 800baca:	b36b      	cbz	r3, 800bb28 <__swbuf_r+0x84>
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	6820      	ldr	r0, [r4, #0]
 800bad0:	b2f6      	uxtb	r6, r6
 800bad2:	1ac0      	subs	r0, r0, r3
 800bad4:	6963      	ldr	r3, [r4, #20]
 800bad6:	4637      	mov	r7, r6
 800bad8:	4283      	cmp	r3, r0
 800bada:	dc04      	bgt.n	800bae6 <__swbuf_r+0x42>
 800badc:	4621      	mov	r1, r4
 800bade:	4628      	mov	r0, r5
 800bae0:	f000 f974 	bl	800bdcc <_fflush_r>
 800bae4:	bb30      	cbnz	r0, 800bb34 <__swbuf_r+0x90>
 800bae6:	68a3      	ldr	r3, [r4, #8]
 800bae8:	3001      	adds	r0, #1
 800baea:	3b01      	subs	r3, #1
 800baec:	60a3      	str	r3, [r4, #8]
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	6022      	str	r2, [r4, #0]
 800baf4:	701e      	strb	r6, [r3, #0]
 800baf6:	6963      	ldr	r3, [r4, #20]
 800baf8:	4283      	cmp	r3, r0
 800bafa:	d004      	beq.n	800bb06 <__swbuf_r+0x62>
 800bafc:	89a3      	ldrh	r3, [r4, #12]
 800bafe:	07db      	lsls	r3, r3, #31
 800bb00:	d506      	bpl.n	800bb10 <__swbuf_r+0x6c>
 800bb02:	2e0a      	cmp	r6, #10
 800bb04:	d104      	bne.n	800bb10 <__swbuf_r+0x6c>
 800bb06:	4621      	mov	r1, r4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f000 f95f 	bl	800bdcc <_fflush_r>
 800bb0e:	b988      	cbnz	r0, 800bb34 <__swbuf_r+0x90>
 800bb10:	4638      	mov	r0, r7
 800bb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb14:	4b0a      	ldr	r3, [pc, #40]	; (800bb40 <__swbuf_r+0x9c>)
 800bb16:	429c      	cmp	r4, r3
 800bb18:	d101      	bne.n	800bb1e <__swbuf_r+0x7a>
 800bb1a:	68ac      	ldr	r4, [r5, #8]
 800bb1c:	e7cf      	b.n	800babe <__swbuf_r+0x1a>
 800bb1e:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <__swbuf_r+0xa0>)
 800bb20:	429c      	cmp	r4, r3
 800bb22:	bf08      	it	eq
 800bb24:	68ec      	ldreq	r4, [r5, #12]
 800bb26:	e7ca      	b.n	800babe <__swbuf_r+0x1a>
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f000 f82c 	bl	800bb88 <__swsetup_r>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d0cb      	beq.n	800bacc <__swbuf_r+0x28>
 800bb34:	f04f 37ff 	mov.w	r7, #4294967295
 800bb38:	e7ea      	b.n	800bb10 <__swbuf_r+0x6c>
 800bb3a:	bf00      	nop
 800bb3c:	0800c2b0 	.word	0x0800c2b0
 800bb40:	0800c2d0 	.word	0x0800c2d0
 800bb44:	0800c290 	.word	0x0800c290

0800bb48 <__ascii_wctomb>:
 800bb48:	4603      	mov	r3, r0
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	b141      	cbz	r1, 800bb60 <__ascii_wctomb+0x18>
 800bb4e:	2aff      	cmp	r2, #255	; 0xff
 800bb50:	d904      	bls.n	800bb5c <__ascii_wctomb+0x14>
 800bb52:	228a      	movs	r2, #138	; 0x8a
 800bb54:	f04f 30ff 	mov.w	r0, #4294967295
 800bb58:	601a      	str	r2, [r3, #0]
 800bb5a:	4770      	bx	lr
 800bb5c:	2001      	movs	r0, #1
 800bb5e:	700a      	strb	r2, [r1, #0]
 800bb60:	4770      	bx	lr
	...

0800bb64 <_write_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	4d05      	ldr	r5, [pc, #20]	; (800bb84 <_write_r+0x20>)
 800bb70:	602a      	str	r2, [r5, #0]
 800bb72:	461a      	mov	r2, r3
 800bb74:	f7f6 f802 	bl	8001b7c <_write>
 800bb78:	1c43      	adds	r3, r0, #1
 800bb7a:	d102      	bne.n	800bb82 <_write_r+0x1e>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	b103      	cbz	r3, 800bb82 <_write_r+0x1e>
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	20001118 	.word	0x20001118

0800bb88 <__swsetup_r>:
 800bb88:	4b32      	ldr	r3, [pc, #200]	; (800bc54 <__swsetup_r+0xcc>)
 800bb8a:	b570      	push	{r4, r5, r6, lr}
 800bb8c:	681d      	ldr	r5, [r3, #0]
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460c      	mov	r4, r1
 800bb92:	b125      	cbz	r5, 800bb9e <__swsetup_r+0x16>
 800bb94:	69ab      	ldr	r3, [r5, #24]
 800bb96:	b913      	cbnz	r3, 800bb9e <__swsetup_r+0x16>
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f7fe f9f5 	bl	8009f88 <__sinit>
 800bb9e:	4b2e      	ldr	r3, [pc, #184]	; (800bc58 <__swsetup_r+0xd0>)
 800bba0:	429c      	cmp	r4, r3
 800bba2:	d10f      	bne.n	800bbc4 <__swsetup_r+0x3c>
 800bba4:	686c      	ldr	r4, [r5, #4]
 800bba6:	89a3      	ldrh	r3, [r4, #12]
 800bba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbac:	0719      	lsls	r1, r3, #28
 800bbae:	d42c      	bmi.n	800bc0a <__swsetup_r+0x82>
 800bbb0:	06dd      	lsls	r5, r3, #27
 800bbb2:	d411      	bmi.n	800bbd8 <__swsetup_r+0x50>
 800bbb4:	2309      	movs	r3, #9
 800bbb6:	6033      	str	r3, [r6, #0]
 800bbb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	81a3      	strh	r3, [r4, #12]
 800bbc2:	e03e      	b.n	800bc42 <__swsetup_r+0xba>
 800bbc4:	4b25      	ldr	r3, [pc, #148]	; (800bc5c <__swsetup_r+0xd4>)
 800bbc6:	429c      	cmp	r4, r3
 800bbc8:	d101      	bne.n	800bbce <__swsetup_r+0x46>
 800bbca:	68ac      	ldr	r4, [r5, #8]
 800bbcc:	e7eb      	b.n	800bba6 <__swsetup_r+0x1e>
 800bbce:	4b24      	ldr	r3, [pc, #144]	; (800bc60 <__swsetup_r+0xd8>)
 800bbd0:	429c      	cmp	r4, r3
 800bbd2:	bf08      	it	eq
 800bbd4:	68ec      	ldreq	r4, [r5, #12]
 800bbd6:	e7e6      	b.n	800bba6 <__swsetup_r+0x1e>
 800bbd8:	0758      	lsls	r0, r3, #29
 800bbda:	d512      	bpl.n	800bc02 <__swsetup_r+0x7a>
 800bbdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbde:	b141      	cbz	r1, 800bbf2 <__swsetup_r+0x6a>
 800bbe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbe4:	4299      	cmp	r1, r3
 800bbe6:	d002      	beq.n	800bbee <__swsetup_r+0x66>
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f7fd fa59 	bl	80090a0 <_free_r>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	6363      	str	r3, [r4, #52]	; 0x34
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbf8:	81a3      	strh	r3, [r4, #12]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	6063      	str	r3, [r4, #4]
 800bbfe:	6923      	ldr	r3, [r4, #16]
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	89a3      	ldrh	r3, [r4, #12]
 800bc04:	f043 0308 	orr.w	r3, r3, #8
 800bc08:	81a3      	strh	r3, [r4, #12]
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	b94b      	cbnz	r3, 800bc22 <__swsetup_r+0x9a>
 800bc0e:	89a3      	ldrh	r3, [r4, #12]
 800bc10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc18:	d003      	beq.n	800bc22 <__swsetup_r+0x9a>
 800bc1a:	4621      	mov	r1, r4
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f000 f959 	bl	800bed4 <__smakebuf_r>
 800bc22:	89a0      	ldrh	r0, [r4, #12]
 800bc24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc28:	f010 0301 	ands.w	r3, r0, #1
 800bc2c:	d00a      	beq.n	800bc44 <__swsetup_r+0xbc>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60a3      	str	r3, [r4, #8]
 800bc32:	6963      	ldr	r3, [r4, #20]
 800bc34:	425b      	negs	r3, r3
 800bc36:	61a3      	str	r3, [r4, #24]
 800bc38:	6923      	ldr	r3, [r4, #16]
 800bc3a:	b943      	cbnz	r3, 800bc4e <__swsetup_r+0xc6>
 800bc3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc40:	d1ba      	bne.n	800bbb8 <__swsetup_r+0x30>
 800bc42:	bd70      	pop	{r4, r5, r6, pc}
 800bc44:	0781      	lsls	r1, r0, #30
 800bc46:	bf58      	it	pl
 800bc48:	6963      	ldrpl	r3, [r4, #20]
 800bc4a:	60a3      	str	r3, [r4, #8]
 800bc4c:	e7f4      	b.n	800bc38 <__swsetup_r+0xb0>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	e7f7      	b.n	800bc42 <__swsetup_r+0xba>
 800bc52:	bf00      	nop
 800bc54:	2000018c 	.word	0x2000018c
 800bc58:	0800c2b0 	.word	0x0800c2b0
 800bc5c:	0800c2d0 	.word	0x0800c2d0
 800bc60:	0800c290 	.word	0x0800c290

0800bc64 <__assert_func>:
 800bc64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc66:	4614      	mov	r4, r2
 800bc68:	461a      	mov	r2, r3
 800bc6a:	4b09      	ldr	r3, [pc, #36]	; (800bc90 <__assert_func+0x2c>)
 800bc6c:	4605      	mov	r5, r0
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	68d8      	ldr	r0, [r3, #12]
 800bc72:	b14c      	cbz	r4, 800bc88 <__assert_func+0x24>
 800bc74:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <__assert_func+0x30>)
 800bc76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc7a:	9100      	str	r1, [sp, #0]
 800bc7c:	462b      	mov	r3, r5
 800bc7e:	4906      	ldr	r1, [pc, #24]	; (800bc98 <__assert_func+0x34>)
 800bc80:	f000 f8e0 	bl	800be44 <fiprintf>
 800bc84:	f000 f9c6 	bl	800c014 <abort>
 800bc88:	4b04      	ldr	r3, [pc, #16]	; (800bc9c <__assert_func+0x38>)
 800bc8a:	461c      	mov	r4, r3
 800bc8c:	e7f3      	b.n	800bc76 <__assert_func+0x12>
 800bc8e:	bf00      	nop
 800bc90:	2000018c 	.word	0x2000018c
 800bc94:	0800c527 	.word	0x0800c527
 800bc98:	0800c534 	.word	0x0800c534
 800bc9c:	0800c562 	.word	0x0800c562

0800bca0 <_close_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	2300      	movs	r3, #0
 800bca4:	4d05      	ldr	r5, [pc, #20]	; (800bcbc <_close_r+0x1c>)
 800bca6:	4604      	mov	r4, r0
 800bca8:	4608      	mov	r0, r1
 800bcaa:	602b      	str	r3, [r5, #0]
 800bcac:	f7f5 ff82 	bl	8001bb4 <_close>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	d102      	bne.n	800bcba <_close_r+0x1a>
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	b103      	cbz	r3, 800bcba <_close_r+0x1a>
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	bd38      	pop	{r3, r4, r5, pc}
 800bcbc:	20001118 	.word	0x20001118

0800bcc0 <__sflush_r>:
 800bcc0:	898a      	ldrh	r2, [r1, #12]
 800bcc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc6:	4605      	mov	r5, r0
 800bcc8:	0710      	lsls	r0, r2, #28
 800bcca:	460c      	mov	r4, r1
 800bccc:	d458      	bmi.n	800bd80 <__sflush_r+0xc0>
 800bcce:	684b      	ldr	r3, [r1, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dc05      	bgt.n	800bce0 <__sflush_r+0x20>
 800bcd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	dc02      	bgt.n	800bce0 <__sflush_r+0x20>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bce2:	2e00      	cmp	r6, #0
 800bce4:	d0f9      	beq.n	800bcda <__sflush_r+0x1a>
 800bce6:	2300      	movs	r3, #0
 800bce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcec:	682f      	ldr	r7, [r5, #0]
 800bcee:	602b      	str	r3, [r5, #0]
 800bcf0:	d032      	beq.n	800bd58 <__sflush_r+0x98>
 800bcf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	075a      	lsls	r2, r3, #29
 800bcf8:	d505      	bpl.n	800bd06 <__sflush_r+0x46>
 800bcfa:	6863      	ldr	r3, [r4, #4]
 800bcfc:	1ac0      	subs	r0, r0, r3
 800bcfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd00:	b10b      	cbz	r3, 800bd06 <__sflush_r+0x46>
 800bd02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd04:	1ac0      	subs	r0, r0, r3
 800bd06:	2300      	movs	r3, #0
 800bd08:	4602      	mov	r2, r0
 800bd0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	6a21      	ldr	r1, [r4, #32]
 800bd10:	47b0      	blx	r6
 800bd12:	1c43      	adds	r3, r0, #1
 800bd14:	89a3      	ldrh	r3, [r4, #12]
 800bd16:	d106      	bne.n	800bd26 <__sflush_r+0x66>
 800bd18:	6829      	ldr	r1, [r5, #0]
 800bd1a:	291d      	cmp	r1, #29
 800bd1c:	d82c      	bhi.n	800bd78 <__sflush_r+0xb8>
 800bd1e:	4a2a      	ldr	r2, [pc, #168]	; (800bdc8 <__sflush_r+0x108>)
 800bd20:	40ca      	lsrs	r2, r1
 800bd22:	07d6      	lsls	r6, r2, #31
 800bd24:	d528      	bpl.n	800bd78 <__sflush_r+0xb8>
 800bd26:	2200      	movs	r2, #0
 800bd28:	6062      	str	r2, [r4, #4]
 800bd2a:	6922      	ldr	r2, [r4, #16]
 800bd2c:	04d9      	lsls	r1, r3, #19
 800bd2e:	6022      	str	r2, [r4, #0]
 800bd30:	d504      	bpl.n	800bd3c <__sflush_r+0x7c>
 800bd32:	1c42      	adds	r2, r0, #1
 800bd34:	d101      	bne.n	800bd3a <__sflush_r+0x7a>
 800bd36:	682b      	ldr	r3, [r5, #0]
 800bd38:	b903      	cbnz	r3, 800bd3c <__sflush_r+0x7c>
 800bd3a:	6560      	str	r0, [r4, #84]	; 0x54
 800bd3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd3e:	602f      	str	r7, [r5, #0]
 800bd40:	2900      	cmp	r1, #0
 800bd42:	d0ca      	beq.n	800bcda <__sflush_r+0x1a>
 800bd44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd48:	4299      	cmp	r1, r3
 800bd4a:	d002      	beq.n	800bd52 <__sflush_r+0x92>
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f7fd f9a7 	bl	80090a0 <_free_r>
 800bd52:	2000      	movs	r0, #0
 800bd54:	6360      	str	r0, [r4, #52]	; 0x34
 800bd56:	e7c1      	b.n	800bcdc <__sflush_r+0x1c>
 800bd58:	6a21      	ldr	r1, [r4, #32]
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	47b0      	blx	r6
 800bd60:	1c41      	adds	r1, r0, #1
 800bd62:	d1c7      	bne.n	800bcf4 <__sflush_r+0x34>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0c4      	beq.n	800bcf4 <__sflush_r+0x34>
 800bd6a:	2b1d      	cmp	r3, #29
 800bd6c:	d001      	beq.n	800bd72 <__sflush_r+0xb2>
 800bd6e:	2b16      	cmp	r3, #22
 800bd70:	d101      	bne.n	800bd76 <__sflush_r+0xb6>
 800bd72:	602f      	str	r7, [r5, #0]
 800bd74:	e7b1      	b.n	800bcda <__sflush_r+0x1a>
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd7c:	81a3      	strh	r3, [r4, #12]
 800bd7e:	e7ad      	b.n	800bcdc <__sflush_r+0x1c>
 800bd80:	690f      	ldr	r7, [r1, #16]
 800bd82:	2f00      	cmp	r7, #0
 800bd84:	d0a9      	beq.n	800bcda <__sflush_r+0x1a>
 800bd86:	0793      	lsls	r3, r2, #30
 800bd88:	bf18      	it	ne
 800bd8a:	2300      	movne	r3, #0
 800bd8c:	680e      	ldr	r6, [r1, #0]
 800bd8e:	bf08      	it	eq
 800bd90:	694b      	ldreq	r3, [r1, #20]
 800bd92:	eba6 0807 	sub.w	r8, r6, r7
 800bd96:	600f      	str	r7, [r1, #0]
 800bd98:	608b      	str	r3, [r1, #8]
 800bd9a:	f1b8 0f00 	cmp.w	r8, #0
 800bd9e:	dd9c      	ble.n	800bcda <__sflush_r+0x1a>
 800bda0:	4643      	mov	r3, r8
 800bda2:	463a      	mov	r2, r7
 800bda4:	4628      	mov	r0, r5
 800bda6:	6a21      	ldr	r1, [r4, #32]
 800bda8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bdaa:	47b0      	blx	r6
 800bdac:	2800      	cmp	r0, #0
 800bdae:	dc06      	bgt.n	800bdbe <__sflush_r+0xfe>
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	e78e      	b.n	800bcdc <__sflush_r+0x1c>
 800bdbe:	4407      	add	r7, r0
 800bdc0:	eba8 0800 	sub.w	r8, r8, r0
 800bdc4:	e7e9      	b.n	800bd9a <__sflush_r+0xda>
 800bdc6:	bf00      	nop
 800bdc8:	20400001 	.word	0x20400001

0800bdcc <_fflush_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	690b      	ldr	r3, [r1, #16]
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	b913      	cbnz	r3, 800bddc <_fflush_r+0x10>
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	4628      	mov	r0, r5
 800bdda:	bd38      	pop	{r3, r4, r5, pc}
 800bddc:	b118      	cbz	r0, 800bde6 <_fflush_r+0x1a>
 800bdde:	6983      	ldr	r3, [r0, #24]
 800bde0:	b90b      	cbnz	r3, 800bde6 <_fflush_r+0x1a>
 800bde2:	f7fe f8d1 	bl	8009f88 <__sinit>
 800bde6:	4b14      	ldr	r3, [pc, #80]	; (800be38 <_fflush_r+0x6c>)
 800bde8:	429c      	cmp	r4, r3
 800bdea:	d11b      	bne.n	800be24 <_fflush_r+0x58>
 800bdec:	686c      	ldr	r4, [r5, #4]
 800bdee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0ef      	beq.n	800bdd6 <_fflush_r+0xa>
 800bdf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdf8:	07d0      	lsls	r0, r2, #31
 800bdfa:	d404      	bmi.n	800be06 <_fflush_r+0x3a>
 800bdfc:	0599      	lsls	r1, r3, #22
 800bdfe:	d402      	bmi.n	800be06 <_fflush_r+0x3a>
 800be00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be02:	f7fe fcc6 	bl	800a792 <__retarget_lock_acquire_recursive>
 800be06:	4628      	mov	r0, r5
 800be08:	4621      	mov	r1, r4
 800be0a:	f7ff ff59 	bl	800bcc0 <__sflush_r>
 800be0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be10:	4605      	mov	r5, r0
 800be12:	07da      	lsls	r2, r3, #31
 800be14:	d4e0      	bmi.n	800bdd8 <_fflush_r+0xc>
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	059b      	lsls	r3, r3, #22
 800be1a:	d4dd      	bmi.n	800bdd8 <_fflush_r+0xc>
 800be1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be1e:	f7fe fcb9 	bl	800a794 <__retarget_lock_release_recursive>
 800be22:	e7d9      	b.n	800bdd8 <_fflush_r+0xc>
 800be24:	4b05      	ldr	r3, [pc, #20]	; (800be3c <_fflush_r+0x70>)
 800be26:	429c      	cmp	r4, r3
 800be28:	d101      	bne.n	800be2e <_fflush_r+0x62>
 800be2a:	68ac      	ldr	r4, [r5, #8]
 800be2c:	e7df      	b.n	800bdee <_fflush_r+0x22>
 800be2e:	4b04      	ldr	r3, [pc, #16]	; (800be40 <_fflush_r+0x74>)
 800be30:	429c      	cmp	r4, r3
 800be32:	bf08      	it	eq
 800be34:	68ec      	ldreq	r4, [r5, #12]
 800be36:	e7da      	b.n	800bdee <_fflush_r+0x22>
 800be38:	0800c2b0 	.word	0x0800c2b0
 800be3c:	0800c2d0 	.word	0x0800c2d0
 800be40:	0800c290 	.word	0x0800c290

0800be44 <fiprintf>:
 800be44:	b40e      	push	{r1, r2, r3}
 800be46:	b503      	push	{r0, r1, lr}
 800be48:	4601      	mov	r1, r0
 800be4a:	ab03      	add	r3, sp, #12
 800be4c:	4805      	ldr	r0, [pc, #20]	; (800be64 <fiprintf+0x20>)
 800be4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be52:	6800      	ldr	r0, [r0, #0]
 800be54:	9301      	str	r3, [sp, #4]
 800be56:	f7ff fb15 	bl	800b484 <_vfiprintf_r>
 800be5a:	b002      	add	sp, #8
 800be5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be60:	b003      	add	sp, #12
 800be62:	4770      	bx	lr
 800be64:	2000018c 	.word	0x2000018c

0800be68 <_lseek_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4604      	mov	r4, r0
 800be6c:	4608      	mov	r0, r1
 800be6e:	4611      	mov	r1, r2
 800be70:	2200      	movs	r2, #0
 800be72:	4d05      	ldr	r5, [pc, #20]	; (800be88 <_lseek_r+0x20>)
 800be74:	602a      	str	r2, [r5, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	f7f5 fec0 	bl	8001bfc <_lseek>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d102      	bne.n	800be86 <_lseek_r+0x1e>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	b103      	cbz	r3, 800be86 <_lseek_r+0x1e>
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	bd38      	pop	{r3, r4, r5, pc}
 800be88:	20001118 	.word	0x20001118

0800be8c <__swhatbuf_r>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	460e      	mov	r6, r1
 800be90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be94:	4614      	mov	r4, r2
 800be96:	2900      	cmp	r1, #0
 800be98:	461d      	mov	r5, r3
 800be9a:	b096      	sub	sp, #88	; 0x58
 800be9c:	da07      	bge.n	800beae <__swhatbuf_r+0x22>
 800be9e:	2300      	movs	r3, #0
 800bea0:	602b      	str	r3, [r5, #0]
 800bea2:	89b3      	ldrh	r3, [r6, #12]
 800bea4:	061a      	lsls	r2, r3, #24
 800bea6:	d410      	bmi.n	800beca <__swhatbuf_r+0x3e>
 800bea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beac:	e00e      	b.n	800becc <__swhatbuf_r+0x40>
 800beae:	466a      	mov	r2, sp
 800beb0:	f000 f8b8 	bl	800c024 <_fstat_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	dbf2      	blt.n	800be9e <__swhatbuf_r+0x12>
 800beb8:	9a01      	ldr	r2, [sp, #4]
 800beba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bec2:	425a      	negs	r2, r3
 800bec4:	415a      	adcs	r2, r3
 800bec6:	602a      	str	r2, [r5, #0]
 800bec8:	e7ee      	b.n	800bea8 <__swhatbuf_r+0x1c>
 800beca:	2340      	movs	r3, #64	; 0x40
 800becc:	2000      	movs	r0, #0
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	b016      	add	sp, #88	; 0x58
 800bed2:	bd70      	pop	{r4, r5, r6, pc}

0800bed4 <__smakebuf_r>:
 800bed4:	898b      	ldrh	r3, [r1, #12]
 800bed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bed8:	079d      	lsls	r5, r3, #30
 800beda:	4606      	mov	r6, r0
 800bedc:	460c      	mov	r4, r1
 800bede:	d507      	bpl.n	800bef0 <__smakebuf_r+0x1c>
 800bee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	6123      	str	r3, [r4, #16]
 800bee8:	2301      	movs	r3, #1
 800beea:	6163      	str	r3, [r4, #20]
 800beec:	b002      	add	sp, #8
 800beee:	bd70      	pop	{r4, r5, r6, pc}
 800bef0:	466a      	mov	r2, sp
 800bef2:	ab01      	add	r3, sp, #4
 800bef4:	f7ff ffca 	bl	800be8c <__swhatbuf_r>
 800bef8:	9900      	ldr	r1, [sp, #0]
 800befa:	4605      	mov	r5, r0
 800befc:	4630      	mov	r0, r6
 800befe:	f7fd f91b 	bl	8009138 <_malloc_r>
 800bf02:	b948      	cbnz	r0, 800bf18 <__smakebuf_r+0x44>
 800bf04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf08:	059a      	lsls	r2, r3, #22
 800bf0a:	d4ef      	bmi.n	800beec <__smakebuf_r+0x18>
 800bf0c:	f023 0303 	bic.w	r3, r3, #3
 800bf10:	f043 0302 	orr.w	r3, r3, #2
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	e7e3      	b.n	800bee0 <__smakebuf_r+0xc>
 800bf18:	4b0d      	ldr	r3, [pc, #52]	; (800bf50 <__smakebuf_r+0x7c>)
 800bf1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	6020      	str	r0, [r4, #0]
 800bf20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf24:	81a3      	strh	r3, [r4, #12]
 800bf26:	9b00      	ldr	r3, [sp, #0]
 800bf28:	6120      	str	r0, [r4, #16]
 800bf2a:	6163      	str	r3, [r4, #20]
 800bf2c:	9b01      	ldr	r3, [sp, #4]
 800bf2e:	b15b      	cbz	r3, 800bf48 <__smakebuf_r+0x74>
 800bf30:	4630      	mov	r0, r6
 800bf32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf36:	f000 f887 	bl	800c048 <_isatty_r>
 800bf3a:	b128      	cbz	r0, 800bf48 <__smakebuf_r+0x74>
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	f023 0303 	bic.w	r3, r3, #3
 800bf42:	f043 0301 	orr.w	r3, r3, #1
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	89a0      	ldrh	r0, [r4, #12]
 800bf4a:	4305      	orrs	r5, r0
 800bf4c:	81a5      	strh	r5, [r4, #12]
 800bf4e:	e7cd      	b.n	800beec <__smakebuf_r+0x18>
 800bf50:	08009f21 	.word	0x08009f21

0800bf54 <memchr>:
 800bf54:	4603      	mov	r3, r0
 800bf56:	b510      	push	{r4, lr}
 800bf58:	b2c9      	uxtb	r1, r1
 800bf5a:	4402      	add	r2, r0
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	4618      	mov	r0, r3
 800bf60:	d101      	bne.n	800bf66 <memchr+0x12>
 800bf62:	2000      	movs	r0, #0
 800bf64:	e003      	b.n	800bf6e <memchr+0x1a>
 800bf66:	7804      	ldrb	r4, [r0, #0]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	428c      	cmp	r4, r1
 800bf6c:	d1f6      	bne.n	800bf5c <memchr+0x8>
 800bf6e:	bd10      	pop	{r4, pc}

0800bf70 <memmove>:
 800bf70:	4288      	cmp	r0, r1
 800bf72:	b510      	push	{r4, lr}
 800bf74:	eb01 0402 	add.w	r4, r1, r2
 800bf78:	d902      	bls.n	800bf80 <memmove+0x10>
 800bf7a:	4284      	cmp	r4, r0
 800bf7c:	4623      	mov	r3, r4
 800bf7e:	d807      	bhi.n	800bf90 <memmove+0x20>
 800bf80:	1e43      	subs	r3, r0, #1
 800bf82:	42a1      	cmp	r1, r4
 800bf84:	d008      	beq.n	800bf98 <memmove+0x28>
 800bf86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf8e:	e7f8      	b.n	800bf82 <memmove+0x12>
 800bf90:	4601      	mov	r1, r0
 800bf92:	4402      	add	r2, r0
 800bf94:	428a      	cmp	r2, r1
 800bf96:	d100      	bne.n	800bf9a <memmove+0x2a>
 800bf98:	bd10      	pop	{r4, pc}
 800bf9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfa2:	e7f7      	b.n	800bf94 <memmove+0x24>

0800bfa4 <_realloc_r>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	4607      	mov	r7, r0
 800bfa8:	4614      	mov	r4, r2
 800bfaa:	460e      	mov	r6, r1
 800bfac:	b921      	cbnz	r1, 800bfb8 <_realloc_r+0x14>
 800bfae:	4611      	mov	r1, r2
 800bfb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bfb4:	f7fd b8c0 	b.w	8009138 <_malloc_r>
 800bfb8:	b922      	cbnz	r2, 800bfc4 <_realloc_r+0x20>
 800bfba:	f7fd f871 	bl	80090a0 <_free_r>
 800bfbe:	4625      	mov	r5, r4
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc4:	f000 f850 	bl	800c068 <_malloc_usable_size_r>
 800bfc8:	42a0      	cmp	r0, r4
 800bfca:	d20f      	bcs.n	800bfec <_realloc_r+0x48>
 800bfcc:	4621      	mov	r1, r4
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f7fd f8b2 	bl	8009138 <_malloc_r>
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d0f2      	beq.n	800bfc0 <_realloc_r+0x1c>
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4622      	mov	r2, r4
 800bfde:	f7fe fbec 	bl	800a7ba <memcpy>
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	4638      	mov	r0, r7
 800bfe6:	f7fd f85b 	bl	80090a0 <_free_r>
 800bfea:	e7e9      	b.n	800bfc0 <_realloc_r+0x1c>
 800bfec:	4635      	mov	r5, r6
 800bfee:	e7e7      	b.n	800bfc0 <_realloc_r+0x1c>

0800bff0 <_read_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4604      	mov	r4, r0
 800bff4:	4608      	mov	r0, r1
 800bff6:	4611      	mov	r1, r2
 800bff8:	2200      	movs	r2, #0
 800bffa:	4d05      	ldr	r5, [pc, #20]	; (800c010 <_read_r+0x20>)
 800bffc:	602a      	str	r2, [r5, #0]
 800bffe:	461a      	mov	r2, r3
 800c000:	f7f5 fd9f 	bl	8001b42 <_read>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_read_r+0x1e>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_read_r+0x1e>
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	20001118 	.word	0x20001118

0800c014 <abort>:
 800c014:	2006      	movs	r0, #6
 800c016:	b508      	push	{r3, lr}
 800c018:	f000 f856 	bl	800c0c8 <raise>
 800c01c:	2001      	movs	r0, #1
 800c01e:	f7f5 fd86 	bl	8001b2e <_exit>
	...

0800c024 <_fstat_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	2300      	movs	r3, #0
 800c028:	4d06      	ldr	r5, [pc, #24]	; (800c044 <_fstat_r+0x20>)
 800c02a:	4604      	mov	r4, r0
 800c02c:	4608      	mov	r0, r1
 800c02e:	4611      	mov	r1, r2
 800c030:	602b      	str	r3, [r5, #0]
 800c032:	f7f5 fdca 	bl	8001bca <_fstat>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	d102      	bne.n	800c040 <_fstat_r+0x1c>
 800c03a:	682b      	ldr	r3, [r5, #0]
 800c03c:	b103      	cbz	r3, 800c040 <_fstat_r+0x1c>
 800c03e:	6023      	str	r3, [r4, #0]
 800c040:	bd38      	pop	{r3, r4, r5, pc}
 800c042:	bf00      	nop
 800c044:	20001118 	.word	0x20001118

0800c048 <_isatty_r>:
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	2300      	movs	r3, #0
 800c04c:	4d05      	ldr	r5, [pc, #20]	; (800c064 <_isatty_r+0x1c>)
 800c04e:	4604      	mov	r4, r0
 800c050:	4608      	mov	r0, r1
 800c052:	602b      	str	r3, [r5, #0]
 800c054:	f7f5 fdc8 	bl	8001be8 <_isatty>
 800c058:	1c43      	adds	r3, r0, #1
 800c05a:	d102      	bne.n	800c062 <_isatty_r+0x1a>
 800c05c:	682b      	ldr	r3, [r5, #0]
 800c05e:	b103      	cbz	r3, 800c062 <_isatty_r+0x1a>
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	bd38      	pop	{r3, r4, r5, pc}
 800c064:	20001118 	.word	0x20001118

0800c068 <_malloc_usable_size_r>:
 800c068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c06c:	1f18      	subs	r0, r3, #4
 800c06e:	2b00      	cmp	r3, #0
 800c070:	bfbc      	itt	lt
 800c072:	580b      	ldrlt	r3, [r1, r0]
 800c074:	18c0      	addlt	r0, r0, r3
 800c076:	4770      	bx	lr

0800c078 <_raise_r>:
 800c078:	291f      	cmp	r1, #31
 800c07a:	b538      	push	{r3, r4, r5, lr}
 800c07c:	4604      	mov	r4, r0
 800c07e:	460d      	mov	r5, r1
 800c080:	d904      	bls.n	800c08c <_raise_r+0x14>
 800c082:	2316      	movs	r3, #22
 800c084:	6003      	str	r3, [r0, #0]
 800c086:	f04f 30ff 	mov.w	r0, #4294967295
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c08e:	b112      	cbz	r2, 800c096 <_raise_r+0x1e>
 800c090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c094:	b94b      	cbnz	r3, 800c0aa <_raise_r+0x32>
 800c096:	4620      	mov	r0, r4
 800c098:	f000 f830 	bl	800c0fc <_getpid_r>
 800c09c:	462a      	mov	r2, r5
 800c09e:	4601      	mov	r1, r0
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0a6:	f000 b817 	b.w	800c0d8 <_kill_r>
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d00a      	beq.n	800c0c4 <_raise_r+0x4c>
 800c0ae:	1c59      	adds	r1, r3, #1
 800c0b0:	d103      	bne.n	800c0ba <_raise_r+0x42>
 800c0b2:	2316      	movs	r3, #22
 800c0b4:	6003      	str	r3, [r0, #0]
 800c0b6:	2001      	movs	r0, #1
 800c0b8:	e7e7      	b.n	800c08a <_raise_r+0x12>
 800c0ba:	2400      	movs	r4, #0
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0c2:	4798      	blx	r3
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	e7e0      	b.n	800c08a <_raise_r+0x12>

0800c0c8 <raise>:
 800c0c8:	4b02      	ldr	r3, [pc, #8]	; (800c0d4 <raise+0xc>)
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	6818      	ldr	r0, [r3, #0]
 800c0ce:	f7ff bfd3 	b.w	800c078 <_raise_r>
 800c0d2:	bf00      	nop
 800c0d4:	2000018c 	.word	0x2000018c

0800c0d8 <_kill_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	2300      	movs	r3, #0
 800c0dc:	4d06      	ldr	r5, [pc, #24]	; (800c0f8 <_kill_r+0x20>)
 800c0de:	4604      	mov	r4, r0
 800c0e0:	4608      	mov	r0, r1
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	602b      	str	r3, [r5, #0]
 800c0e6:	f7f5 fd12 	bl	8001b0e <_kill>
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	d102      	bne.n	800c0f4 <_kill_r+0x1c>
 800c0ee:	682b      	ldr	r3, [r5, #0]
 800c0f0:	b103      	cbz	r3, 800c0f4 <_kill_r+0x1c>
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	bd38      	pop	{r3, r4, r5, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20001118 	.word	0x20001118

0800c0fc <_getpid_r>:
 800c0fc:	f7f5 bd00 	b.w	8001b00 <_getpid>

0800c100 <_init>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	bf00      	nop
 800c104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c106:	bc08      	pop	{r3}
 800c108:	469e      	mov	lr, r3
 800c10a:	4770      	bx	lr

0800c10c <_fini>:
 800c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10e:	bf00      	nop
 800c110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c112:	bc08      	pop	{r3}
 800c114:	469e      	mov	lr, r3
 800c116:	4770      	bx	lr
